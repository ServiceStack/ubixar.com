{"KSampler": {"input": {"required": {"model": ["MODEL", {"tooltip": "The model used for denoising the input latent."}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "control_after_generate": true, "tooltip": "The random seed used for creating the noise."}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000, "tooltip": "The number of steps used in the denoising process."}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0, "step": 0.1, "round": 0.01, "tooltip": "The Classifier-Free Guidance scale balances creativity and adherence to the prompt. Higher values result in images more closely matching the prompt however too high values will negatively impact quality."}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"], {"tooltip": "The algorithm used when sampling, this can affect the quality, speed, and style of the generated output."}], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"], {"tooltip": "The scheduler controls how noise is gradually removed to form the image."}], "positive": ["CONDITIONING", {"tooltip": "The conditioning describing the attributes you want to include in the image."}], "negative": ["CONDITIONING", {"tooltip": "The conditioning describing the attributes you want to exclude from the image."}], "latent_image": ["LATENT", {"tooltip": "The latent image to denoise."}], "denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01, "tooltip": "The amount of denoising applied, lower values will maintain the structure of the initial image allowing for image to image sampling."}]}}, "input_order": {"required": ["model", "seed", "steps", "cfg", "sampler_name", "scheduler", "positive", "negative", "latent_image", "denoise"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "KSampler", "display_name": "KSampler", "description": "Uses the provided model, positive and negative conditioning to denoise the latent image.", "python_module": "nodes", "category": "sampling", "output_node": false, "output_tooltips": ["The denoised latent."]}, "CheckpointLoaderSimple": {"input": {"required": {"ckpt_name": [["3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"], {"tooltip": "The name of the checkpoint (model) to load."}]}}, "input_order": {"required": ["ckpt_name"]}, "output": ["MODEL", "CLIP", "VAE"], "output_is_list": [false, false, false], "output_name": ["MODEL", "CLIP", "VAE"], "name": "CheckpointLoaderSimple", "display_name": "Load Checkpoint", "description": "Loads a diffusion model checkpoint, diffusion models are used to denoise latents.", "python_module": "nodes", "category": "loaders", "output_node": false, "output_tooltips": ["The model used for denoising latents.", "The CLIP model used for encoding text prompts.", "The VAE model used for encoding and decoding images to and from latent space."]}, "CLIPTextEncode": {"input": {"required": {"text": ["STRING", {"multiline": true, "dynamicPrompts": true, "tooltip": "The text to be encoded."}], "clip": ["CLIP", {"tooltip": "The CLIP model used for encoding the text."}]}}, "input_order": {"required": ["text", "clip"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "CLIPTextEncode", "display_name": "CLIP Text Encode (Prompt)", "description": "Encodes a text prompt using a CLIP model into an embedding that can be used to guide the diffusion model towards generating specific images.", "python_module": "nodes", "category": "conditioning", "output_node": false, "output_tooltips": ["A conditioning containing the embedded text used to guide the diffusion model."]}, "CLIPSetLastLayer": {"input": {"required": {"clip": ["CLIP"], "stop_at_clip_layer": ["INT", {"default": -1, "min": -24, "max": -1, "step": 1}]}}, "input_order": {"required": ["clip", "stop_at_clip_layer"]}, "output": ["CLIP"], "output_is_list": [false], "output_name": ["CLIP"], "name": "CLIPSetLastLayer", "display_name": "CLIP Set Last Layer", "description": "", "python_module": "nodes", "category": "conditioning", "output_node": false}, "VAEDecode": {"input": {"required": {"samples": ["LATENT", {"tooltip": "The latent to be decoded."}], "vae": ["VAE", {"tooltip": "The VAE model used for decoding the latent."}]}}, "input_order": {"required": ["samples", "vae"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "VAEDecode", "display_name": "VAE Decode", "description": "Decodes latent images back into pixel space images.", "python_module": "nodes", "category": "latent", "output_node": false, "output_tooltips": ["The decoded image."]}, "VAEEncode": {"input": {"required": {"pixels": ["IMAGE"], "vae": ["VAE"]}}, "input_order": {"required": ["pixels", "vae"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "VAEEncode", "display_name": "VAE Encode", "description": "", "python_module": "nodes", "category": "latent", "output_node": false}, "VAEEncodeForInpaint": {"input": {"required": {"pixels": ["IMAGE"], "vae": ["VAE"], "mask": ["MASK"], "grow_mask_by": ["INT", {"default": 6, "min": 0, "max": 64, "step": 1}]}}, "input_order": {"required": ["pixels", "vae", "mask", "grow_mask_by"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "VAEEncodeForInpaint", "display_name": "VAE Encode (for Inpainting)", "description": "", "python_module": "nodes", "category": "latent/inpaint", "output_node": false}, "VAELoader": {"input": {"required": {"vae_name": [["4x_foolhardy_Remacri.pth", "ae.safetensors", "sdxl_vae.safetensors"]]}}, "input_order": {"required": ["vae_name"]}, "output": ["VAE"], "output_is_list": [false], "output_name": ["VAE"], "name": "VAELoader", "display_name": "Load VAE", "description": "", "python_module": "nodes", "category": "loaders", "output_node": false}, "EmptyLatentImage": {"input": {"required": {"width": ["INT", {"default": 512, "min": 16, "max": 16384, "step": 8, "tooltip": "The width of the latent images in pixels."}], "height": ["INT", {"default": 512, "min": 16, "max": 16384, "step": 8, "tooltip": "The height of the latent images in pixels."}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096, "tooltip": "The number of latent images in the batch."}]}}, "input_order": {"required": ["width", "height", "batch_size"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "EmptyLatentImage", "display_name": "Empty Latent Image", "description": "Create a new batch of empty latent images to be denoised via sampling.", "python_module": "nodes", "category": "latent", "output_node": false, "output_tooltips": ["The empty latent image batch."]}, "LatentUpscale": {"input": {"required": {"samples": ["LATENT"], "upscale_method": [["nearest-exact", "bilinear", "area", "bicubic", "bislerp"]], "width": ["INT", {"default": 512, "min": 0, "max": 16384, "step": 8}], "height": ["INT", {"default": 512, "min": 0, "max": 16384, "step": 8}], "crop": [["disabled", "center"]]}}, "input_order": {"required": ["samples", "upscale_method", "width", "height", "crop"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "LatentUpscale", "display_name": "Upscale Latent", "description": "", "python_module": "nodes", "category": "latent", "output_node": false}, "LatentUpscaleBy": {"input": {"required": {"samples": ["LATENT"], "upscale_method": [["nearest-exact", "bilinear", "area", "bicubic", "bislerp"]], "scale_by": ["FLOAT", {"default": 1.5, "min": 0.01, "max": 8.0, "step": 0.01}]}}, "input_order": {"required": ["samples", "upscale_method", "scale_by"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "LatentUpscaleBy", "display_name": "Upscale Latent By", "description": "", "python_module": "nodes", "category": "latent", "output_node": false}, "LatentFromBatch": {"input": {"required": {"samples": ["LATENT"], "batch_index": ["INT", {"default": 0, "min": 0, "max": 63}], "length": ["INT", {"default": 1, "min": 1, "max": 64}]}}, "input_order": {"required": ["samples", "batch_index", "length"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "LatentFromBatch", "display_name": "Latent From Batch", "description": "", "python_module": "nodes", "category": "latent/batch", "output_node": false}, "RepeatLatentBatch": {"input": {"required": {"samples": ["LATENT"], "amount": ["INT", {"default": 1, "min": 1, "max": 64}]}}, "input_order": {"required": ["samples", "amount"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "RepeatLatentBatch", "display_name": "Repeat Latent Batch", "description": "", "python_module": "nodes", "category": "latent/batch", "output_node": false}, "SaveImage": {"input": {"required": {"images": ["IMAGE", {"tooltip": "The images to save."}], "filename_prefix": ["STRING", {"default": "ComfyUI", "tooltip": "The prefix for the file to save. This may include formatting information such as %date:yyyy-MM-dd% or %Empty Latent Image.width% to include values from nodes."}]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["images", "filename_prefix"], "hidden": ["prompt", "extra_pnginfo"]}, "output": [], "output_is_list": [], "output_name": [], "name": "SaveImage", "display_name": "Save Image", "description": "Saves the input images to your ComfyUI output directory.", "python_module": "nodes", "category": "image", "output_node": true}, "PreviewImage": {"input": {"required": {"images": ["IMAGE"]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["images"], "hidden": ["prompt", "extra_pnginfo"]}, "output": [], "output_is_list": [], "output_name": [], "name": "PreviewImage", "display_name": "Preview Image", "description": "Saves the input images to your ComfyUI output directory.", "python_module": "nodes", "category": "image", "output_node": true}, "LoadImage": {"input": {"required": {"image": [[], {"image_upload": true}]}}, "input_order": {"required": ["image"]}, "output": ["IMAGE", "MASK"], "output_is_list": [false, false], "output_name": ["IMAGE", "MASK"], "name": "LoadImage", "display_name": "Load Image", "description": "", "python_module": "nodes", "category": "image", "output_node": false}, "LoadImageMask": {"input": {"required": {"image": [["06d0d6e92e43f12050a047b7e9c0ad1b280a78206072fab30c9f0556155e870b.m4a"], {"image_upload": true}], "channel": [["alpha", "red", "green", "blue"]]}}, "input_order": {"required": ["image", "channel"]}, "output": ["MASK"], "output_is_list": [false], "output_name": ["MASK"], "name": "LoadImageMask", "display_name": "Load Image (as Mask)", "description": "", "python_module": "nodes", "category": "mask", "output_node": false}, "LoadImageOutput": {"input": {"required": {"image": ["COMBO", {"image_upload": true, "image_folder": "output", "remote": {"route": "/internal/files/output", "refresh_button": true, "control_after_refresh": "first"}}]}}, "input_order": {"required": ["image"]}, "output": ["IMAGE", "MASK"], "output_is_list": [false, false], "output_name": ["IMAGE", "MASK"], "name": "LoadImageOutput", "display_name": "Load Image (from Outputs)", "description": "Load an image from the output folder. When the refresh button is clicked, the node will update the image list and automatically select the first image, allowing for easy iteration.", "python_module": "nodes", "category": "image", "output_node": false, "experimental": true}, "ImageScale": {"input": {"required": {"image": ["IMAGE"], "upscale_method": [["nearest-exact", "bilinear", "area", "bicubic", "lanczos"]], "width": ["INT", {"default": 512, "min": 0, "max": 16384, "step": 1}], "height": ["INT", {"default": 512, "min": 0, "max": 16384, "step": 1}], "crop": [["disabled", "center"]]}}, "input_order": {"required": ["image", "upscale_method", "width", "height", "crop"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "ImageScale", "display_name": "Upscale Image", "description": "", "python_module": "nodes", "category": "image/upscaling", "output_node": false}, "ImageScaleBy": {"input": {"required": {"image": ["IMAGE"], "upscale_method": [["nearest-exact", "bilinear", "area", "bicubic", "lanczos"]], "scale_by": ["FLOAT", {"default": 1.0, "min": 0.01, "max": 8.0, "step": 0.01}]}}, "input_order": {"required": ["image", "upscale_method", "scale_by"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "ImageScaleBy", "display_name": "Upscale Image By", "description": "", "python_module": "nodes", "category": "image/upscaling", "output_node": false}, "ImageInvert": {"input": {"required": {"image": ["IMAGE"]}}, "input_order": {"required": ["image"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "ImageInvert", "display_name": "Invert Image", "description": "", "python_module": "nodes", "category": "image", "output_node": false}, "ImageBatch": {"input": {"required": {"image1": ["IMAGE"], "image2": ["IMAGE"]}}, "input_order": {"required": ["image1", "image2"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "ImageBatch", "display_name": "Batch Images", "description": "", "python_module": "nodes", "category": "image", "output_node": false}, "ImagePadForOutpaint": {"input": {"required": {"image": ["IMAGE"], "left": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 8}], "top": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 8}], "right": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 8}], "bottom": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 8}], "feathering": ["INT", {"default": 40, "min": 0, "max": 16384, "step": 1}]}}, "input_order": {"required": ["image", "left", "top", "right", "bottom", "feathering"]}, "output": ["IMAGE", "MASK"], "output_is_list": [false, false], "output_name": ["IMAGE", "MASK"], "name": "ImagePadForOutpaint", "display_name": "Pad Image for Outpainting", "description": "", "python_module": "nodes", "category": "image", "output_node": false}, "EmptyImage": {"input": {"required": {"width": ["INT", {"default": 512, "min": 1, "max": 16384, "step": 1}], "height": ["INT", {"default": 512, "min": 1, "max": 16384, "step": 1}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096}], "color": ["INT", {"default": 0, "min": 0, "max": 16777215, "step": 1, "display": "color"}]}}, "input_order": {"required": ["width", "height", "batch_size", "color"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "EmptyImage", "display_name": "EmptyImage", "description": "", "python_module": "nodes", "category": "image", "output_node": false}, "ConditioningAverage": {"input": {"required": {"conditioning_to": ["CONDITIONING"], "conditioning_from": ["CONDITIONING"], "conditioning_to_strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["conditioning_to", "conditioning_from", "conditioning_to_strength"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "ConditioningAverage", "display_name": "ConditioningAverage", "description": "", "python_module": "nodes", "category": "conditioning", "output_node": false}, "ConditioningCombine": {"input": {"required": {"conditioning_1": ["CONDITIONING"], "conditioning_2": ["CONDITIONING"]}}, "input_order": {"required": ["conditioning_1", "conditioning_2"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "ConditioningCombine", "display_name": "Conditioning (Combine)", "description": "", "python_module": "nodes", "category": "conditioning", "output_node": false}, "ConditioningConcat": {"input": {"required": {"conditioning_to": ["CONDITIONING"], "conditioning_from": ["CONDITIONING"]}}, "input_order": {"required": ["conditioning_to", "conditioning_from"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "ConditioningConcat", "display_name": "Conditioning (Concat)", "description": "", "python_module": "nodes", "category": "conditioning", "output_node": false}, "ConditioningSetArea": {"input": {"required": {"conditioning": ["CONDITIONING"], "width": ["INT", {"default": 64, "min": 64, "max": 16384, "step": 8}], "height": ["INT", {"default": 64, "min": 64, "max": 16384, "step": 8}], "x": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 8}], "y": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 8}], "strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}]}}, "input_order": {"required": ["conditioning", "width", "height", "x", "y", "strength"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "ConditioningSetArea", "display_name": "Conditioning (Set Area)", "description": "", "python_module": "nodes", "category": "conditioning", "output_node": false}, "ConditioningSetAreaPercentage": {"input": {"required": {"conditioning": ["CONDITIONING"], "width": ["FLOAT", {"default": 1.0, "min": 0, "max": 1.0, "step": 0.01}], "height": ["FLOAT", {"default": 1.0, "min": 0, "max": 1.0, "step": 0.01}], "x": ["FLOAT", {"default": 0, "min": 0, "max": 1.0, "step": 0.01}], "y": ["FLOAT", {"default": 0, "min": 0, "max": 1.0, "step": 0.01}], "strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}]}}, "input_order": {"required": ["conditioning", "width", "height", "x", "y", "strength"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "ConditioningSetAreaPercentage", "display_name": "Conditioning (Set Area with Percentage)", "description": "", "python_module": "nodes", "category": "conditioning", "output_node": false}, "ConditioningSetAreaStrength": {"input": {"required": {"conditioning": ["CONDITIONING"], "strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}]}}, "input_order": {"required": ["conditioning", "strength"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "ConditioningSetAreaStrength", "display_name": "ConditioningSetAreaStrength", "description": "", "python_module": "nodes", "category": "conditioning", "output_node": false}, "ConditioningSetMask": {"input": {"required": {"conditioning": ["CONDITIONING"], "mask": ["MASK"], "strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}], "set_cond_area": [["default", "mask bounds"]]}}, "input_order": {"required": ["conditioning", "mask", "strength", "set_cond_area"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "ConditioningSetMask", "display_name": "Conditioning (Set Mask)", "description": "", "python_module": "nodes", "category": "conditioning", "output_node": false}, "KSamplerAdvanced": {"input": {"required": {"model": ["MODEL"], "add_noise": [["enable", "disable"]], "noise_seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "control_after_generate": true}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0, "step": 0.1, "round": 0.01}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "latent_image": ["LATENT"], "start_at_step": ["INT", {"default": 0, "min": 0, "max": 10000}], "end_at_step": ["INT", {"default": 10000, "min": 0, "max": 10000}], "return_with_leftover_noise": [["disable", "enable"]]}}, "input_order": {"required": ["model", "add_noise", "noise_seed", "steps", "cfg", "sampler_name", "scheduler", "positive", "negative", "latent_image", "start_at_step", "end_at_step", "return_with_leftover_noise"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "KSamplerAdvanced", "display_name": "KSampler (Advanced)", "description": "", "python_module": "nodes", "category": "sampling", "output_node": false}, "SetLatentNoiseMask": {"input": {"required": {"samples": ["LATENT"], "mask": ["MASK"]}}, "input_order": {"required": ["samples", "mask"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "SetLatentNoiseMask", "display_name": "Set Latent Noise Mask", "description": "", "python_module": "nodes", "category": "latent/inpaint", "output_node": false}, "LatentComposite": {"input": {"required": {"samples_to": ["LATENT"], "samples_from": ["LATENT"], "x": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 8}], "y": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 8}], "feather": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 8}]}}, "input_order": {"required": ["samples_to", "samples_from", "x", "y", "feather"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "LatentComposite", "display_name": "Latent Composite", "description": "", "python_module": "nodes", "category": "latent", "output_node": false}, "LatentBlend": {"input": {"required": {"samples1": ["LATENT"], "samples2": ["LATENT"], "blend_factor": ["FLOAT", {"default": 0.5, "min": 0, "max": 1, "step": 0.01}]}}, "input_order": {"required": ["samples1", "samples2", "blend_factor"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "LatentBlend", "display_name": "Latent Blend", "description": "", "python_module": "nodes", "category": "_for_testing", "output_node": false}, "LatentRotate": {"input": {"required": {"samples": ["LATENT"], "rotation": [["none", "90 degrees", "180 degrees", "270 degrees"]]}}, "input_order": {"required": ["samples", "rotation"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "LatentRotate", "display_name": "Rotate Latent", "description": "", "python_module": "nodes", "category": "latent/transform", "output_node": false}, "LatentFlip": {"input": {"required": {"samples": ["LATENT"], "flip_method": [["x-axis: vertically", "y-axis: horizontally"]]}}, "input_order": {"required": ["samples", "flip_method"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "LatentFlip", "display_name": "Flip Latent", "description": "", "python_module": "nodes", "category": "latent/transform", "output_node": false}, "LatentCrop": {"input": {"required": {"samples": ["LATENT"], "width": ["INT", {"default": 512, "min": 64, "max": 16384, "step": 8}], "height": ["INT", {"default": 512, "min": 64, "max": 16384, "step": 8}], "x": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 8}], "y": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 8}]}}, "input_order": {"required": ["samples", "width", "height", "x", "y"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "LatentCrop", "display_name": "Crop Latent", "description": "", "python_module": "nodes", "category": "latent/transform", "output_node": false}, "LoraLoader": {"input": {"required": {"model": ["MODEL", {"tooltip": "The diffusion model the LoRA will be applied to."}], "clip": ["CLIP", {"tooltip": "The CLIP model the LoRA will be applied to."}], "lora_name": [["Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"tooltip": "The name of the LoRA."}], "strength_model": ["FLOAT", {"default": 1.0, "min": -100.0, "max": 100.0, "step": 0.01, "tooltip": "How strongly to modify the diffusion model. This value can be negative."}], "strength_clip": ["FLOAT", {"default": 1.0, "min": -100.0, "max": 100.0, "step": 0.01, "tooltip": "How strongly to modify the CLIP model. This value can be negative."}]}}, "input_order": {"required": ["model", "clip", "lora_name", "strength_model", "strength_clip"]}, "output": ["MODEL", "CLIP"], "output_is_list": [false, false], "output_name": ["MODEL", "CLIP"], "name": "LoraLoader", "display_name": "Load LoRA", "description": "LoRAs are used to modify diffusion and CLIP models, altering the way in which latents are denoised such as applying styles. Multiple LoRA nodes can be linked together.", "python_module": "nodes", "category": "loaders", "output_node": false, "output_tooltips": ["The modified diffusion model.", "The modified CLIP model."]}, "CLIPLoader": {"input": {"required": {"clip_name": [["clip_g.safetensors", "clip_g_hidream.safetensors", "clip_l.safetensors", "clip_l_hidream.safetensors", "llama_3.1_8b_instruct_fp8_scaled.safetensors", "t5_base.safetensors", "t5xxl_fp16.safetensors", "t5xxl_fp8_e4m3fn.safetensors", "t5xxl_fp8_e4m3fn_scaled.safetensors", "umt5_xxl_fp8_e4m3fn_scaled.safetensors"]], "type": [["stable_diffusion", "stable_cascade", "sd3", "stable_audio", "mochi", "ltxv", "pixart", "cosmos", "lumina2", "wan", "hidream", "chroma", "ace", "omnigen2", "qwen_image"]]}, "optional": {"device": [["default", "cpu"], {"advanced": true}]}}, "input_order": {"required": ["clip_name", "type"], "optional": ["device"]}, "output": ["CLIP"], "output_is_list": [false], "output_name": ["CLIP"], "name": "CLIPLoader", "display_name": "Load CLIP", "description": "[Recipes]\n\nstable_diffusion: clip-l\nstable_cascade: clip-g\nsd3: t5 xxl/ clip-g / clip-l\nstable_audio: t5 base\nmochi: t5 xxl\ncosmos: old t5 xxl\nlumina2: gemma 2 2B\nwan: umt5 xxl\n hidream: llama-3.1 (Recommend) or t5\nomnigen2: qwen vl 2.5 3B", "python_module": "nodes", "category": "advanced/loaders", "output_node": false}, "UNETLoader": {"input": {"required": {"unet_name": [["flux1-krea-dev_fp8_scaled.safetensors", "flux1-schnell.safetensors", "hidream_i1_dev_fp8.safetensors", "hidream_i1_fast_fp8.safetensors"]], "weight_dtype": [["default", "fp8_e4m3fn", "fp8_e4m3fn_fast", "fp8_e5m2"]]}}, "input_order": {"required": ["unet_name", "weight_dtype"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "UNETLoader", "display_name": "Load Diffusion Model", "description": "", "python_module": "nodes", "category": "advanced/loaders", "output_node": false}, "DualCLIPLoader": {"input": {"required": {"clip_name1": [["clip_g.safetensors", "clip_g_hidream.safetensors", "clip_l.safetensors", "clip_l_hidream.safetensors", "llama_3.1_8b_instruct_fp8_scaled.safetensors", "t5_base.safetensors", "t5xxl_fp16.safetensors", "t5xxl_fp8_e4m3fn.safetensors", "t5xxl_fp8_e4m3fn_scaled.safetensors", "umt5_xxl_fp8_e4m3fn_scaled.safetensors"]], "clip_name2": [["clip_g.safetensors", "clip_g_hidream.safetensors", "clip_l.safetensors", "clip_l_hidream.safetensors", "llama_3.1_8b_instruct_fp8_scaled.safetensors", "t5_base.safetensors", "t5xxl_fp16.safetensors", "t5xxl_fp8_e4m3fn.safetensors", "t5xxl_fp8_e4m3fn_scaled.safetensors", "umt5_xxl_fp8_e4m3fn_scaled.safetensors"]], "type": [["sdxl", "sd3", "flux", "hunyuan_video", "hidream"]]}, "optional": {"device": [["default", "cpu"], {"advanced": true}]}}, "input_order": {"required": ["clip_name1", "clip_name2", "type"], "optional": ["device"]}, "output": ["CLIP"], "output_is_list": [false], "output_name": ["CLIP"], "name": "DualCLIPLoader", "display_name": "DualCLIPLoader", "description": "[Recipes]\n\nsdxl: clip-l, clip-g\nsd3: clip-l, clip-g / clip-l, t5 / clip-g, t5\nflux: clip-l, t5\nhidream: at least one of t5 or llama, recommended t5 and llama", "python_module": "nodes", "category": "advanced/loaders", "output_node": false}, "CLIPVisionEncode": {"input": {"required": {"clip_vision": ["CLIP_VISION"], "image": ["IMAGE"], "crop": [["center", "none"]]}}, "input_order": {"required": ["clip_vision", "image", "crop"]}, "output": ["CLIP_VISION_OUTPUT"], "output_is_list": [false], "output_name": ["CLIP_VISION_OUTPUT"], "name": "CLIPVisionEncode", "display_name": "CLIP Vision Encode", "description": "", "python_module": "nodes", "category": "conditioning", "output_node": false}, "StyleModelApply": {"input": {"required": {"conditioning": ["CONDITIONING"], "style_model": ["STYLE_MODEL"], "clip_vision_output": ["CLIP_VISION_OUTPUT"], "strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.001}], "strength_type": [["multiply", "attn_bias"]]}}, "input_order": {"required": ["conditioning", "style_model", "clip_vision_output", "strength", "strength_type"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "StyleModelApply", "display_name": "Apply Style Model", "description": "", "python_module": "nodes", "category": "conditioning/style_model", "output_node": false}, "unCLIPConditioning": {"input": {"required": {"conditioning": ["CONDITIONING"], "clip_vision_output": ["CLIP_VISION_OUTPUT"], "strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "noise_augmentation": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["conditioning", "clip_vision_output", "strength", "noise_augmentation"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "unCLIPConditioning", "display_name": "unCLIPConditioning", "description": "", "python_module": "nodes", "category": "conditioning", "output_node": false}, "ControlNetApply": {"input": {"required": {"conditioning": ["CONDITIONING"], "control_net": ["CONTROL_NET"], "image": ["IMAGE"], "strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}]}}, "input_order": {"required": ["conditioning", "control_net", "image", "strength"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "ControlNetApply", "display_name": "Apply ControlNet (OLD)", "description": "", "python_module": "nodes", "category": "conditioning/controlnet", "output_node": false, "deprecated": true}, "ControlNetApplyAdvanced": {"input": {"required": {"positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "control_net": ["CONTROL_NET"], "image": ["IMAGE"], "strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}], "start_percent": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.001}], "end_percent": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}]}, "optional": {"vae": ["VAE"]}}, "input_order": {"required": ["positive", "negative", "control_net", "image", "strength", "start_percent", "end_percent"], "optional": ["vae"]}, "output": ["CONDITIONING", "CONDITIONING"], "output_is_list": [false, false], "output_name": ["positive", "negative"], "name": "ControlNetApplyAdvanced", "display_name": "Apply ControlNet", "description": "", "python_module": "nodes", "category": "conditioning/controlnet", "output_node": false}, "ControlNetLoader": {"input": {"required": {"control_net_name": [["control_v11p_sd15_scribble_fp16.safetensors", "ttplanetSDXLControlnet_v20Fp16.safetensors"]]}}, "input_order": {"required": ["control_net_name"]}, "output": ["CONTROL_NET"], "output_is_list": [false], "output_name": ["CONTROL_NET"], "name": "ControlNetLoader", "display_name": "Load ControlNet Model", "description": "", "python_module": "nodes", "category": "loaders", "output_node": false}, "DiffControlNetLoader": {"input": {"required": {"model": ["MODEL"], "control_net_name": [["control_v11p_sd15_scribble_fp16.safetensors", "ttplanetSDXLControlnet_v20Fp16.safetensors"]]}}, "input_order": {"required": ["model", "control_net_name"]}, "output": ["CONTROL_NET"], "output_is_list": [false], "output_name": ["CONTROL_NET"], "name": "DiffControlNetLoader", "display_name": "Load ControlNet Model (diff)", "description": "", "python_module": "nodes", "category": "loaders", "output_node": false}, "StyleModelLoader": {"input": {"required": {"style_model_name": [[]]}}, "input_order": {"required": ["style_model_name"]}, "output": ["STYLE_MODEL"], "output_is_list": [false], "output_name": ["STYLE_MODEL"], "name": "StyleModelLoader", "display_name": "Load Style Model", "description": "", "python_module": "nodes", "category": "loaders", "output_node": false}, "CLIPVisionLoader": {"input": {"required": {"clip_name": [["clip_vision_h.safetensors"]]}}, "input_order": {"required": ["clip_name"]}, "output": ["CLIP_VISION"], "output_is_list": [false], "output_name": ["CLIP_VISION"], "name": "CLIPVisionLoader", "display_name": "Load CLIP Vision", "description": "", "python_module": "nodes", "category": "loaders", "output_node": false}, "VAEDecodeTiled": {"input": {"required": {"samples": ["LATENT"], "vae": ["VAE"], "tile_size": ["INT", {"default": 512, "min": 64, "max": 4096, "step": 32}], "overlap": ["INT", {"default": 64, "min": 0, "max": 4096, "step": 32}], "temporal_size": ["INT", {"default": 64, "min": 8, "max": 4096, "step": 4, "tooltip": "Only used for video VAEs: Amount of frames to decode at a time."}], "temporal_overlap": ["INT", {"default": 8, "min": 4, "max": 4096, "step": 4, "tooltip": "Only used for video VAEs: Amount of frames to overlap."}]}}, "input_order": {"required": ["samples", "vae", "tile_size", "overlap", "temporal_size", "temporal_overlap"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "VAEDecodeTiled", "display_name": "VAE Decode (Tiled)", "description": "", "python_module": "nodes", "category": "_for_testing", "output_node": false}, "VAEEncodeTiled": {"input": {"required": {"pixels": ["IMAGE"], "vae": ["VAE"], "tile_size": ["INT", {"default": 512, "min": 64, "max": 4096, "step": 64}], "overlap": ["INT", {"default": 64, "min": 0, "max": 4096, "step": 32}], "temporal_size": ["INT", {"default": 64, "min": 8, "max": 4096, "step": 4, "tooltip": "Only used for video VAEs: Amount of frames to encode at a time."}], "temporal_overlap": ["INT", {"default": 8, "min": 4, "max": 4096, "step": 4, "tooltip": "Only used for video VAEs: Amount of frames to overlap."}]}}, "input_order": {"required": ["pixels", "vae", "tile_size", "overlap", "temporal_size", "temporal_overlap"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "VAEEncodeTiled", "display_name": "VAE Encode (Tiled)", "description": "", "python_module": "nodes", "category": "_for_testing", "output_node": false}, "unCLIPCheckpointLoader": {"input": {"required": {"ckpt_name": [["3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"]]}}, "input_order": {"required": ["ckpt_name"]}, "output": ["MODEL", "CLIP", "VAE", "CLIP_VISION"], "output_is_list": [false, false, false, false], "output_name": ["MODEL", "CLIP", "VAE", "CLIP_VISION"], "name": "unCLIPCheckpointLoader", "display_name": "unCLIPCheckpointLoader", "description": "", "python_module": "nodes", "category": "loaders", "output_node": false}, "GLIGENLoader": {"input": {"required": {"gligen_name": [[]]}}, "input_order": {"required": ["gligen_name"]}, "output": ["GLIGEN"], "output_is_list": [false], "output_name": ["GLIGEN"], "name": "GLIGENLoader", "display_name": "GLIGENLoader", "description": "", "python_module": "nodes", "category": "loaders", "output_node": false}, "GLIGENTextBoxApply": {"input": {"required": {"conditioning_to": ["CONDITIONING"], "clip": ["CLIP"], "gligen_textbox_model": ["GLIGEN"], "text": ["STRING", {"multiline": true, "dynamicPrompts": true}], "width": ["INT", {"default": 64, "min": 8, "max": 16384, "step": 8}], "height": ["INT", {"default": 64, "min": 8, "max": 16384, "step": 8}], "x": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 8}], "y": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 8}]}}, "input_order": {"required": ["conditioning_to", "clip", "gligen_textbox_model", "text", "width", "height", "x", "y"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "GLIGENTextBoxApply", "display_name": "GLIGENTextBoxApply", "description": "", "python_module": "nodes", "category": "conditioning/gligen", "output_node": false}, "InpaintModelConditioning": {"input": {"required": {"positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "vae": ["VAE"], "pixels": ["IMAGE"], "mask": ["MASK"], "noise_mask": ["BOOLEAN", {"default": true, "tooltip": "Add a noise mask to the latent so sampling will only happen within the mask. Might improve results or completely break things depending on the model."}]}}, "input_order": {"required": ["positive", "negative", "vae", "pixels", "mask", "noise_mask"]}, "output": ["CONDITIONING", "CONDITIONING", "LATENT"], "output_is_list": [false, false, false], "output_name": ["positive", "negative", "latent"], "name": "InpaintModelConditioning", "display_name": "InpaintModelConditioning", "description": "", "python_module": "nodes", "category": "conditioning/inpaint", "output_node": false}, "CheckpointLoader": {"input": {"required": {"config_name": [["anything_v3.yaml", "v1-inference.yaml", "v1-inference_clip_skip_2.yaml", "v1-inference_clip_skip_2_fp16.yaml", "v1-inference_fp16.yaml", "v1-inpainting-inference.yaml", "v2-inference-v.yaml", "v2-inference-v_fp32.yaml", "v2-inference.yaml", "v2-inference_fp32.yaml", "v2-inpainting-inference.yaml"]], "ckpt_name": [["3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"]]}}, "input_order": {"required": ["config_name", "ckpt_name"]}, "output": ["MODEL", "CLIP", "VAE"], "output_is_list": [false, false, false], "output_name": ["MODEL", "CLIP", "VAE"], "name": "CheckpointLoader", "display_name": "Load Checkpoint With Config (DEPRECATED)", "description": "", "python_module": "nodes", "category": "advanced/loaders", "output_node": false, "deprecated": true}, "DiffusersLoader": {"input": {"required": {"model_path": [[]]}}, "input_order": {"required": ["model_path"]}, "output": ["MODEL", "CLIP", "VAE"], "output_is_list": [false, false, false], "output_name": ["MODEL", "CLIP", "VAE"], "name": "DiffusersLoader", "display_name": "DiffusersLoader", "description": "", "python_module": "nodes", "category": "advanced/loaders/deprecated", "output_node": false}, "LoadLatent": {"input": {"required": {"latent": [[]]}}, "input_order": {"required": ["latent"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "LoadLatent", "display_name": "LoadLatent", "description": "", "python_module": "nodes", "category": "_for_testing", "output_node": false}, "SaveLatent": {"input": {"required": {"samples": ["LATENT"], "filename_prefix": ["STRING", {"default": "latents/ComfyUI"}]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["samples", "filename_prefix"], "hidden": ["prompt", "extra_pnginfo"]}, "output": [], "output_is_list": [], "output_name": [], "name": "SaveLatent", "display_name": "SaveLatent", "description": "", "python_module": "nodes", "category": "_for_testing", "output_node": true}, "ConditioningZeroOut": {"input": {"required": {"conditioning": ["CONDITIONING"]}}, "input_order": {"required": ["conditioning"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "ConditioningZeroOut", "display_name": "ConditioningZeroOut", "description": "", "python_module": "nodes", "category": "advanced/conditioning", "output_node": false}, "ConditioningSetTimestepRange": {"input": {"required": {"conditioning": ["CONDITIONING"], "start": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.001}], "end": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}]}}, "input_order": {"required": ["conditioning", "start", "end"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "ConditioningSetTimestepRange", "display_name": "ConditioningSetTimestepRange", "description": "", "python_module": "nodes", "category": "advanced/conditioning", "output_node": false}, "LoraLoaderModelOnly": {"input": {"required": {"model": ["MODEL"], "lora_name": [["Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "strength_model": ["FLOAT", {"default": 1.0, "min": -100.0, "max": 100.0, "step": 0.01}]}}, "input_order": {"required": ["model", "lora_name", "strength_model"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "LoraLoaderModelOnly", "display_name": "LoraLoaderModelOnly", "description": "LoRAs are used to modify diffusion and CLIP models, altering the way in which latents are denoised such as applying styles. Multiple LoRA nodes can be linked together.", "python_module": "nodes", "category": "loaders", "output_node": false, "output_tooltips": ["The modified diffusion model.", "The modified CLIP model."]}, "LatentAdd": {"input": {"required": {"samples1": ["LATENT"], "samples2": ["LATENT"]}}, "input_order": {"required": ["samples1", "samples2"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "LatentAdd", "display_name": "LatentAdd", "description": "", "python_module": "comfy_extras.nodes_latent", "category": "latent/advanced", "output_node": false}, "LatentSubtract": {"input": {"required": {"samples1": ["LATENT"], "samples2": ["LATENT"]}}, "input_order": {"required": ["samples1", "samples2"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "LatentSubtract", "display_name": "LatentSubtract", "description": "", "python_module": "comfy_extras.nodes_latent", "category": "latent/advanced", "output_node": false}, "LatentMultiply": {"input": {"required": {"samples": ["LATENT"], "multiplier": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}]}}, "input_order": {"required": ["samples", "multiplier"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "LatentMultiply", "display_name": "LatentMultiply", "description": "", "python_module": "comfy_extras.nodes_latent", "category": "latent/advanced", "output_node": false}, "LatentInterpolate": {"input": {"required": {"samples1": ["LATENT"], "samples2": ["LATENT"], "ratio": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["samples1", "samples2", "ratio"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "LatentInterpolate", "display_name": "LatentInterpolate", "description": "", "python_module": "comfy_extras.nodes_latent", "category": "latent/advanced", "output_node": false}, "LatentConcat": {"input": {"required": {"samples1": ["LATENT"], "samples2": ["LATENT"], "dim": [["x", "-x", "y", "-y", "t", "-t"]]}}, "input_order": {"required": ["samples1", "samples2", "dim"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "LatentConcat", "display_name": "LatentConcat", "description": "", "python_module": "comfy_extras.nodes_latent", "category": "latent/advanced", "output_node": false}, "LatentCut": {"input": {"required": {"samples": ["LATENT"], "dim": [["x", "y", "t"]], "index": ["INT", {"default": 0, "min": -16384, "max": 16384, "step": 1}], "amount": ["INT", {"default": 1, "min": 1, "max": 16384, "step": 1}]}}, "input_order": {"required": ["samples", "dim", "index", "amount"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "LatentCut", "display_name": "LatentCut", "description": "", "python_module": "comfy_extras.nodes_latent", "category": "latent/advanced", "output_node": false}, "LatentBatch": {"input": {"required": {"samples1": ["LATENT"], "samples2": ["LATENT"]}}, "input_order": {"required": ["samples1", "samples2"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "LatentBatch", "display_name": "LatentBatch", "description": "", "python_module": "comfy_extras.nodes_latent", "category": "latent/batch", "output_node": false}, "LatentBatchSeedBehavior": {"input": {"required": {"samples": ["LATENT"], "seed_behavior": [["random", "fixed"], {"default": "fixed"}]}}, "input_order": {"required": ["samples", "seed_behavior"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "LatentBatchSeedBehavior", "display_name": "LatentBatchSeedBehavior", "description": "", "python_module": "comfy_extras.nodes_latent", "category": "latent/advanced", "output_node": false}, "LatentApplyOperation": {"input": {"required": {"samples": ["LATENT"], "operation": ["LATENT_OPERATION"]}}, "input_order": {"required": ["samples", "operation"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "LatentApplyOperation", "display_name": "LatentApplyOperation", "description": "", "python_module": "comfy_extras.nodes_latent", "category": "latent/advanced/operations", "output_node": false, "experimental": true}, "LatentApplyOperationCFG": {"input": {"required": {"model": ["MODEL"], "operation": ["LATENT_OPERATION"]}}, "input_order": {"required": ["model", "operation"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "LatentApplyOperationCFG", "display_name": "LatentApplyOperationCFG", "description": "", "python_module": "comfy_extras.nodes_latent", "category": "latent/advanced/operations", "output_node": false, "experimental": true}, "LatentOperationTonemapReinhard": {"input": {"required": {"multiplier": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 100.0, "step": 0.01}]}}, "input_order": {"required": ["multiplier"]}, "output": ["LATENT_OPERATION"], "output_is_list": [false], "output_name": ["LATENT_OPERATION"], "name": "LatentOperationTonemapReinhard", "display_name": "LatentOperationTonemapReinhard", "description": "", "python_module": "comfy_extras.nodes_latent", "category": "latent/advanced/operations", "output_node": false, "experimental": true}, "LatentOperationSharpen": {"input": {"required": {"sharpen_radius": ["INT", {"default": 9, "min": 1, "max": 31, "step": 1}], "sigma": ["FLOAT", {"default": 1.0, "min": 0.1, "max": 10.0, "step": 0.1}], "alpha": ["FLOAT", {"default": 0.1, "min": 0.0, "max": 5.0, "step": 0.01}]}}, "input_order": {"required": ["sharpen_radius", "sigma", "alpha"]}, "output": ["LATENT_OPERATION"], "output_is_list": [false], "output_name": ["LATENT_OPERATION"], "name": "LatentOperationSharpen", "display_name": "LatentOperationSharpen", "description": "", "python_module": "comfy_extras.nodes_latent", "category": "latent/advanced/operations", "output_node": false, "experimental": true}, "HypernetworkLoader": {"input": {"required": {"model": ["MODEL"], "hypernetwork_name": [[]], "strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}]}}, "input_order": {"required": ["model", "hypernetwork_name", "strength"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "HypernetworkLoader", "display_name": "HypernetworkLoader", "description": "", "python_module": "comfy_extras.nodes_hypernetwork", "category": "loaders", "output_node": false}, "UpscaleModelLoader": {"input": {"required": {"model_name": [["4x-UltraSharpV2.safetensors", "4x_NMKD-Superscale-SP_178000_G.pth", "4x_NickelbackFS_72000_G.pth", "4x_UniversalUpscalerV2-Sharp_101000_G.pth", "4x_foolhardy_Remacri.pth", "RealESRGAN_x2.pth", "RealESRGAN_x4.pth", "RealESRGAN_x4plus.pth", "RealESRGAN_x4plus_anime_6B.pth"]]}}, "input_order": {"required": ["model_name"]}, "output": ["UPSCALE_MODEL"], "output_is_list": [false], "output_name": ["UPSCALE_MODEL"], "name": "UpscaleModelLoader", "display_name": "Load Upscale Model", "description": "", "python_module": "comfy_extras.nodes_upscale_model", "category": "loaders", "output_node": false}, "ImageUpscaleWithModel": {"input": {"required": {"upscale_model": ["UPSCALE_MODEL"], "image": ["IMAGE"]}}, "input_order": {"required": ["upscale_model", "image"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "ImageUpscaleWithModel", "display_name": "Upscale Image (using Model)", "description": "", "python_module": "comfy_extras.nodes_upscale_model", "category": "image/upscaling", "output_node": false}, "ImageBlend": {"input": {"required": {"image1": ["IMAGE"], "image2": ["IMAGE"], "blend_factor": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 1.0, "step": 0.01}], "blend_mode": [["normal", "multiply", "screen", "overlay", "soft_light", "difference"]]}}, "input_order": {"required": ["image1", "image2", "blend_factor", "blend_mode"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "ImageBlend", "display_name": "Image Blend", "description": "", "python_module": "comfy_extras.nodes_post_processing", "category": "image/postprocessing", "output_node": false}, "ImageBlur": {"input": {"required": {"image": ["IMAGE"], "blur_radius": ["INT", {"default": 1, "min": 1, "max": 31, "step": 1}], "sigma": ["FLOAT", {"default": 1.0, "min": 0.1, "max": 10.0, "step": 0.1}]}}, "input_order": {"required": ["image", "blur_radius", "sigma"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "ImageBlur", "display_name": "Image Blur", "description": "", "python_module": "comfy_extras.nodes_post_processing", "category": "image/postprocessing", "output_node": false}, "ImageQuantize": {"input": {"required": {"image": ["IMAGE"], "colors": ["INT", {"default": 256, "min": 1, "max": 256, "step": 1}], "dither": [["none", "floyd-steinberg", "bayer-2", "bayer-4", "bayer-8", "bayer-16"]]}}, "input_order": {"required": ["image", "colors", "dither"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "ImageQuantize", "display_name": "Image Quantize", "description": "", "python_module": "comfy_extras.nodes_post_processing", "category": "image/postprocessing", "output_node": false}, "ImageSharpen": {"input": {"required": {"image": ["IMAGE"], "sharpen_radius": ["INT", {"default": 1, "min": 1, "max": 31, "step": 1}], "sigma": ["FLOAT", {"default": 1.0, "min": 0.1, "max": 10.0, "step": 0.01}], "alpha": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 5.0, "step": 0.01}]}}, "input_order": {"required": ["image", "sharpen_radius", "sigma", "alpha"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "ImageSharpen", "display_name": "Image Sharpen", "description": "", "python_module": "comfy_extras.nodes_post_processing", "category": "image/postprocessing", "output_node": false}, "ImageScaleToTotalPixels": {"input": {"required": {"image": ["IMAGE"], "upscale_method": [["nearest-exact", "bilinear", "area", "bicubic", "lanczos"]], "megapixels": ["FLOAT", {"default": 1.0, "min": 0.01, "max": 16.0, "step": 0.01}]}}, "input_order": {"required": ["image", "upscale_method", "megapixels"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "ImageScaleToTotalPixels", "display_name": "Scale Image to Total Pixels", "description": "", "python_module": "comfy_extras.nodes_post_processing", "category": "image/upscaling", "output_node": false}, "LatentCompositeMasked": {"input": {"required": {"destination": ["LATENT"], "source": ["LATENT"], "x": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 8}], "y": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 8}], "resize_source": ["BOOLEAN", {"default": false}]}, "optional": {"mask": ["MASK"]}}, "input_order": {"required": ["destination", "source", "x", "y", "resize_source"], "optional": ["mask"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "LatentCompositeMasked", "display_name": "LatentCompositeMasked", "description": "", "python_module": "comfy_extras.nodes_mask", "category": "latent", "output_node": false}, "ImageCompositeMasked": {"input": {"required": {"destination": ["IMAGE"], "source": ["IMAGE"], "x": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 1}], "y": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 1}], "resize_source": ["BOOLEAN", {"default": false}]}, "optional": {"mask": ["MASK"]}}, "input_order": {"required": ["destination", "source", "x", "y", "resize_source"], "optional": ["mask"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "ImageCompositeMasked", "display_name": "ImageCompositeMasked", "description": "", "python_module": "comfy_extras.nodes_mask", "category": "image", "output_node": false}, "MaskToImage": {"input": {"required": {"mask": ["MASK"]}}, "input_order": {"required": ["mask"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "MaskToImage", "display_name": "Convert Mask to Image", "description": "", "python_module": "comfy_extras.nodes_mask", "category": "mask", "output_node": false}, "ImageToMask": {"input": {"required": {"image": ["IMAGE"], "channel": [["red", "green", "blue", "alpha"]]}}, "input_order": {"required": ["image", "channel"]}, "output": ["MASK"], "output_is_list": [false], "output_name": ["MASK"], "name": "ImageToMask", "display_name": "Convert Image to Mask", "description": "", "python_module": "comfy_extras.nodes_mask", "category": "mask", "output_node": false}, "ImageColorToMask": {"input": {"required": {"image": ["IMAGE"], "color": ["INT", {"default": 0, "min": 0, "max": 16777215, "step": 1, "display": "color"}]}}, "input_order": {"required": ["image", "color"]}, "output": ["MASK"], "output_is_list": [false], "output_name": ["MASK"], "name": "ImageColorToMask", "display_name": "ImageColorToMask", "description": "", "python_module": "comfy_extras.nodes_mask", "category": "mask", "output_node": false}, "SolidMask": {"input": {"required": {"value": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "width": ["INT", {"default": 512, "min": 1, "max": 16384, "step": 1}], "height": ["INT", {"default": 512, "min": 1, "max": 16384, "step": 1}]}}, "input_order": {"required": ["value", "width", "height"]}, "output": ["MASK"], "output_is_list": [false], "output_name": ["MASK"], "name": "SolidMask", "display_name": "SolidMask", "description": "", "python_module": "comfy_extras.nodes_mask", "category": "mask", "output_node": false}, "InvertMask": {"input": {"required": {"mask": ["MASK"]}}, "input_order": {"required": ["mask"]}, "output": ["MASK"], "output_is_list": [false], "output_name": ["MASK"], "name": "InvertMask", "display_name": "InvertMask", "description": "", "python_module": "comfy_extras.nodes_mask", "category": "mask", "output_node": false}, "CropMask": {"input": {"required": {"mask": ["MASK"], "x": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 1}], "y": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 1}], "width": ["INT", {"default": 512, "min": 1, "max": 16384, "step": 1}], "height": ["INT", {"default": 512, "min": 1, "max": 16384, "step": 1}]}}, "input_order": {"required": ["mask", "x", "y", "width", "height"]}, "output": ["MASK"], "output_is_list": [false], "output_name": ["MASK"], "name": "CropMask", "display_name": "CropMask", "description": "", "python_module": "comfy_extras.nodes_mask", "category": "mask", "output_node": false}, "MaskComposite": {"input": {"required": {"destination": ["MASK"], "source": ["MASK"], "x": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 1}], "y": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 1}], "operation": [["multiply", "add", "subtract", "and", "or", "xor"]]}}, "input_order": {"required": ["destination", "source", "x", "y", "operation"]}, "output": ["MASK"], "output_is_list": [false], "output_name": ["MASK"], "name": "MaskComposite", "display_name": "MaskComposite", "description": "", "python_module": "comfy_extras.nodes_mask", "category": "mask", "output_node": false}, "FeatherMask": {"input": {"required": {"mask": ["MASK"], "left": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 1}], "top": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 1}], "right": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 1}], "bottom": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 1}]}}, "input_order": {"required": ["mask", "left", "top", "right", "bottom"]}, "output": ["MASK"], "output_is_list": [false], "output_name": ["MASK"], "name": "FeatherMask", "display_name": "FeatherMask", "description": "", "python_module": "comfy_extras.nodes_mask", "category": "mask", "output_node": false}, "GrowMask": {"input": {"required": {"mask": ["MASK"], "expand": ["INT", {"default": 0, "min": -16384, "max": 16384, "step": 1}], "tapered_corners": ["BOOLEAN", {"default": true}]}}, "input_order": {"required": ["mask", "expand", "tapered_corners"]}, "output": ["MASK"], "output_is_list": [false], "output_name": ["MASK"], "name": "GrowMask", "display_name": "GrowMask", "description": "", "python_module": "comfy_extras.nodes_mask", "category": "mask", "output_node": false}, "ThresholdMask": {"input": {"required": {"mask": ["MASK"], "value": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["mask", "value"]}, "output": ["MASK"], "output_is_list": [false], "output_name": ["MASK"], "name": "ThresholdMask", "display_name": "ThresholdMask", "description": "", "python_module": "comfy_extras.nodes_mask", "category": "mask", "output_node": false}, "MaskPreview": {"input": {"required": {"mask": ["MASK"]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["mask"], "hidden": ["prompt", "extra_pnginfo"]}, "output": [], "output_is_list": [], "output_name": [], "name": "MaskPreview", "display_name": "MaskPreview", "description": "Saves the input images to your ComfyUI output directory.", "python_module": "comfy_extras.nodes_mask", "category": "mask", "output_node": true}, "PorterDuffImageComposite": {"input": {"required": {"source": ["IMAGE"], "source_alpha": ["MASK"], "destination": ["IMAGE"], "destination_alpha": ["MASK"], "mode": [["ADD", "CLEAR", "DARKEN", "DST", "DST_ATOP", "DST_IN", "DST_OUT", "DST_OVER", "LIGHTEN", "MULTIPLY", "OVERLAY", "SCREEN", "SRC", "SRC_ATOP", "SRC_IN", "SRC_OUT", "SRC_OVER", "XOR"], {"default": "DST"}]}}, "input_order": {"required": ["source", "source_alpha", "destination", "destination_alpha", "mode"]}, "output": ["IMAGE", "MASK"], "output_is_list": [false, false], "output_name": ["IMAGE", "MASK"], "name": "PorterDuffImageComposite", "display_name": "Porter-Duff Image Composite", "description": "", "python_module": "comfy_extras.nodes_compositing", "category": "mask/compositing", "output_node": false}, "SplitImageWithAlpha": {"input": {"required": {"image": ["IMAGE"]}}, "input_order": {"required": ["image"]}, "output": ["IMAGE", "MASK"], "output_is_list": [false, false], "output_name": ["IMAGE", "MASK"], "name": "SplitImageWithAlpha", "display_name": "Split Image with Alpha", "description": "", "python_module": "comfy_extras.nodes_compositing", "category": "mask/compositing", "output_node": false}, "JoinImageWithAlpha": {"input": {"required": {"image": ["IMAGE"], "alpha": ["MASK"]}}, "input_order": {"required": ["image", "alpha"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "JoinImageWithAlpha", "display_name": "Join Image with Alpha", "description": "", "python_module": "comfy_extras.nodes_compositing", "category": "mask/compositing", "output_node": false}, "RebatchLatents": {"input": {"required": {"latents": ["LATENT"], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096}]}}, "input_order": {"required": ["latents", "batch_size"]}, "output": ["LATENT"], "output_is_list": [true], "output_name": ["LATENT"], "name": "RebatchLatents", "display_name": "Rebatch Latents", "description": "", "python_module": "comfy_extras.nodes_rebatch", "category": "latent/batch", "output_node": false}, "RebatchImages": {"input": {"required": {"images": ["IMAGE"], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096}]}}, "input_order": {"required": ["images", "batch_size"]}, "output": ["IMAGE"], "output_is_list": [true], "output_name": ["IMAGE"], "name": "RebatchImages", "display_name": "Rebatch Images", "description": "", "python_module": "comfy_extras.nodes_rebatch", "category": "image/batch", "output_node": false}, "ModelMergeSimple": {"input": {"required": {"model1": ["MODEL"], "model2": ["MODEL"], "ratio": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["model1", "model2", "ratio"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "ModelMergeSimple", "display_name": "ModelMergeSimple", "description": "", "python_module": "comfy_extras.nodes_model_merging", "category": "advanced/model_merging", "output_node": false}, "ModelMergeBlocks": {"input": {"required": {"model1": ["MODEL"], "model2": ["MODEL"], "input": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "middle": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "out": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["model1", "model2", "input", "middle", "out"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "ModelMergeBlocks", "display_name": "ModelMergeBlocks", "description": "", "python_module": "comfy_extras.nodes_model_merging", "category": "advanced/model_merging", "output_node": false}, "ModelMergeSubtract": {"input": {"required": {"model1": ["MODEL"], "model2": ["MODEL"], "multiplier": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}]}}, "input_order": {"required": ["model1", "model2", "multiplier"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "ModelMergeSubtract", "display_name": "ModelMergeSubtract", "description": "", "python_module": "comfy_extras.nodes_model_merging", "category": "advanced/model_merging", "output_node": false}, "ModelMergeAdd": {"input": {"required": {"model1": ["MODEL"], "model2": ["MODEL"]}}, "input_order": {"required": ["model1", "model2"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "ModelMergeAdd", "display_name": "ModelMergeAdd", "description": "", "python_module": "comfy_extras.nodes_model_merging", "category": "advanced/model_merging", "output_node": false}, "CheckpointSave": {"input": {"required": {"model": ["MODEL"], "clip": ["CLIP"], "vae": ["VAE"], "filename_prefix": ["STRING", {"default": "checkpoints/ComfyUI"}]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["model", "clip", "vae", "filename_prefix"], "hidden": ["prompt", "extra_pnginfo"]}, "output": [], "output_is_list": [], "output_name": [], "name": "CheckpointSave", "display_name": "Save Checkpoint", "description": "", "python_module": "comfy_extras.nodes_model_merging", "category": "advanced/model_merging", "output_node": true}, "CLIPMergeSimple": {"input": {"required": {"clip1": ["CLIP"], "clip2": ["CLIP"], "ratio": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["clip1", "clip2", "ratio"]}, "output": ["CLIP"], "output_is_list": [false], "output_name": ["CLIP"], "name": "CLIPMergeSimple", "display_name": "CLIPMergeSimple", "description": "", "python_module": "comfy_extras.nodes_model_merging", "category": "advanced/model_merging", "output_node": false}, "CLIPMergeSubtract": {"input": {"required": {"clip1": ["CLIP"], "clip2": ["CLIP"], "multiplier": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}]}}, "input_order": {"required": ["clip1", "clip2", "multiplier"]}, "output": ["CLIP"], "output_is_list": [false], "output_name": ["CLIP"], "name": "CLIPMergeSubtract", "display_name": "CLIPMergeSubtract", "description": "", "python_module": "comfy_extras.nodes_model_merging", "category": "advanced/model_merging", "output_node": false}, "CLIPMergeAdd": {"input": {"required": {"clip1": ["CLIP"], "clip2": ["CLIP"]}}, "input_order": {"required": ["clip1", "clip2"]}, "output": ["CLIP"], "output_is_list": [false], "output_name": ["CLIP"], "name": "CLIPMergeAdd", "display_name": "CLIPMergeAdd", "description": "", "python_module": "comfy_extras.nodes_model_merging", "category": "advanced/model_merging", "output_node": false}, "CLIPSave": {"input": {"required": {"clip": ["CLIP"], "filename_prefix": ["STRING", {"default": "clip/ComfyUI"}]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["clip", "filename_prefix"], "hidden": ["prompt", "extra_pnginfo"]}, "output": [], "output_is_list": [], "output_name": [], "name": "CLIPSave", "display_name": "CLIPSave", "description": "", "python_module": "comfy_extras.nodes_model_merging", "category": "advanced/model_merging", "output_node": true}, "VAESave": {"input": {"required": {"vae": ["VAE"], "filename_prefix": ["STRING", {"default": "vae/ComfyUI_vae"}]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["vae", "filename_prefix"], "hidden": ["prompt", "extra_pnginfo"]}, "output": [], "output_is_list": [], "output_name": [], "name": "VAESave", "display_name": "VAESave", "description": "", "python_module": "comfy_extras.nodes_model_merging", "category": "advanced/model_merging", "output_node": true}, "ModelSave": {"input": {"required": {"model": ["MODEL"], "filename_prefix": ["STRING", {"default": "diffusion_models/ComfyUI"}]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["model", "filename_prefix"], "hidden": ["prompt", "extra_pnginfo"]}, "output": [], "output_is_list": [], "output_name": [], "name": "ModelSave", "display_name": "ModelSave", "description": "", "python_module": "comfy_extras.nodes_model_merging", "category": "advanced/model_merging", "output_node": true}, "TomePatchModel": {"input": {"required": {"model": ["MODEL"], "ratio": ["FLOAT", {"default": 0.3, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["model", "ratio"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "TomePatchModel", "display_name": "TomePatchModel", "description": "", "python_module": "comfy_extras.nodes_tomesd", "category": "model_patches/unet", "output_node": false}, "CLIPTextEncodeSDXLRefiner": {"input": {"required": {"ascore": ["FLOAT", {"default": 6.0, "min": 0.0, "max": 1000.0, "step": 0.01}], "width": ["INT", {"default": 1024.0, "min": 0, "max": 16384}], "height": ["INT", {"default": 1024.0, "min": 0, "max": 16384}], "text": ["STRING", {"multiline": true, "dynamicPrompts": true}], "clip": ["CLIP"]}}, "input_order": {"required": ["ascore", "width", "height", "text", "clip"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "CLIPTextEncodeSDXLRefiner", "display_name": "CLIPTextEncodeSDXLRefiner", "description": "", "python_module": "comfy_extras.nodes_clip_sdxl", "category": "advanced/conditioning", "output_node": false}, "CLIPTextEncodeSDXL": {"input": {"required": {"clip": ["CLIP"], "width": ["INT", {"default": 1024.0, "min": 0, "max": 16384}], "height": ["INT", {"default": 1024.0, "min": 0, "max": 16384}], "crop_w": ["INT", {"default": 0, "min": 0, "max": 16384}], "crop_h": ["INT", {"default": 0, "min": 0, "max": 16384}], "target_width": ["INT", {"default": 1024.0, "min": 0, "max": 16384}], "target_height": ["INT", {"default": 1024.0, "min": 0, "max": 16384}], "text_g": ["STRING", {"multiline": true, "dynamicPrompts": true}], "text_l": ["STRING", {"multiline": true, "dynamicPrompts": true}]}}, "input_order": {"required": ["clip", "width", "height", "crop_w", "crop_h", "target_width", "target_height", "text_g", "text_l"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "CLIPTextEncodeSDXL", "display_name": "CLIPTextEncodeSDXL", "description": "", "python_module": "comfy_extras.nodes_clip_sdxl", "category": "advanced/conditioning", "output_node": false}, "Canny": {"input": {"required": {"image": ["IMAGE"], "low_threshold": ["FLOAT", {"default": 0.4, "min": 0.01, "max": 0.99, "step": 0.01}], "high_threshold": ["FLOAT", {"default": 0.8, "min": 0.01, "max": 0.99, "step": 0.01}]}}, "input_order": {"required": ["image", "low_threshold", "high_threshold"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "Canny", "display_name": "Canny", "description": "", "python_module": "comfy_extras.nodes_canny", "category": "image/preprocessors", "output_node": false}, "FreeU": {"input": {"required": {"model": ["MODEL"], "b1": ["FLOAT", {"default": 1.1, "min": 0.0, "max": 10.0, "step": 0.01}], "b2": ["FLOAT", {"default": 1.2, "min": 0.0, "max": 10.0, "step": 0.01}], "s1": ["FLOAT", {"default": 0.9, "min": 0.0, "max": 10.0, "step": 0.01}], "s2": ["FLOAT", {"default": 0.2, "min": 0.0, "max": 10.0, "step": 0.01}]}}, "input_order": {"required": ["model", "b1", "b2", "s1", "s2"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "FreeU", "display_name": "FreeU", "description": "", "python_module": "comfy_extras.nodes_freelunch", "category": "model_patches/unet", "output_node": false}, "FreeU_V2": {"input": {"required": {"model": ["MODEL"], "b1": ["FLOAT", {"default": 1.3, "min": 0.0, "max": 10.0, "step": 0.01}], "b2": ["FLOAT", {"default": 1.4, "min": 0.0, "max": 10.0, "step": 0.01}], "s1": ["FLOAT", {"default": 0.9, "min": 0.0, "max": 10.0, "step": 0.01}], "s2": ["FLOAT", {"default": 0.2, "min": 0.0, "max": 10.0, "step": 0.01}]}}, "input_order": {"required": ["model", "b1", "b2", "s1", "s2"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "FreeU_V2", "display_name": "FreeU_V2", "description": "", "python_module": "comfy_extras.nodes_freelunch", "category": "model_patches/unet", "output_node": false}, "SamplerCustom": {"input": {"required": {"model": ["MODEL"], "add_noise": ["BOOLEAN", {"default": true}], "noise_seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "control_after_generate": true}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0, "step": 0.1, "round": 0.01}], "positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "sampler": ["SAMPLER"], "sigmas": ["SIGMAS"], "latent_image": ["LATENT"]}}, "input_order": {"required": ["model", "add_noise", "noise_seed", "cfg", "positive", "negative", "sampler", "sigmas", "latent_image"]}, "output": ["LATENT", "LATENT"], "output_is_list": [false, false], "output_name": ["output", "denoised_output"], "name": "SamplerCustom", "display_name": "SamplerCustom", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling", "output_node": false}, "BasicScheduler": {"input": {"required": {"model": ["MODEL"], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["model", "scheduler", "steps", "denoise"]}, "output": ["SIGMAS"], "output_is_list": [false], "output_name": ["SIGMAS"], "name": "BasicScheduler", "display_name": "BasicScheduler", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling/schedulers", "output_node": false}, "KarrasScheduler": {"input": {"required": {"steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "sigma_max": ["FLOAT", {"default": 14.614642, "min": 0.0, "max": 5000.0, "step": 0.01, "round": false}], "sigma_min": ["FLOAT", {"default": 0.0291675, "min": 0.0, "max": 5000.0, "step": 0.01, "round": false}], "rho": ["FLOAT", {"default": 7.0, "min": 0.0, "max": 100.0, "step": 0.01, "round": false}]}}, "input_order": {"required": ["steps", "sigma_max", "sigma_min", "rho"]}, "output": ["SIGMAS"], "output_is_list": [false], "output_name": ["SIGMAS"], "name": "KarrasScheduler", "display_name": "KarrasScheduler", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling/schedulers", "output_node": false}, "ExponentialScheduler": {"input": {"required": {"steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "sigma_max": ["FLOAT", {"default": 14.614642, "min": 0.0, "max": 5000.0, "step": 0.01, "round": false}], "sigma_min": ["FLOAT", {"default": 0.0291675, "min": 0.0, "max": 5000.0, "step": 0.01, "round": false}]}}, "input_order": {"required": ["steps", "sigma_max", "sigma_min"]}, "output": ["SIGMAS"], "output_is_list": [false], "output_name": ["SIGMAS"], "name": "ExponentialScheduler", "display_name": "ExponentialScheduler", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling/schedulers", "output_node": false}, "PolyexponentialScheduler": {"input": {"required": {"steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "sigma_max": ["FLOAT", {"default": 14.614642, "min": 0.0, "max": 5000.0, "step": 0.01, "round": false}], "sigma_min": ["FLOAT", {"default": 0.0291675, "min": 0.0, "max": 5000.0, "step": 0.01, "round": false}], "rho": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 100.0, "step": 0.01, "round": false}]}}, "input_order": {"required": ["steps", "sigma_max", "sigma_min", "rho"]}, "output": ["SIGMAS"], "output_is_list": [false], "output_name": ["SIGMAS"], "name": "PolyexponentialScheduler", "display_name": "PolyexponentialScheduler", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling/schedulers", "output_node": false}, "LaplaceScheduler": {"input": {"required": {"steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "sigma_max": ["FLOAT", {"default": 14.614642, "min": 0.0, "max": 5000.0, "step": 0.01, "round": false}], "sigma_min": ["FLOAT", {"default": 0.0291675, "min": 0.0, "max": 5000.0, "step": 0.01, "round": false}], "mu": ["FLOAT", {"default": 0.0, "min": -10.0, "max": 10.0, "step": 0.1, "round": false}], "beta": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 10.0, "step": 0.1, "round": false}]}}, "input_order": {"required": ["steps", "sigma_max", "sigma_min", "mu", "beta"]}, "output": ["SIGMAS"], "output_is_list": [false], "output_name": ["SIGMAS"], "name": "LaplaceScheduler", "display_name": "LaplaceScheduler", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling/schedulers", "output_node": false}, "VPScheduler": {"input": {"required": {"steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "beta_d": ["FLOAT", {"default": 19.9, "min": 0.0, "max": 5000.0, "step": 0.01, "round": false}], "beta_min": ["FLOAT", {"default": 0.1, "min": 0.0, "max": 5000.0, "step": 0.01, "round": false}], "eps_s": ["FLOAT", {"default": 0.001, "min": 0.0, "max": 1.0, "step": 0.0001, "round": false}]}}, "input_order": {"required": ["steps", "beta_d", "beta_min", "eps_s"]}, "output": ["SIGMAS"], "output_is_list": [false], "output_name": ["SIGMAS"], "name": "VPScheduler", "display_name": "VPScheduler", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling/schedulers", "output_node": false}, "BetaSamplingScheduler": {"input": {"required": {"model": ["MODEL"], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "alpha": ["FLOAT", {"default": 0.6, "min": 0.0, "max": 50.0, "step": 0.01, "round": false}], "beta": ["FLOAT", {"default": 0.6, "min": 0.0, "max": 50.0, "step": 0.01, "round": false}]}}, "input_order": {"required": ["model", "steps", "alpha", "beta"]}, "output": ["SIGMAS"], "output_is_list": [false], "output_name": ["SIGMAS"], "name": "BetaSamplingScheduler", "display_name": "BetaSamplingScheduler", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling/schedulers", "output_node": false}, "SDTurboScheduler": {"input": {"required": {"model": ["MODEL"], "steps": ["INT", {"default": 1, "min": 1, "max": 10}], "denoise": ["FLOAT", {"default": 1.0, "min": 0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["model", "steps", "denoise"]}, "output": ["SIGMAS"], "output_is_list": [false], "output_name": ["SIGMAS"], "name": "SDTurboScheduler", "display_name": "SDTurboScheduler", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling/schedulers", "output_node": false}, "KSamplerSelect": {"input": {"required": {"sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]]}}, "input_order": {"required": ["sampler_name"]}, "output": ["SAMPLER"], "output_is_list": [false], "output_name": ["SAMPLER"], "name": "KSamplerSelect", "display_name": "KSamplerSelect", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling/samplers", "output_node": false}, "SamplerEulerAncestral": {"input": {"required": {"eta": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 100.0, "step": 0.01, "round": false}], "s_noise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 100.0, "step": 0.01, "round": false}]}}, "input_order": {"required": ["eta", "s_noise"]}, "output": ["SAMPLER"], "output_is_list": [false], "output_name": ["SAMPLER"], "name": "SamplerEulerAncestral", "display_name": "SamplerEulerAncestral", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling/samplers", "output_node": false}, "SamplerEulerAncestralCFGPP": {"input": {"required": {"eta": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01, "round": false}], "s_noise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01, "round": false}]}}, "input_order": {"required": ["eta", "s_noise"]}, "output": ["SAMPLER"], "output_is_list": [false], "output_name": ["SAMPLER"], "name": "SamplerEulerAncestralCFGPP", "display_name": "SamplerEulerAncestralCFG++", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling/samplers", "output_node": false}, "SamplerLMS": {"input": {"required": {"order": ["INT", {"default": 4, "min": 1, "max": 100}]}}, "input_order": {"required": ["order"]}, "output": ["SAMPLER"], "output_is_list": [false], "output_name": ["SAMPLER"], "name": "SamplerLMS", "display_name": "SamplerLMS", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling/samplers", "output_node": false}, "SamplerDPMPP_3M_SDE": {"input": {"required": {"eta": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 100.0, "step": 0.01, "round": false}], "s_noise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 100.0, "step": 0.01, "round": false}], "noise_device": [["gpu", "cpu"]]}}, "input_order": {"required": ["eta", "s_noise", "noise_device"]}, "output": ["SAMPLER"], "output_is_list": [false], "output_name": ["SAMPLER"], "name": "SamplerDPMPP_3M_SDE", "display_name": "SamplerDPMPP_3M_SDE", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling/samplers", "output_node": false}, "SamplerDPMPP_2M_SDE": {"input": {"required": {"solver_type": [["midpoint", "heun"]], "eta": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 100.0, "step": 0.01, "round": false}], "s_noise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 100.0, "step": 0.01, "round": false}], "noise_device": [["gpu", "cpu"]]}}, "input_order": {"required": ["solver_type", "eta", "s_noise", "noise_device"]}, "output": ["SAMPLER"], "output_is_list": [false], "output_name": ["SAMPLER"], "name": "SamplerDPMPP_2M_SDE", "display_name": "SamplerDPMPP_2M_SDE", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling/samplers", "output_node": false}, "SamplerDPMPP_SDE": {"input": {"required": {"eta": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 100.0, "step": 0.01, "round": false}], "s_noise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 100.0, "step": 0.01, "round": false}], "r": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 100.0, "step": 0.01, "round": false}], "noise_device": [["gpu", "cpu"]]}}, "input_order": {"required": ["eta", "s_noise", "r", "noise_device"]}, "output": ["SAMPLER"], "output_is_list": [false], "output_name": ["SAMPLER"], "name": "SamplerDPMPP_SDE", "display_name": "SamplerDPMPP_SDE", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling/samplers", "output_node": false}, "SamplerDPMPP_2S_Ancestral": {"input": {"required": {"eta": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 100.0, "step": 0.01, "round": false}], "s_noise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 100.0, "step": 0.01, "round": false}]}}, "input_order": {"required": ["eta", "s_noise"]}, "output": ["SAMPLER"], "output_is_list": [false], "output_name": ["SAMPLER"], "name": "SamplerDPMPP_2S_Ancestral", "display_name": "SamplerDPMPP_2S_Ancestral", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling/samplers", "output_node": false}, "SamplerDPMAdaptative": {"input": {"required": {"order": ["INT", {"default": 3, "min": 2, "max": 3}], "rtol": ["FLOAT", {"default": 0.05, "min": 0.0, "max": 100.0, "step": 0.01, "round": false}], "atol": ["FLOAT", {"default": 0.0078, "min": 0.0, "max": 100.0, "step": 0.01, "round": false}], "h_init": ["FLOAT", {"default": 0.05, "min": 0.0, "max": 100.0, "step": 0.01, "round": false}], "pcoeff": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 100.0, "step": 0.01, "round": false}], "icoeff": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 100.0, "step": 0.01, "round": false}], "dcoeff": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 100.0, "step": 0.01, "round": false}], "accept_safety": ["FLOAT", {"default": 0.81, "min": 0.0, "max": 100.0, "step": 0.01, "round": false}], "eta": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 100.0, "step": 0.01, "round": false}], "s_noise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 100.0, "step": 0.01, "round": false}]}}, "input_order": {"required": ["order", "rtol", "atol", "h_init", "pcoeff", "icoeff", "dcoeff", "accept_safety", "eta", "s_noise"]}, "output": ["SAMPLER"], "output_is_list": [false], "output_name": ["SAMPLER"], "name": "SamplerDPMAdaptative", "display_name": "SamplerDPMAdaptative", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling/samplers", "output_node": false}, "SamplerER_SDE": {"input": {"required": {"solver_type": ["COMBO", {"options": ["ER-SDE", "Reverse-time SDE", "ODE"]}], "max_stage": ["INT", {"default": 3, "min": 1, "max": 3}], "eta": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 100.0, "step": 0.01, "round": false, "tooltip": "Stochastic strength of reverse-time SDE.\nWhen eta=0, it reduces to deterministic ODE. This setting doesn't apply to ER-SDE solver type."}], "s_noise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 100.0, "step": 0.01, "round": false}]}}, "input_order": {"required": ["solver_type", "max_stage", "eta", "s_noise"]}, "output": ["SAMPLER"], "output_is_list": [false], "output_name": ["SAMPLER"], "name": "SamplerER_SDE", "display_name": "SamplerER_SDE", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling/samplers", "output_node": false}, "SamplerSASolver": {"input": {"required": {"model": ["MODEL", {}], "eta": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01, "round": false}], "sde_start_percent": ["FLOAT", {"default": 0.2, "min": 0.0, "max": 1.0, "step": 0.001}], "sde_end_percent": ["FLOAT", {"default": 0.8, "min": 0.0, "max": 1.0, "step": 0.001}], "s_noise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 100.0, "step": 0.01, "round": false}], "predictor_order": ["INT", {"default": 3, "min": 1, "max": 6}], "corrector_order": ["INT", {"default": 4, "min": 0, "max": 6}], "use_pece": ["BOOLEAN", {}], "simple_order_2": ["BOOLEAN", {}]}}, "input_order": {"required": ["model", "eta", "sde_start_percent", "sde_end_percent", "s_noise", "predictor_order", "corrector_order", "use_pece", "simple_order_2"]}, "output": ["SAMPLER"], "output_is_list": [false], "output_name": ["SAMPLER"], "name": "SamplerSASolver", "display_name": "SamplerSASolver", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling/samplers", "output_node": false}, "SplitSigmas": {"input": {"required": {"sigmas": ["SIGMAS"], "step": ["INT", {"default": 0, "min": 0, "max": 10000}]}}, "input_order": {"required": ["sigmas", "step"]}, "output": ["SIGMAS", "SIGMAS"], "output_is_list": [false, false], "output_name": ["high_sigmas", "low_sigmas"], "name": "SplitSigmas", "display_name": "SplitSigmas", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling/sigmas", "output_node": false}, "SplitSigmasDenoise": {"input": {"required": {"sigmas": ["SIGMAS"], "denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["sigmas", "denoise"]}, "output": ["SIGMAS", "SIGMAS"], "output_is_list": [false, false], "output_name": ["high_sigmas", "low_sigmas"], "name": "SplitSigmasDenoise", "display_name": "SplitSigmasDenoise", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling/sigmas", "output_node": false}, "FlipSigmas": {"input": {"required": {"sigmas": ["SIGMAS"]}}, "input_order": {"required": ["sigmas"]}, "output": ["SIGMAS"], "output_is_list": [false], "output_name": ["SIGMAS"], "name": "FlipSigmas", "display_name": "FlipSigmas", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling/sigmas", "output_node": false}, "SetFirstSigma": {"input": {"required": {"sigmas": ["SIGMAS"], "sigma": ["FLOAT", {"default": 136.0, "min": 0.0, "max": 20000.0, "step": 0.001, "round": false}]}}, "input_order": {"required": ["sigmas", "sigma"]}, "output": ["SIGMAS"], "output_is_list": [false], "output_name": ["SIGMAS"], "name": "SetFirstSigma", "display_name": "SetFirstSigma", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling/sigmas", "output_node": false}, "ExtendIntermediateSigmas": {"input": {"required": {"sigmas": ["SIGMAS"], "steps": ["INT", {"default": 2, "min": 1, "max": 100}], "start_at_sigma": ["FLOAT", {"default": -1.0, "min": -1.0, "max": 20000.0, "step": 0.01, "round": false}], "end_at_sigma": ["FLOAT", {"default": 12.0, "min": 0.0, "max": 20000.0, "step": 0.01, "round": false}], "spacing": [["linear", "cosine", "sine"]]}}, "input_order": {"required": ["sigmas", "steps", "start_at_sigma", "end_at_sigma", "spacing"]}, "output": ["SIGMAS"], "output_is_list": [false], "output_name": ["SIGMAS"], "name": "ExtendIntermediateSigmas", "display_name": "ExtendIntermediateSigmas", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling/sigmas", "output_node": false}, "SamplingPercentToSigma": {"input": {"required": {"model": ["MODEL", {}], "sampling_percent": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.0001}], "return_actual_sigma": ["BOOLEAN", {"default": false, "tooltip": "Return the actual sigma value instead of the value used for interval checks.\nThis only affects results at 0.0 and 1.0."}]}}, "input_order": {"required": ["model", "sampling_percent", "return_actual_sigma"]}, "output": ["FLOAT"], "output_is_list": [false], "output_name": ["sigma_value"], "name": "SamplingPercentToSigma", "display_name": "SamplingPercentToSigma", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling/sigmas", "output_node": false}, "CFGGuider": {"input": {"required": {"model": ["MODEL"], "positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0, "step": 0.1, "round": 0.01}]}}, "input_order": {"required": ["model", "positive", "negative", "cfg"]}, "output": ["GUIDER"], "output_is_list": [false], "output_name": ["GUIDER"], "name": "CFGGuider", "display_name": "CFGGuider", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling/guiders", "output_node": false}, "DualCFGGuider": {"input": {"required": {"model": ["MODEL"], "cond1": ["CONDITIONING"], "cond2": ["CONDITIONING"], "negative": ["CONDITIONING"], "cfg_conds": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0, "step": 0.1, "round": 0.01}], "cfg_cond2_negative": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0, "step": 0.1, "round": 0.01}], "style": [["regular", "nested"]]}}, "input_order": {"required": ["model", "cond1", "cond2", "negative", "cfg_conds", "cfg_cond2_negative", "style"]}, "output": ["GUIDER"], "output_is_list": [false], "output_name": ["GUIDER"], "name": "DualCFGGuider", "display_name": "DualCFGGuider", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling/guiders", "output_node": false}, "BasicGuider": {"input": {"required": {"model": ["MODEL"], "conditioning": ["CONDITIONING"]}}, "input_order": {"required": ["model", "conditioning"]}, "output": ["GUIDER"], "output_is_list": [false], "output_name": ["GUIDER"], "name": "BasicGuider", "display_name": "BasicGuider", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling/guiders", "output_node": false}, "RandomNoise": {"input": {"required": {"noise_seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "control_after_generate": true}]}}, "input_order": {"required": ["noise_seed"]}, "output": ["NOISE"], "output_is_list": [false], "output_name": ["NOISE"], "name": "RandomNoise", "display_name": "RandomNoise", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling/noise", "output_node": false}, "DisableNoise": {"input": {"required": {}}, "input_order": {"required": []}, "output": ["NOISE"], "output_is_list": [false], "output_name": ["NOISE"], "name": "DisableNoise", "display_name": "DisableNoise", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling/noise", "output_node": false}, "AddNoise": {"input": {"required": {"model": ["MODEL"], "noise": ["NOISE"], "sigmas": ["SIGMAS"], "latent_image": ["LATENT"]}}, "input_order": {"required": ["model", "noise", "sigmas", "latent_image"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "AddNoise", "display_name": "AddNoise", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "_for_testing/custom_sampling/noise", "output_node": false}, "SamplerCustomAdvanced": {"input": {"required": {"noise": ["NOISE"], "guider": ["GUIDER"], "sampler": ["SAMPLER"], "sigmas": ["SIGMAS"], "latent_image": ["LATENT"]}}, "input_order": {"required": ["noise", "guider", "sampler", "sigmas", "latent_image"]}, "output": ["LATENT", "LATENT"], "output_is_list": [false, false], "output_name": ["output", "denoised_output"], "name": "SamplerCustomAdvanced", "display_name": "SamplerCustomAdvanced", "description": "", "python_module": "comfy_extras.nodes_custom_sampler", "category": "sampling/custom_sampling", "output_node": false}, "HyperTile": {"input": {"required": {"model": ["MODEL"], "tile_size": ["INT", {"default": 256, "min": 1, "max": 2048}], "swap_size": ["INT", {"default": 2, "min": 1, "max": 128}], "max_depth": ["INT", {"default": 0, "min": 0, "max": 10}], "scale_depth": ["BOOLEAN", {"default": false}]}}, "input_order": {"required": ["model", "tile_size", "swap_size", "max_depth", "scale_depth"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "HyperTile", "display_name": "HyperTile", "description": "", "python_module": "comfy_extras.nodes_hypertile", "category": "model_patches/unet", "output_node": false}, "ModelSamplingDiscrete": {"input": {"required": {"model": ["MODEL"], "sampling": [["eps", "v_prediction", "lcm", "x0", "img_to_img"]], "zsnr": ["BOOLEAN", {"default": false}]}}, "input_order": {"required": ["model", "sampling", "zsnr"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "ModelSamplingDiscrete", "display_name": "ModelSamplingDiscrete", "description": "", "python_module": "comfy_extras.nodes_model_advanced", "category": "advanced/model", "output_node": false}, "ModelSamplingContinuousEDM": {"input": {"required": {"model": ["MODEL"], "sampling": [["v_prediction", "edm", "edm_playground_v2.5", "eps", "cosmos_rflow"]], "sigma_max": ["FLOAT", {"default": 120.0, "min": 0.0, "max": 1000.0, "step": 0.001, "round": false}], "sigma_min": ["FLOAT", {"default": 0.002, "min": 0.0, "max": 1000.0, "step": 0.001, "round": false}]}}, "input_order": {"required": ["model", "sampling", "sigma_max", "sigma_min"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "ModelSamplingContinuousEDM", "display_name": "ModelSamplingContinuousEDM", "description": "", "python_module": "comfy_extras.nodes_model_advanced", "category": "advanced/model", "output_node": false}, "ModelSamplingContinuousV": {"input": {"required": {"model": ["MODEL"], "sampling": [["v_prediction"]], "sigma_max": ["FLOAT", {"default": 500.0, "min": 0.0, "max": 1000.0, "step": 0.001, "round": false}], "sigma_min": ["FLOAT", {"default": 0.03, "min": 0.0, "max": 1000.0, "step": 0.001, "round": false}]}}, "input_order": {"required": ["model", "sampling", "sigma_max", "sigma_min"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "ModelSamplingContinuousV", "display_name": "ModelSamplingContinuousV", "description": "", "python_module": "comfy_extras.nodes_model_advanced", "category": "advanced/model", "output_node": false}, "ModelSamplingStableCascade": {"input": {"required": {"model": ["MODEL"], "shift": ["FLOAT", {"default": 2.0, "min": 0.0, "max": 100.0, "step": 0.01}]}}, "input_order": {"required": ["model", "shift"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "ModelSamplingStableCascade", "display_name": "ModelSamplingStableCascade", "description": "", "python_module": "comfy_extras.nodes_model_advanced", "category": "advanced/model", "output_node": false}, "ModelSamplingSD3": {"input": {"required": {"model": ["MODEL"], "shift": ["FLOAT", {"default": 3.0, "min": 0.0, "max": 100.0, "step": 0.01}]}}, "input_order": {"required": ["model", "shift"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "ModelSamplingSD3", "display_name": "ModelSamplingSD3", "description": "", "python_module": "comfy_extras.nodes_model_advanced", "category": "advanced/model", "output_node": false}, "ModelSamplingAuraFlow": {"input": {"required": {"model": ["MODEL"], "shift": ["FLOAT", {"default": 1.73, "min": 0.0, "max": 100.0, "step": 0.01}]}}, "input_order": {"required": ["model", "shift"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "ModelSamplingAuraFlow", "display_name": "ModelSamplingAuraFlow", "description": "", "python_module": "comfy_extras.nodes_model_advanced", "category": "advanced/model", "output_node": false}, "ModelSamplingFlux": {"input": {"required": {"model": ["MODEL"], "max_shift": ["FLOAT", {"default": 1.15, "min": 0.0, "max": 100.0, "step": 0.01}], "base_shift": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 100.0, "step": 0.01}], "width": ["INT", {"default": 1024, "min": 16, "max": 16384, "step": 8}], "height": ["INT", {"default": 1024, "min": 16, "max": 16384, "step": 8}]}}, "input_order": {"required": ["model", "max_shift", "base_shift", "width", "height"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "ModelSamplingFlux", "display_name": "ModelSamplingFlux", "description": "", "python_module": "comfy_extras.nodes_model_advanced", "category": "advanced/model", "output_node": false}, "RescaleCFG": {"input": {"required": {"model": ["MODEL"], "multiplier": ["FLOAT", {"default": 0.7, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["model", "multiplier"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "RescaleCFG", "display_name": "RescaleCFG", "description": "", "python_module": "comfy_extras.nodes_model_advanced", "category": "advanced/model", "output_node": false}, "ModelComputeDtype": {"input": {"required": {"model": ["MODEL"], "dtype": [["default", "fp32", "fp16", "bf16"]]}}, "input_order": {"required": ["model", "dtype"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "ModelComputeDtype", "display_name": "ModelComputeDtype", "description": "", "python_module": "comfy_extras.nodes_model_advanced", "category": "advanced/debug/model", "output_node": false}, "PatchModelAddDownscale": {"input": {"required": {"model": ["MODEL"], "block_number": ["INT", {"default": 3, "min": 1, "max": 32, "step": 1}], "downscale_factor": ["FLOAT", {"default": 2.0, "min": 0.1, "max": 9.0, "step": 0.001}], "start_percent": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.001}], "end_percent": ["FLOAT", {"default": 0.35, "min": 0.0, "max": 1.0, "step": 0.001}], "downscale_after_skip": ["BOOLEAN", {"default": true}], "downscale_method": [["bicubic", "nearest-exact", "bilinear", "area", "bislerp"]], "upscale_method": [["bicubic", "nearest-exact", "bilinear", "area", "bislerp"]]}}, "input_order": {"required": ["model", "block_number", "downscale_factor", "start_percent", "end_percent", "downscale_after_skip", "downscale_method", "upscale_method"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "PatchModelAddDownscale", "display_name": "PatchModelAddDownscale (Kohya Deep Shrink)", "description": "", "python_module": "comfy_extras.nodes_model_downscale", "category": "model_patches/unet", "output_node": false}, "ImageCrop": {"input": {"required": {"image": ["IMAGE"], "width": ["INT", {"default": 512, "min": 1, "max": 16384, "step": 1}], "height": ["INT", {"default": 512, "min": 1, "max": 16384, "step": 1}], "x": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 1}], "y": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 1}]}}, "input_order": {"required": ["image", "width", "height", "x", "y"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "ImageCrop", "display_name": "Image Crop", "description": "", "python_module": "comfy_extras.nodes_images", "category": "image/transform", "output_node": false}, "RepeatImageBatch": {"input": {"required": {"image": ["IMAGE"], "amount": ["INT", {"default": 1, "min": 1, "max": 4096}]}}, "input_order": {"required": ["image", "amount"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "RepeatImageBatch", "display_name": "RepeatImageBatch", "description": "", "python_module": "comfy_extras.nodes_images", "category": "image/batch", "output_node": false}, "ImageFromBatch": {"input": {"required": {"image": ["IMAGE"], "batch_index": ["INT", {"default": 0, "min": 0, "max": 4095}], "length": ["INT", {"default": 1, "min": 1, "max": 4096}]}}, "input_order": {"required": ["image", "batch_index", "length"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "ImageFromBatch", "display_name": "ImageFromBatch", "description": "", "python_module": "comfy_extras.nodes_images", "category": "image/batch", "output_node": false}, "ImageAddNoise": {"input": {"required": {"image": ["IMAGE"], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "control_after_generate": true, "tooltip": "The random seed used for creating the noise."}], "strength": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["image", "seed", "strength"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "ImageAddNoise", "display_name": "ImageAddNoise", "description": "", "python_module": "comfy_extras.nodes_images", "category": "image", "output_node": false}, "SaveAnimatedWEBP": {"input": {"required": {"images": ["IMAGE"], "filename_prefix": ["STRING", {"default": "ComfyUI"}], "fps": ["FLOAT", {"default": 6.0, "min": 0.01, "max": 1000.0, "step": 0.01}], "lossless": ["BOOLEAN", {"default": true}], "quality": ["INT", {"default": 80, "min": 0, "max": 100}], "method": [["default", "fastest", "slowest"]]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["images", "filename_prefix", "fps", "lossless", "quality", "method"], "hidden": ["prompt", "extra_pnginfo"]}, "output": [], "output_is_list": [], "output_name": [], "name": "SaveAnimatedWEBP", "display_name": "SaveAnimatedWEBP", "description": "", "python_module": "comfy_extras.nodes_images", "category": "image/animation", "output_node": true}, "SaveAnimatedPNG": {"input": {"required": {"images": ["IMAGE"], "filename_prefix": ["STRING", {"default": "ComfyUI"}], "fps": ["FLOAT", {"default": 6.0, "min": 0.01, "max": 1000.0, "step": 0.01}], "compress_level": ["INT", {"default": 4, "min": 0, "max": 9}]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["images", "filename_prefix", "fps", "compress_level"], "hidden": ["prompt", "extra_pnginfo"]}, "output": [], "output_is_list": [], "output_name": [], "name": "SaveAnimatedPNG", "display_name": "SaveAnimatedPNG", "description": "", "python_module": "comfy_extras.nodes_images", "category": "image/animation", "output_node": true}, "SaveSVGNode": {"input": {"required": {"svg": ["SVG"], "filename_prefix": ["STRING", {"default": "svg/ComfyUI", "tooltip": "The prefix for the file to save. This may include formatting information such as %date:yyyy-MM-dd% or %Empty Latent Image.width% to include values from nodes."}]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["svg", "filename_prefix"], "hidden": ["prompt", "extra_pnginfo"]}, "output": [], "output_is_list": [], "output_name": [], "name": "SaveSVGNode", "display_name": "SaveSVGNode", "description": "Save SVG files on disk.", "python_module": "comfy_extras.nodes_images", "category": "image/save", "output_node": true}, "ImageStitch": {"input": {"required": {"image1": ["IMAGE"], "direction": [["right", "down", "left", "up"], {"default": "right"}], "match_image_size": ["BOOLEAN", {"default": true}], "spacing_width": ["INT", {"default": 0, "min": 0, "max": 1024, "step": 2}], "spacing_color": [["white", "black", "red", "green", "blue"], {"default": "white"}]}, "optional": {"image2": ["IMAGE"]}}, "input_order": {"required": ["image1", "direction", "match_image_size", "spacing_width", "spacing_color"], "optional": ["image2"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "ImageStitch", "display_name": "Image Stitch", "description": "\nStitches image2 to image1 in the specified direction.\nIf image2 is not provided, returns image1 unchanged.\nOptional spacing can be added between images.\n", "python_module": "comfy_extras.nodes_images", "category": "image/transform", "output_node": false}, "ResizeAndPadImage": {"input": {"required": {"image": ["IMAGE"], "target_width": ["INT", {"default": 512, "min": 1, "max": 16384, "step": 1}], "target_height": ["INT", {"default": 512, "min": 1, "max": 16384, "step": 1}], "padding_color": [["white", "black"]], "interpolation": [["area", "bicubic", "nearest-exact", "bilinear", "lanczos"]]}}, "input_order": {"required": ["image", "target_width", "target_height", "padding_color", "interpolation"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "ResizeAndPadImage", "display_name": "ResizeAndPadImage", "description": "", "python_module": "comfy_extras.nodes_images", "category": "image/transform", "output_node": false}, "GetImageSize": {"input": {"required": {"image": ["IMAGE"]}, "hidden": {"unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["image"], "hidden": ["unique_id"]}, "output": ["INT", "INT", "INT"], "output_is_list": [false, false, false], "output_name": ["width", "height", "batch_size"], "name": "GetImageSize", "display_name": "Get Image Size", "description": "Returns width and height of the image, and passes it through unchanged.", "python_module": "comfy_extras.nodes_images", "category": "image", "output_node": false}, "ImageRotate": {"input": {"required": {"image": ["IMAGE"], "rotation": [["none", "90 degrees", "180 degrees", "270 degrees"]]}}, "input_order": {"required": ["image", "rotation"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "ImageRotate", "display_name": "ImageRotate", "description": "", "python_module": "comfy_extras.nodes_images", "category": "image/transform", "output_node": false}, "ImageFlip": {"input": {"required": {"image": ["IMAGE"], "flip_method": [["x-axis: vertically", "y-axis: horizontally"]]}}, "input_order": {"required": ["image", "flip_method"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "ImageFlip", "display_name": "ImageFlip", "description": "", "python_module": "comfy_extras.nodes_images", "category": "image/transform", "output_node": false}, "ImageScaleToMaxDimension": {"input": {"required": {"image": ["IMAGE"], "upscale_method": [["area", "lanczos", "bilinear", "nearest-exact", "bilinear", "bicubic"]], "largest_size": ["INT", {"default": 512, "min": 0, "max": 16384, "step": 1}]}}, "input_order": {"required": ["image", "upscale_method", "largest_size"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "ImageScaleToMaxDimension", "display_name": "ImageScaleToMaxDimension", "description": "", "python_module": "comfy_extras.nodes_images", "category": "image/upscaling", "output_node": false}, "ImageOnlyCheckpointLoader": {"input": {"required": {"ckpt_name": [["3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"]]}}, "input_order": {"required": ["ckpt_name"]}, "output": ["MODEL", "CLIP_VISION", "VAE"], "output_is_list": [false, false, false], "output_name": ["MODEL", "CLIP_VISION", "VAE"], "name": "ImageOnlyCheckpointLoader", "display_name": "Image Only Checkpoint Loader (img2vid model)", "description": "", "python_module": "comfy_extras.nodes_video_model", "category": "loaders/video_models", "output_node": false}, "SVD_img2vid_Conditioning": {"input": {"required": {"clip_vision": ["CLIP_VISION"], "init_image": ["IMAGE"], "vae": ["VAE"], "width": ["INT", {"default": 1024, "min": 16, "max": 16384, "step": 8}], "height": ["INT", {"default": 576, "min": 16, "max": 16384, "step": 8}], "video_frames": ["INT", {"default": 14, "min": 1, "max": 4096}], "motion_bucket_id": ["INT", {"default": 127, "min": 1, "max": 1023}], "fps": ["INT", {"default": 6, "min": 1, "max": 1024}], "augmentation_level": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 10.0, "step": 0.01}]}}, "input_order": {"required": ["clip_vision", "init_image", "vae", "width", "height", "video_frames", "motion_bucket_id", "fps", "augmentation_level"]}, "output": ["CONDITIONING", "CONDITIONING", "LATENT"], "output_is_list": [false, false, false], "output_name": ["positive", "negative", "latent"], "name": "SVD_img2vid_Conditioning", "display_name": "SVD_img2vid_Conditioning", "description": "", "python_module": "comfy_extras.nodes_video_model", "category": "conditioning/video_models", "output_node": false}, "VideoLinearCFGGuidance": {"input": {"required": {"model": ["MODEL"], "min_cfg": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 100.0, "step": 0.5, "round": 0.01}]}}, "input_order": {"required": ["model", "min_cfg"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "VideoLinearCFGGuidance", "display_name": "VideoLinearCFGGuidance", "description": "", "python_module": "comfy_extras.nodes_video_model", "category": "sampling/video_models", "output_node": false}, "VideoTriangleCFGGuidance": {"input": {"required": {"model": ["MODEL"], "min_cfg": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 100.0, "step": 0.5, "round": 0.01}]}}, "input_order": {"required": ["model", "min_cfg"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "VideoTriangleCFGGuidance", "display_name": "VideoTriangleCFGGuidance", "description": "", "python_module": "comfy_extras.nodes_video_model", "category": "sampling/video_models", "output_node": false}, "ImageOnlyCheckpointSave": {"input": {"required": {"model": ["MODEL"], "clip_vision": ["CLIP_VISION"], "vae": ["VAE"], "filename_prefix": ["STRING", {"default": "checkpoints/ComfyUI"}]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["model", "clip_vision", "vae", "filename_prefix"], "hidden": ["prompt", "extra_pnginfo"]}, "output": [], "output_is_list": [], "output_name": [], "name": "ImageOnlyCheckpointSave", "display_name": "ImageOnlyCheckpointSave", "description": "", "python_module": "comfy_extras.nodes_video_model", "category": "advanced/model_merging", "output_node": true}, "ConditioningSetAreaPercentageVideo": {"input": {"required": {"conditioning": ["CONDITIONING"], "width": ["FLOAT", {"default": 1.0, "min": 0, "max": 1.0, "step": 0.01}], "height": ["FLOAT", {"default": 1.0, "min": 0, "max": 1.0, "step": 0.01}], "temporal": ["FLOAT", {"default": 1.0, "min": 0, "max": 1.0, "step": 0.01}], "x": ["FLOAT", {"default": 0, "min": 0, "max": 1.0, "step": 0.01}], "y": ["FLOAT", {"default": 0, "min": 0, "max": 1.0, "step": 0.01}], "z": ["FLOAT", {"default": 0, "min": 0, "max": 1.0, "step": 0.01}], "strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}]}}, "input_order": {"required": ["conditioning", "width", "height", "temporal", "x", "y", "z", "strength"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "ConditioningSetAreaPercentageVideo", "display_name": "ConditioningSetAreaPercentageVideo", "description": "", "python_module": "comfy_extras.nodes_video_model", "category": "conditioning", "output_node": false}, "TrainLoraNode": {"input": {"required": {"model": ["MODEL", {"tooltip": "The model to train the LoRA on."}], "latents": ["LATENT", {"tooltip": "The Latents to use for training, serve as dataset/input of the model."}], "positive": ["CONDITIONING", {"tooltip": "The positive conditioning to use for training."}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 10000, "step": 1, "tooltip": "The batch size to use for training."}], "grad_accumulation_steps": ["INT", {"default": 1, "min": 1, "max": 1024, "step": 1, "tooltip": "The number of gradient accumulation steps to use for training."}], "steps": ["INT", {"default": 16, "min": 1, "max": 100000, "tooltip": "The number of steps to train the LoRA for."}], "learning_rate": ["FLOAT", {"default": 0.0005, "min": 1e-07, "max": 1.0, "step": 1e-06, "tooltip": "The learning rate to use for training."}], "rank": ["INT", {"default": 8, "min": 1, "max": 128, "tooltip": "The rank of the LoRA layers."}], "optimizer": [["AdamW", "Adam", "SGD", "RMSprop"], {"default": "AdamW", "tooltip": "The optimizer to use for training."}], "loss_function": [["MSE", "L1", "Huber", "SmoothL1"], {"default": "MSE", "tooltip": "The loss function to use for training."}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "tooltip": "The seed to use for training (used in generator for LoRA weight initialization and noise sampling)"}], "training_dtype": [["bf16", "fp32"], {"default": "bf16", "tooltip": "The dtype to use for training."}], "lora_dtype": [["bf16", "fp32"], {"default": "bf16", "tooltip": "The dtype to use for lora."}], "algorithm": [["LoRA", "LoHa", "LoKr", "OFT"], {"default": "LoRA", "tooltip": "The algorithm to use for training."}], "gradient_checkpointing": ["BOOLEAN", {"default": true, "tooltip": "Use gradient checkpointing for training."}], "existing_lora": [["Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors", "[None]"], {"default": "[None]", "tooltip": "The existing LoRA to append to. Set to None for new LoRA."}]}}, "input_order": {"required": ["model", "latents", "positive", "batch_size", "grad_accumulation_steps", "steps", "learning_rate", "rank", "optimizer", "loss_function", "seed", "training_dtype", "lora_dtype", "algorithm", "gradient_checkpointing", "existing_lora"]}, "output": ["MODEL", "LORA_MODEL", "LOSS_MAP", "INT"], "output_is_list": [false, false, false, false], "output_name": ["model_with_lora", "lora", "loss", "steps"], "name": "TrainLoraNode", "display_name": "Train LoRA", "description": "", "python_module": "comfy_extras.nodes_train", "category": "training", "output_node": false, "experimental": true}, "SaveLoRANode": {"input": {"required": {"lora": ["LORA_MODEL", {"tooltip": "The LoRA model to save. Do not use the model with LoRA layers."}], "prefix": ["STRING", {"default": "loras/ComfyUI_trained_lora", "tooltip": "The prefix to use for the saved LoRA file."}]}, "optional": {"steps": ["INT", {"forceInput": true, "tooltip": "Optional: The number of steps to LoRA has been trained for, used to name the saved file."}]}}, "input_order": {"required": ["lora", "prefix"], "optional": ["steps"]}, "output": [], "output_is_list": [], "output_name": [], "name": "SaveLoRANode", "display_name": "Save LoRA Weights", "description": "", "python_module": "comfy_extras.nodes_train", "category": "loaders", "output_node": true, "experimental": true}, "LoraModelLoader": {"input": {"required": {"model": ["MODEL", {"tooltip": "The diffusion model the LoRA will be applied to."}], "lora": ["LORA_MODEL", {"tooltip": "The LoRA model to apply to the diffusion model."}], "strength_model": ["FLOAT", {"default": 1.0, "min": -100.0, "max": 100.0, "step": 0.01, "tooltip": "How strongly to modify the diffusion model. This value can be negative."}]}}, "input_order": {"required": ["model", "lora", "strength_model"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "LoraModelLoader", "display_name": "Load LoRA Model", "description": "Load Trained LoRA weights from Train LoRA node.", "python_module": "comfy_extras.nodes_train", "category": "loaders", "output_node": false, "output_tooltips": ["The modified diffusion model."], "experimental": true}, "LoadImageSetFromFolderNode": {"input": {"required": {"folder": [["3d"], {"tooltip": "The folder to load images from."}]}, "optional": {"resize_method": [["None", "Stretch", "Crop", "Pad"], {"default": "None"}]}}, "input_order": {"required": ["folder"], "optional": ["resize_method"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "LoadImageSetFromFolderNode", "display_name": "Load Image Dataset from Folder", "description": "Loads a batch of images from a directory for training.", "python_module": "comfy_extras.nodes_train", "category": "loaders", "output_node": false, "experimental": true}, "LoadImageTextSetFromFolderNode": {"input": {"required": {"folder": [["3d"], {"tooltip": "The folder to load images from."}], "clip": ["CLIP", {"tooltip": "The CLIP model used for encoding the text."}]}, "optional": {"resize_method": [["None", "Stretch", "Crop", "Pad"], {"default": "None"}], "width": ["INT", {"default": -1, "min": -1, "max": 10000, "step": 1, "tooltip": "The width to resize the images to. -1 means use the original width."}], "height": ["INT", {"default": -1, "min": -1, "max": 10000, "step": 1, "tooltip": "The height to resize the images to. -1 means use the original height."}]}}, "input_order": {"required": ["folder", "clip"], "optional": ["resize_method", "width", "height"]}, "output": ["IMAGE", "CONDITIONING"], "output_is_list": [false, false], "output_name": ["IMAGE", "CONDITIONING"], "name": "LoadImageTextSetFromFolderNode", "display_name": "Load Image and Text Dataset from Folder", "description": "Loads a batch of images and caption from a directory for training.", "python_module": "comfy_extras.nodes_train", "category": "loaders", "output_node": false, "experimental": true}, "LossGraphNode": {"input": {"required": {"loss": ["LOSS_MAP", {"default": {}}], "filename_prefix": ["STRING", {"default": "loss_graph"}]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["loss", "filename_prefix"], "hidden": ["prompt", "extra_pnginfo"]}, "output": [], "output_is_list": [], "output_name": [], "name": "LossGraphNode", "display_name": "Plot Loss Graph", "description": "Plots the loss graph and saves it to the output directory.", "python_module": "comfy_extras.nodes_train", "category": "training", "output_node": true, "experimental": true}, "SelfAttentionGuidance": {"input": {"required": {"model": ["MODEL"], "scale": ["FLOAT", {"default": 0.5, "min": -2.0, "max": 5.0, "step": 0.01}], "blur_sigma": ["FLOAT", {"default": 2.0, "min": 0.0, "max": 10.0, "step": 0.1}]}}, "input_order": {"required": ["model", "scale", "blur_sigma"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "SelfAttentionGuidance", "display_name": "Self-Attention Guidance", "description": "", "python_module": "comfy_extras.nodes_sag", "category": "_for_testing", "output_node": false}, "PerpNeg": {"input": {"required": {"model": ["MODEL"], "empty_conditioning": ["CONDITIONING"], "neg_scale": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 100.0, "step": 0.01}]}}, "input_order": {"required": ["model", "empty_conditioning", "neg_scale"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "PerpNeg", "display_name": "Perp-Neg (DEPRECATED by PerpNegGuider)", "description": "", "python_module": "comfy_extras.nodes_perpneg", "category": "_for_testing", "output_node": false, "deprecated": true}, "PerpNegGuider": {"input": {"required": {"model": ["MODEL"], "positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "empty_conditioning": ["CONDITIONING"], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0, "step": 0.1, "round": 0.01}], "neg_scale": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 100.0, "step": 0.01}]}}, "input_order": {"required": ["model", "positive", "negative", "empty_conditioning", "cfg", "neg_scale"]}, "output": ["GUIDER"], "output_is_list": [false], "output_name": ["GUIDER"], "name": "PerpNegGuider", "display_name": "PerpNegGuider", "description": "", "python_module": "comfy_extras.nodes_perpneg", "category": "_for_testing", "output_node": false}, "StableZero123_Conditioning": {"input": {"required": {"clip_vision": ["CLIP_VISION"], "init_image": ["IMAGE"], "vae": ["VAE"], "width": ["INT", {"default": 256, "min": 16, "max": 16384, "step": 8}], "height": ["INT", {"default": 256, "min": 16, "max": 16384, "step": 8}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096}], "elevation": ["FLOAT", {"default": 0.0, "min": -180.0, "max": 180.0, "step": 0.1, "round": false}], "azimuth": ["FLOAT", {"default": 0.0, "min": -180.0, "max": 180.0, "step": 0.1, "round": false}]}}, "input_order": {"required": ["clip_vision", "init_image", "vae", "width", "height", "batch_size", "elevation", "azimuth"]}, "output": ["CONDITIONING", "CONDITIONING", "LATENT"], "output_is_list": [false, false, false], "output_name": ["positive", "negative", "latent"], "name": "StableZero123_Conditioning", "display_name": "StableZero123_Conditioning", "description": "", "python_module": "comfy_extras.nodes_stable3d", "category": "conditioning/3d_models", "output_node": false}, "StableZero123_Conditioning_Batched": {"input": {"required": {"clip_vision": ["CLIP_VISION"], "init_image": ["IMAGE"], "vae": ["VAE"], "width": ["INT", {"default": 256, "min": 16, "max": 16384, "step": 8}], "height": ["INT", {"default": 256, "min": 16, "max": 16384, "step": 8}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096}], "elevation": ["FLOAT", {"default": 0.0, "min": -180.0, "max": 180.0, "step": 0.1, "round": false}], "azimuth": ["FLOAT", {"default": 0.0, "min": -180.0, "max": 180.0, "step": 0.1, "round": false}], "elevation_batch_increment": ["FLOAT", {"default": 0.0, "min": -180.0, "max": 180.0, "step": 0.1, "round": false}], "azimuth_batch_increment": ["FLOAT", {"default": 0.0, "min": -180.0, "max": 180.0, "step": 0.1, "round": false}]}}, "input_order": {"required": ["clip_vision", "init_image", "vae", "width", "height", "batch_size", "elevation", "azimuth", "elevation_batch_increment", "azimuth_batch_increment"]}, "output": ["CONDITIONING", "CONDITIONING", "LATENT"], "output_is_list": [false, false, false], "output_name": ["positive", "negative", "latent"], "name": "StableZero123_Conditioning_Batched", "display_name": "StableZero123_Conditioning_Batched", "description": "", "python_module": "comfy_extras.nodes_stable3d", "category": "conditioning/3d_models", "output_node": false}, "SV3D_Conditioning": {"input": {"required": {"clip_vision": ["CLIP_VISION"], "init_image": ["IMAGE"], "vae": ["VAE"], "width": ["INT", {"default": 576, "min": 16, "max": 16384, "step": 8}], "height": ["INT", {"default": 576, "min": 16, "max": 16384, "step": 8}], "video_frames": ["INT", {"default": 21, "min": 1, "max": 4096}], "elevation": ["FLOAT", {"default": 0.0, "min": -90.0, "max": 90.0, "step": 0.1, "round": false}]}}, "input_order": {"required": ["clip_vision", "init_image", "vae", "width", "height", "video_frames", "elevation"]}, "output": ["CONDITIONING", "CONDITIONING", "LATENT"], "output_is_list": [false, false, false], "output_name": ["positive", "negative", "latent"], "name": "SV3D_Conditioning", "display_name": "SV3D_Conditioning", "description": "", "python_module": "comfy_extras.nodes_stable3d", "category": "conditioning/3d_models", "output_node": false}, "SD_4XUpscale_Conditioning": {"input": {"required": {"images": ["IMAGE"], "positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "scale_ratio": ["FLOAT", {"default": 4.0, "min": 0.0, "max": 10.0, "step": 0.01}], "noise_augmentation": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.001}]}}, "input_order": {"required": ["images", "positive", "negative", "scale_ratio", "noise_augmentation"]}, "output": ["CONDITIONING", "CONDITIONING", "LATENT"], "output_is_list": [false, false, false], "output_name": ["positive", "negative", "latent"], "name": "SD_4XUpscale_Conditioning", "display_name": "SD_4XUpscale_Conditioning", "description": "", "python_module": "comfy_extras.nodes_sdupscale", "category": "conditioning/upscale_diffusion", "output_node": false}, "PhotoMakerLoader": {"input": {"required": {"photomaker_model_name": [[]]}}, "input_order": {"required": ["photomaker_model_name"]}, "output": ["PHOTOMAKER"], "output_is_list": [false], "output_name": ["PHOTOMAKER"], "name": "PhotoMakerLoader", "display_name": "PhotoMakerLoader", "description": "", "python_module": "comfy_extras.nodes_photomaker", "category": "_for_testing/photomaker", "output_node": false}, "PhotoMakerEncode": {"input": {"required": {"photomaker": ["PHOTOMAKER"], "image": ["IMAGE"], "clip": ["CLIP"], "text": ["STRING", {"multiline": true, "dynamicPrompts": true, "default": "photograph of photomaker"}]}}, "input_order": {"required": ["photomaker", "image", "clip", "text"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "PhotoMakerEncode", "display_name": "PhotoMakerEncode", "description": "", "python_module": "comfy_extras.nodes_photomaker", "category": "_for_testing/photomaker", "output_node": false}, "CLIPTextEncodePixArtAlpha": {"input": {"required": {"width": ["INT", {"default": 1024.0, "min": 0, "max": 16384}], "height": ["INT", {"default": 1024.0, "min": 0, "max": 16384}], "text": ["STRING", {"multiline": true, "dynamicPrompts": true}], "clip": ["CLIP"]}}, "input_order": {"required": ["width", "height", "text", "clip"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "CLIPTextEncodePixArtAlpha", "display_name": "CLIPTextEncodePixArtAlpha", "description": "Encodes text and sets the resolution conditioning for PixArt Alpha. Does not apply to PixArt Sigma.", "python_module": "comfy_extras.nodes_pixart", "category": "advanced/conditioning", "output_node": false}, "CLIPTextEncodeControlnet": {"input": {"required": {"clip": ["CLIP"], "conditioning": ["CONDITIONING"], "text": ["STRING", {"multiline": true, "dynamicPrompts": true}]}}, "input_order": {"required": ["clip", "conditioning", "text"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "CLIPTextEncodeControlnet", "display_name": "CLIPTextEncodeControlnet", "description": "", "python_module": "comfy_extras.nodes_cond", "category": "_for_testing/conditioning", "output_node": false}, "T5TokenizerOptions": {"input": {"required": {"clip": ["CLIP"], "min_padding": ["INT", {"default": 0, "min": 0, "max": 10000, "step": 1}], "min_length": ["INT", {"default": 0, "min": 0, "max": 10000, "step": 1}]}}, "input_order": {"required": ["clip", "min_padding", "min_length"]}, "output": ["CLIP"], "output_is_list": [false], "output_name": ["CLIP"], "name": "T5TokenizerOptions", "display_name": "T5TokenizerOptions", "description": "", "python_module": "comfy_extras.nodes_cond", "category": "_for_testing/conditioning", "output_node": false}, "Morphology": {"input": {"required": {"image": ["IMAGE"], "operation": [["erode", "dilate", "open", "close", "gradient", "bottom_hat", "top_hat"]], "kernel_size": ["INT", {"default": 3, "min": 3, "max": 999, "step": 1}]}}, "input_order": {"required": ["image", "operation", "kernel_size"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "Morphology", "display_name": "ImageMorphology", "description": "", "python_module": "comfy_extras.nodes_morphology", "category": "image/postprocessing", "output_node": false}, "ImageRGBToYUV": {"input": {"required": {"image": ["IMAGE"]}}, "input_order": {"required": ["image"]}, "output": ["IMAGE", "IMAGE", "IMAGE"], "output_is_list": [false, false, false], "output_name": ["Y", "U", "V"], "name": "ImageRGBToYUV", "display_name": "ImageRGBToYUV", "description": "", "python_module": "comfy_extras.nodes_morphology", "category": "image/batch", "output_node": false}, "ImageYUVToRGB": {"input": {"required": {"Y": ["IMAGE"], "U": ["IMAGE"], "V": ["IMAGE"]}}, "input_order": {"required": ["Y", "U", "V"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "ImageYUVToRGB", "display_name": "ImageYUVToRGB", "description": "", "python_module": "comfy_extras.nodes_morphology", "category": "image/batch", "output_node": false}, "StableCascade_EmptyLatentImage": {"input": {"required": {"width": ["INT", {"default": 1024, "min": 256, "max": 16384, "step": 8}], "height": ["INT", {"default": 1024, "min": 256, "max": 16384, "step": 8}], "compression": ["INT", {"default": 42, "min": 4, "max": 128, "step": 1}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096}]}}, "input_order": {"required": ["width", "height", "compression", "batch_size"]}, "output": ["LATENT", "LATENT"], "output_is_list": [false, false], "output_name": ["stage_c", "stage_b"], "output_tooltips": [null, null], "name": "StableCascade_EmptyLatentImage", "display_name": null, "description": "", "python_module": "comfy_extras.nodes_stable_cascade", "category": "latent/stable_cascade", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "StableCascade_StageB_Conditioning": {"input": {"required": {"conditioning": ["CONDITIONING", {}], "stage_c": ["LATENT", {}]}}, "input_order": {"required": ["conditioning", "stage_c"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "output_tooltips": [null], "name": "StableCascade_StageB_Conditioning", "display_name": null, "description": "", "python_module": "comfy_extras.nodes_stable_cascade", "category": "conditioning/stable_cascade", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "StableCascade_StageC_VAEEncode": {"input": {"required": {"image": ["IMAGE", {}], "vae": ["VAE", {}], "compression": ["INT", {"default": 42, "min": 4, "max": 128, "step": 1}]}}, "input_order": {"required": ["image", "vae", "compression"]}, "output": ["LATENT", "LATENT"], "output_is_list": [false, false], "output_name": ["stage_c", "stage_b"], "output_tooltips": [null, null], "name": "StableCascade_StageC_VAEEncode", "display_name": null, "description": "", "python_module": "comfy_extras.nodes_stable_cascade", "category": "latent/stable_cascade", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "StableCascade_SuperResolutionControlnet": {"input": {"required": {"image": ["IMAGE", {}], "vae": ["VAE", {}]}}, "input_order": {"required": ["image", "vae"]}, "output": ["IMAGE", "LATENT", "LATENT"], "output_is_list": [false, false, false], "output_name": ["controlnet_input", "stage_c", "stage_b"], "output_tooltips": [null, null, null], "name": "StableCascade_SuperResolutionControlnet", "display_name": null, "description": "", "python_module": "comfy_extras.nodes_stable_cascade", "category": "_for_testing/stable_cascade", "output_node": false, "deprecated": false, "experimental": true, "api_node": false}, "DifferentialDiffusion": {"input": {"required": {"model": ["MODEL"]}}, "input_order": {"required": ["model"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "DifferentialDiffusion", "display_name": "Differential Diffusion", "description": "", "python_module": "comfy_extras.nodes_differential_diffusion", "category": "_for_testing", "output_node": false}, "InstructPixToPixConditioning": {"input": {"required": {"positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "vae": ["VAE"], "pixels": ["IMAGE"]}}, "input_order": {"required": ["positive", "negative", "vae", "pixels"]}, "output": ["CONDITIONING", "CONDITIONING", "LATENT"], "output_is_list": [false, false, false], "output_name": ["positive", "negative", "latent"], "name": "InstructPixToPixConditioning", "display_name": "InstructPixToPixConditioning", "description": "", "python_module": "comfy_extras.nodes_ip2p", "category": "conditioning/instructpix2pix", "output_node": false}, "ModelMergeSD1": {"input": {"required": {"model1": ["MODEL"], "model2": ["MODEL"], "time_embed.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "label_emb.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.0.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.1.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.2.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.3.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.4.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.5.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.6.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.7.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.8.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.9.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.10.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.11.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "middle_block.0.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "middle_block.1.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "middle_block.2.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.0.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.1.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.2.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.3.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.4.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.5.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.6.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.7.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.8.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.9.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.10.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.11.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "out.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["model1", "model2", "time_embed.", "label_emb.", "input_blocks.0.", "input_blocks.1.", "input_blocks.2.", "input_blocks.3.", "input_blocks.4.", "input_blocks.5.", "input_blocks.6.", "input_blocks.7.", "input_blocks.8.", "input_blocks.9.", "input_blocks.10.", "input_blocks.11.", "middle_block.0.", "middle_block.1.", "middle_block.2.", "output_blocks.0.", "output_blocks.1.", "output_blocks.2.", "output_blocks.3.", "output_blocks.4.", "output_blocks.5.", "output_blocks.6.", "output_blocks.7.", "output_blocks.8.", "output_blocks.9.", "output_blocks.10.", "output_blocks.11.", "out."]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "ModelMergeSD1", "display_name": "ModelMergeSD1", "description": "", "python_module": "comfy_extras.nodes_model_merging_model_specific", "category": "advanced/model_merging/model_specific", "output_node": false}, "ModelMergeSD2": {"input": {"required": {"model1": ["MODEL"], "model2": ["MODEL"], "time_embed.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "label_emb.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.0.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.1.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.2.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.3.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.4.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.5.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.6.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.7.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.8.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.9.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.10.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.11.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "middle_block.0.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "middle_block.1.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "middle_block.2.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.0.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.1.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.2.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.3.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.4.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.5.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.6.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.7.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.8.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.9.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.10.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.11.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "out.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["model1", "model2", "time_embed.", "label_emb.", "input_blocks.0.", "input_blocks.1.", "input_blocks.2.", "input_blocks.3.", "input_blocks.4.", "input_blocks.5.", "input_blocks.6.", "input_blocks.7.", "input_blocks.8.", "input_blocks.9.", "input_blocks.10.", "input_blocks.11.", "middle_block.0.", "middle_block.1.", "middle_block.2.", "output_blocks.0.", "output_blocks.1.", "output_blocks.2.", "output_blocks.3.", "output_blocks.4.", "output_blocks.5.", "output_blocks.6.", "output_blocks.7.", "output_blocks.8.", "output_blocks.9.", "output_blocks.10.", "output_blocks.11.", "out."]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "ModelMergeSD2", "display_name": "ModelMergeSD2", "description": "", "python_module": "comfy_extras.nodes_model_merging_model_specific", "category": "advanced/model_merging/model_specific", "output_node": false}, "ModelMergeSDXL": {"input": {"required": {"model1": ["MODEL"], "model2": ["MODEL"], "time_embed.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "label_emb.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.0": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.1": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.2": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.3": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.4": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.5": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.6": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.7": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "input_blocks.8": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "middle_block.0": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "middle_block.1": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "middle_block.2": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.0": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.1": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.2": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.3": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.4": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.5": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.6": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.7": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "output_blocks.8": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "out.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["model1", "model2", "time_embed.", "label_emb.", "input_blocks.0", "input_blocks.1", "input_blocks.2", "input_blocks.3", "input_blocks.4", "input_blocks.5", "input_blocks.6", "input_blocks.7", "input_blocks.8", "middle_block.0", "middle_block.1", "middle_block.2", "output_blocks.0", "output_blocks.1", "output_blocks.2", "output_blocks.3", "output_blocks.4", "output_blocks.5", "output_blocks.6", "output_blocks.7", "output_blocks.8", "out."]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "ModelMergeSDXL", "display_name": "ModelMergeSDXL", "description": "", "python_module": "comfy_extras.nodes_model_merging_model_specific", "category": "advanced/model_merging/model_specific", "output_node": false}, "ModelMergeSD3_2B": {"input": {"required": {"model1": ["MODEL"], "model2": ["MODEL"], "pos_embed.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "x_embedder.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "context_embedder.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "y_embedder.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "t_embedder.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.0.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.1.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.2.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.3.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.4.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.5.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.6.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.7.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.8.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.9.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.10.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.11.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.12.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.13.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.14.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.15.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.16.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.17.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.18.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.19.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.20.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.21.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.22.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.23.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "final_layer.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["model1", "model2", "pos_embed.", "x_embedder.", "context_embedder.", "y_embedder.", "t_embedder.", "joint_blocks.0.", "joint_blocks.1.", "joint_blocks.2.", "joint_blocks.3.", "joint_blocks.4.", "joint_blocks.5.", "joint_blocks.6.", "joint_blocks.7.", "joint_blocks.8.", "joint_blocks.9.", "joint_blocks.10.", "joint_blocks.11.", "joint_blocks.12.", "joint_blocks.13.", "joint_blocks.14.", "joint_blocks.15.", "joint_blocks.16.", "joint_blocks.17.", "joint_blocks.18.", "joint_blocks.19.", "joint_blocks.20.", "joint_blocks.21.", "joint_blocks.22.", "joint_blocks.23.", "final_layer."]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "ModelMergeSD3_2B", "display_name": "ModelMergeSD3_2B", "description": "", "python_module": "comfy_extras.nodes_model_merging_model_specific", "category": "advanced/model_merging/model_specific", "output_node": false}, "ModelMergeAuraflow": {"input": {"required": {"model1": ["MODEL"], "model2": ["MODEL"], "init_x_linear.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "positional_encoding": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "cond_seq_linear.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "register_tokens": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "t_embedder.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "double_layers.0.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "double_layers.1.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "double_layers.2.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "double_layers.3.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.0.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.1.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.2.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.3.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.4.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.5.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.6.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.7.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.8.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.9.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.10.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.11.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.12.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.13.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.14.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.15.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.16.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.17.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.18.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.19.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.20.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.21.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.22.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.23.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.24.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.25.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.26.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.27.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.28.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.29.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.30.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_layers.31.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "modF.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "final_linear.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["model1", "model2", "init_x_linear.", "positional_encoding", "cond_seq_linear.", "register_tokens", "t_embedder.", "double_layers.0.", "double_layers.1.", "double_layers.2.", "double_layers.3.", "single_layers.0.", "single_layers.1.", "single_layers.2.", "single_layers.3.", "single_layers.4.", "single_layers.5.", "single_layers.6.", "single_layers.7.", "single_layers.8.", "single_layers.9.", "single_layers.10.", "single_layers.11.", "single_layers.12.", "single_layers.13.", "single_layers.14.", "single_layers.15.", "single_layers.16.", "single_layers.17.", "single_layers.18.", "single_layers.19.", "single_layers.20.", "single_layers.21.", "single_layers.22.", "single_layers.23.", "single_layers.24.", "single_layers.25.", "single_layers.26.", "single_layers.27.", "single_layers.28.", "single_layers.29.", "single_layers.30.", "single_layers.31.", "modF.", "final_linear."]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "ModelMergeAuraflow", "display_name": "ModelMergeAuraflow", "description": "", "python_module": "comfy_extras.nodes_model_merging_model_specific", "category": "advanced/model_merging/model_specific", "output_node": false}, "ModelMergeFlux1": {"input": {"required": {"model1": ["MODEL"], "model2": ["MODEL"], "img_in.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "time_in.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "guidance_in": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "vector_in.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "txt_in.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "double_blocks.0.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "double_blocks.1.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "double_blocks.2.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "double_blocks.3.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "double_blocks.4.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "double_blocks.5.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "double_blocks.6.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "double_blocks.7.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "double_blocks.8.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "double_blocks.9.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "double_blocks.10.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "double_blocks.11.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "double_blocks.12.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "double_blocks.13.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "double_blocks.14.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "double_blocks.15.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "double_blocks.16.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "double_blocks.17.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "double_blocks.18.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.0.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.1.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.2.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.3.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.4.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.5.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.6.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.7.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.8.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.9.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.10.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.11.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.12.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.13.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.14.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.15.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.16.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.17.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.18.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.19.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.20.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.21.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.22.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.23.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.24.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.25.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.26.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.27.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.28.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.29.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.30.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.31.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.32.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.33.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.34.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.35.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.36.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "single_blocks.37.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "final_layer.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["model1", "model2", "img_in.", "time_in.", "guidance_in", "vector_in.", "txt_in.", "double_blocks.0.", "double_blocks.1.", "double_blocks.2.", "double_blocks.3.", "double_blocks.4.", "double_blocks.5.", "double_blocks.6.", "double_blocks.7.", "double_blocks.8.", "double_blocks.9.", "double_blocks.10.", "double_blocks.11.", "double_blocks.12.", "double_blocks.13.", "double_blocks.14.", "double_blocks.15.", "double_blocks.16.", "double_blocks.17.", "double_blocks.18.", "single_blocks.0.", "single_blocks.1.", "single_blocks.2.", "single_blocks.3.", "single_blocks.4.", "single_blocks.5.", "single_blocks.6.", "single_blocks.7.", "single_blocks.8.", "single_blocks.9.", "single_blocks.10.", "single_blocks.11.", "single_blocks.12.", "single_blocks.13.", "single_blocks.14.", "single_blocks.15.", "single_blocks.16.", "single_blocks.17.", "single_blocks.18.", "single_blocks.19.", "single_blocks.20.", "single_blocks.21.", "single_blocks.22.", "single_blocks.23.", "single_blocks.24.", "single_blocks.25.", "single_blocks.26.", "single_blocks.27.", "single_blocks.28.", "single_blocks.29.", "single_blocks.30.", "single_blocks.31.", "single_blocks.32.", "single_blocks.33.", "single_blocks.34.", "single_blocks.35.", "single_blocks.36.", "single_blocks.37.", "final_layer."]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "ModelMergeFlux1", "display_name": "ModelMergeFlux1", "description": "", "python_module": "comfy_extras.nodes_model_merging_model_specific", "category": "advanced/model_merging/model_specific", "output_node": false}, "ModelMergeSD35_Large": {"input": {"required": {"model1": ["MODEL"], "model2": ["MODEL"], "pos_embed.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "x_embedder.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "context_embedder.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "y_embedder.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "t_embedder.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.0.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.1.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.2.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.3.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.4.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.5.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.6.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.7.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.8.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.9.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.10.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.11.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.12.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.13.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.14.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.15.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.16.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.17.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.18.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.19.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.20.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.21.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.22.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.23.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.24.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.25.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.26.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.27.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.28.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.29.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.30.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.31.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.32.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.33.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.34.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.35.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.36.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "joint_blocks.37.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "final_layer.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["model1", "model2", "pos_embed.", "x_embedder.", "context_embedder.", "y_embedder.", "t_embedder.", "joint_blocks.0.", "joint_blocks.1.", "joint_blocks.2.", "joint_blocks.3.", "joint_blocks.4.", "joint_blocks.5.", "joint_blocks.6.", "joint_blocks.7.", "joint_blocks.8.", "joint_blocks.9.", "joint_blocks.10.", "joint_blocks.11.", "joint_blocks.12.", "joint_blocks.13.", "joint_blocks.14.", "joint_blocks.15.", "joint_blocks.16.", "joint_blocks.17.", "joint_blocks.18.", "joint_blocks.19.", "joint_blocks.20.", "joint_blocks.21.", "joint_blocks.22.", "joint_blocks.23.", "joint_blocks.24.", "joint_blocks.25.", "joint_blocks.26.", "joint_blocks.27.", "joint_blocks.28.", "joint_blocks.29.", "joint_blocks.30.", "joint_blocks.31.", "joint_blocks.32.", "joint_blocks.33.", "joint_blocks.34.", "joint_blocks.35.", "joint_blocks.36.", "joint_blocks.37.", "final_layer."]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "ModelMergeSD35_Large", "display_name": "ModelMergeSD35_Large", "description": "", "python_module": "comfy_extras.nodes_model_merging_model_specific", "category": "advanced/model_merging/model_specific", "output_node": false}, "ModelMergeMochiPreview": {"input": {"required": {"model1": ["MODEL"], "model2": ["MODEL"], "pos_frequencies.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "t_embedder.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "t5_y_embedder.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "t5_yproj.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.0.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.1.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.2.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.3.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.4.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.5.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.6.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.7.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.8.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.9.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.10.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.11.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.12.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.13.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.14.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.15.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.16.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.17.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.18.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.19.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.20.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.21.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.22.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.23.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.24.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.25.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.26.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.27.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.28.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.29.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.30.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.31.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.32.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.33.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.34.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.35.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.36.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.37.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.38.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.39.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.40.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.41.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.42.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.43.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.44.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.45.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.46.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.47.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "final_layer.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["model1", "model2", "pos_frequencies.", "t_embedder.", "t5_y_embedder.", "t5_yproj.", "blocks.0.", "blocks.1.", "blocks.2.", "blocks.3.", "blocks.4.", "blocks.5.", "blocks.6.", "blocks.7.", "blocks.8.", "blocks.9.", "blocks.10.", "blocks.11.", "blocks.12.", "blocks.13.", "blocks.14.", "blocks.15.", "blocks.16.", "blocks.17.", "blocks.18.", "blocks.19.", "blocks.20.", "blocks.21.", "blocks.22.", "blocks.23.", "blocks.24.", "blocks.25.", "blocks.26.", "blocks.27.", "blocks.28.", "blocks.29.", "blocks.30.", "blocks.31.", "blocks.32.", "blocks.33.", "blocks.34.", "blocks.35.", "blocks.36.", "blocks.37.", "blocks.38.", "blocks.39.", "blocks.40.", "blocks.41.", "blocks.42.", "blocks.43.", "blocks.44.", "blocks.45.", "blocks.46.", "blocks.47.", "final_layer."]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "ModelMergeMochiPreview", "display_name": "ModelMergeMochiPreview", "description": "", "python_module": "comfy_extras.nodes_model_merging_model_specific", "category": "advanced/model_merging/model_specific", "output_node": false}, "ModelMergeLTXV": {"input": {"required": {"model1": ["MODEL"], "model2": ["MODEL"], "patchify_proj.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "adaln_single.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "caption_projection.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.0.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.1.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.2.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.3.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.4.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.5.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.6.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.7.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.8.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.9.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.10.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.11.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.12.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.13.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.14.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.15.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.16.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.17.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.18.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.19.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.20.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.21.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.22.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.23.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.24.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.25.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.26.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.27.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "scale_shift_table": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "proj_out.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["model1", "model2", "patchify_proj.", "adaln_single.", "caption_projection.", "transformer_blocks.0.", "transformer_blocks.1.", "transformer_blocks.2.", "transformer_blocks.3.", "transformer_blocks.4.", "transformer_blocks.5.", "transformer_blocks.6.", "transformer_blocks.7.", "transformer_blocks.8.", "transformer_blocks.9.", "transformer_blocks.10.", "transformer_blocks.11.", "transformer_blocks.12.", "transformer_blocks.13.", "transformer_blocks.14.", "transformer_blocks.15.", "transformer_blocks.16.", "transformer_blocks.17.", "transformer_blocks.18.", "transformer_blocks.19.", "transformer_blocks.20.", "transformer_blocks.21.", "transformer_blocks.22.", "transformer_blocks.23.", "transformer_blocks.24.", "transformer_blocks.25.", "transformer_blocks.26.", "transformer_blocks.27.", "scale_shift_table", "proj_out."]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "ModelMergeLTXV", "display_name": "ModelMergeLTXV", "description": "", "python_module": "comfy_extras.nodes_model_merging_model_specific", "category": "advanced/model_merging/model_specific", "output_node": false}, "ModelMergeCosmos7B": {"input": {"required": {"model1": ["MODEL"], "model2": ["MODEL"], "pos_embedder.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "extra_pos_embedder.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "x_embedder.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "t_embedder.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "affline_norm.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block0.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block1.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block2.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block3.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block4.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block5.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block6.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block7.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block8.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block9.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block10.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block11.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block12.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block13.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block14.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block15.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block16.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block17.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block18.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block19.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block20.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block21.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block22.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block23.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block24.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block25.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block26.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block27.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "final_layer.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["model1", "model2", "pos_embedder.", "extra_pos_embedder.", "x_embedder.", "t_embedder.", "affline_norm.", "blocks.block0.", "blocks.block1.", "blocks.block2.", "blocks.block3.", "blocks.block4.", "blocks.block5.", "blocks.block6.", "blocks.block7.", "blocks.block8.", "blocks.block9.", "blocks.block10.", "blocks.block11.", "blocks.block12.", "blocks.block13.", "blocks.block14.", "blocks.block15.", "blocks.block16.", "blocks.block17.", "blocks.block18.", "blocks.block19.", "blocks.block20.", "blocks.block21.", "blocks.block22.", "blocks.block23.", "blocks.block24.", "blocks.block25.", "blocks.block26.", "blocks.block27.", "final_layer."]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "ModelMergeCosmos7B", "display_name": "ModelMergeCosmos7B", "description": "", "python_module": "comfy_extras.nodes_model_merging_model_specific", "category": "advanced/model_merging/model_specific", "output_node": false}, "ModelMergeCosmos14B": {"input": {"required": {"model1": ["MODEL"], "model2": ["MODEL"], "pos_embedder.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "extra_pos_embedder.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "x_embedder.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "t_embedder.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "affline_norm.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block0.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block1.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block2.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block3.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block4.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block5.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block6.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block7.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block8.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block9.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block10.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block11.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block12.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block13.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block14.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block15.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block16.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block17.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block18.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block19.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block20.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block21.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block22.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block23.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block24.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block25.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block26.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block27.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block28.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block29.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block30.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block31.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block32.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block33.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block34.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.block35.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "final_layer.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["model1", "model2", "pos_embedder.", "extra_pos_embedder.", "x_embedder.", "t_embedder.", "affline_norm.", "blocks.block0.", "blocks.block1.", "blocks.block2.", "blocks.block3.", "blocks.block4.", "blocks.block5.", "blocks.block6.", "blocks.block7.", "blocks.block8.", "blocks.block9.", "blocks.block10.", "blocks.block11.", "blocks.block12.", "blocks.block13.", "blocks.block14.", "blocks.block15.", "blocks.block16.", "blocks.block17.", "blocks.block18.", "blocks.block19.", "blocks.block20.", "blocks.block21.", "blocks.block22.", "blocks.block23.", "blocks.block24.", "blocks.block25.", "blocks.block26.", "blocks.block27.", "blocks.block28.", "blocks.block29.", "blocks.block30.", "blocks.block31.", "blocks.block32.", "blocks.block33.", "blocks.block34.", "blocks.block35.", "final_layer."]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "ModelMergeCosmos14B", "display_name": "ModelMergeCosmos14B", "description": "", "python_module": "comfy_extras.nodes_model_merging_model_specific", "category": "advanced/model_merging/model_specific", "output_node": false}, "ModelMergeWAN2_1": {"input": {"required": {"model1": ["MODEL"], "model2": ["MODEL"], "patch_embedding.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "time_embedding.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "time_projection.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "text_embedding.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "img_emb.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.0.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.1.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.2.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.3.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.4.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.5.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.6.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.7.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.8.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.9.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.10.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.11.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.12.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.13.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.14.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.15.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.16.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.17.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.18.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.19.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.20.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.21.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.22.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.23.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.24.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.25.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.26.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.27.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.28.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.29.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.30.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.31.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.32.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.33.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.34.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.35.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.36.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.37.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.38.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.39.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "head.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["model1", "model2", "patch_embedding.", "time_embedding.", "time_projection.", "text_embedding.", "img_emb.", "blocks.0.", "blocks.1.", "blocks.2.", "blocks.3.", "blocks.4.", "blocks.5.", "blocks.6.", "blocks.7.", "blocks.8.", "blocks.9.", "blocks.10.", "blocks.11.", "blocks.12.", "blocks.13.", "blocks.14.", "blocks.15.", "blocks.16.", "blocks.17.", "blocks.18.", "blocks.19.", "blocks.20.", "blocks.21.", "blocks.22.", "blocks.23.", "blocks.24.", "blocks.25.", "blocks.26.", "blocks.27.", "blocks.28.", "blocks.29.", "blocks.30.", "blocks.31.", "blocks.32.", "blocks.33.", "blocks.34.", "blocks.35.", "blocks.36.", "blocks.37.", "blocks.38.", "blocks.39.", "head."]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "ModelMergeWAN2_1", "display_name": "ModelMergeWAN2_1", "description": "1.3B model has 30 blocks, 14B model has 40 blocks. Image to video model has the extra img_emb.", "python_module": "comfy_extras.nodes_model_merging_model_specific", "category": "advanced/model_merging/model_specific", "output_node": false}, "ModelMergeCosmosPredict2_2B": {"input": {"required": {"model1": ["MODEL"], "model2": ["MODEL"], "pos_embedder.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "x_embedder.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "t_embedder.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "t_embedding_norm.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.0.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.1.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.2.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.3.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.4.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.5.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.6.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.7.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.8.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.9.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.10.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.11.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.12.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.13.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.14.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.15.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.16.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.17.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.18.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.19.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.20.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.21.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.22.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.23.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.24.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.25.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.26.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.27.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "final_layer.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["model1", "model2", "pos_embedder.", "x_embedder.", "t_embedder.", "t_embedding_norm.", "blocks.0.", "blocks.1.", "blocks.2.", "blocks.3.", "blocks.4.", "blocks.5.", "blocks.6.", "blocks.7.", "blocks.8.", "blocks.9.", "blocks.10.", "blocks.11.", "blocks.12.", "blocks.13.", "blocks.14.", "blocks.15.", "blocks.16.", "blocks.17.", "blocks.18.", "blocks.19.", "blocks.20.", "blocks.21.", "blocks.22.", "blocks.23.", "blocks.24.", "blocks.25.", "blocks.26.", "blocks.27.", "final_layer."]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "ModelMergeCosmosPredict2_2B", "display_name": "ModelMergeCosmosPredict2_2B", "description": "", "python_module": "comfy_extras.nodes_model_merging_model_specific", "category": "advanced/model_merging/model_specific", "output_node": false}, "ModelMergeCosmosPredict2_14B": {"input": {"required": {"model1": ["MODEL"], "model2": ["MODEL"], "pos_embedder.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "x_embedder.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "t_embedder.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "t_embedding_norm.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.0.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.1.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.2.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.3.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.4.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.5.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.6.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.7.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.8.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.9.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.10.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.11.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.12.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.13.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.14.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.15.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.16.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.17.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.18.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.19.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.20.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.21.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.22.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.23.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.24.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.25.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.26.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.27.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.28.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.29.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.30.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.31.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.32.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.33.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.34.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "blocks.35.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "final_layer.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["model1", "model2", "pos_embedder.", "x_embedder.", "t_embedder.", "t_embedding_norm.", "blocks.0.", "blocks.1.", "blocks.2.", "blocks.3.", "blocks.4.", "blocks.5.", "blocks.6.", "blocks.7.", "blocks.8.", "blocks.9.", "blocks.10.", "blocks.11.", "blocks.12.", "blocks.13.", "blocks.14.", "blocks.15.", "blocks.16.", "blocks.17.", "blocks.18.", "blocks.19.", "blocks.20.", "blocks.21.", "blocks.22.", "blocks.23.", "blocks.24.", "blocks.25.", "blocks.26.", "blocks.27.", "blocks.28.", "blocks.29.", "blocks.30.", "blocks.31.", "blocks.32.", "blocks.33.", "blocks.34.", "blocks.35.", "final_layer."]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "ModelMergeCosmosPredict2_14B", "display_name": "ModelMergeCosmosPredict2_14B", "description": "", "python_module": "comfy_extras.nodes_model_merging_model_specific", "category": "advanced/model_merging/model_specific", "output_node": false}, "ModelMergeQwenImage": {"input": {"required": {"model1": ["MODEL"], "model2": ["MODEL"], "pos_embeds.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "img_in.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "txt_norm.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "txt_in.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "time_text_embed.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.0.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.1.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.2.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.3.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.4.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.5.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.6.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.7.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.8.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.9.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.10.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.11.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.12.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.13.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.14.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.15.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.16.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.17.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.18.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.19.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.20.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.21.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.22.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.23.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.24.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.25.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.26.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.27.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.28.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.29.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.30.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.31.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.32.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.33.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.34.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.35.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.36.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.37.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.38.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.39.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.40.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.41.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.42.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.43.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.44.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.45.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.46.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.47.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.48.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.49.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.50.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.51.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.52.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.53.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.54.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.55.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.56.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.57.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.58.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "transformer_blocks.59.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "proj_out.": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["model1", "model2", "pos_embeds.", "img_in.", "txt_norm.", "txt_in.", "time_text_embed.", "transformer_blocks.0.", "transformer_blocks.1.", "transformer_blocks.2.", "transformer_blocks.3.", "transformer_blocks.4.", "transformer_blocks.5.", "transformer_blocks.6.", "transformer_blocks.7.", "transformer_blocks.8.", "transformer_blocks.9.", "transformer_blocks.10.", "transformer_blocks.11.", "transformer_blocks.12.", "transformer_blocks.13.", "transformer_blocks.14.", "transformer_blocks.15.", "transformer_blocks.16.", "transformer_blocks.17.", "transformer_blocks.18.", "transformer_blocks.19.", "transformer_blocks.20.", "transformer_blocks.21.", "transformer_blocks.22.", "transformer_blocks.23.", "transformer_blocks.24.", "transformer_blocks.25.", "transformer_blocks.26.", "transformer_blocks.27.", "transformer_blocks.28.", "transformer_blocks.29.", "transformer_blocks.30.", "transformer_blocks.31.", "transformer_blocks.32.", "transformer_blocks.33.", "transformer_blocks.34.", "transformer_blocks.35.", "transformer_blocks.36.", "transformer_blocks.37.", "transformer_blocks.38.", "transformer_blocks.39.", "transformer_blocks.40.", "transformer_blocks.41.", "transformer_blocks.42.", "transformer_blocks.43.", "transformer_blocks.44.", "transformer_blocks.45.", "transformer_blocks.46.", "transformer_blocks.47.", "transformer_blocks.48.", "transformer_blocks.49.", "transformer_blocks.50.", "transformer_blocks.51.", "transformer_blocks.52.", "transformer_blocks.53.", "transformer_blocks.54.", "transformer_blocks.55.", "transformer_blocks.56.", "transformer_blocks.57.", "transformer_blocks.58.", "transformer_blocks.59.", "proj_out."]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "ModelMergeQwenImage", "display_name": "ModelMergeQwenImage", "description": "", "python_module": "comfy_extras.nodes_model_merging_model_specific", "category": "advanced/model_merging/model_specific", "output_node": false}, "PerturbedAttentionGuidance": {"input": {"required": {"model": ["MODEL"], "scale": ["FLOAT", {"default": 3.0, "min": 0.0, "max": 100.0, "step": 0.01, "round": 0.01}]}}, "input_order": {"required": ["model", "scale"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "PerturbedAttentionGuidance", "display_name": "PerturbedAttentionGuidance", "description": "", "python_module": "comfy_extras.nodes_pag", "category": "model_patches/unet", "output_node": false}, "AlignYourStepsScheduler": {"input": {"required": {"model_type": ["COMBO", {"multiselect": false, "options": ["SD1", "SDXL", "SVD"]}], "steps": ["INT", {"default": 10, "min": 1, "max": 10000}], "denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["model_type", "steps", "denoise"]}, "output": ["SIGMAS"], "output_is_list": [false], "output_name": ["SIGMAS"], "output_tooltips": [null], "name": "AlignYourStepsScheduler", "display_name": null, "description": "", "python_module": "comfy_extras.nodes_align_your_steps", "category": "sampling/custom_sampling/schedulers", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "UNetSelfAttentionMultiply": {"input": {"required": {"model": ["MODEL", {}], "q": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}], "k": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}], "v": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}], "out": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}]}}, "input_order": {"required": ["model", "q", "k", "v", "out"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "output_tooltips": [null], "name": "UNetSelfAttentionMultiply", "display_name": null, "description": "", "python_module": "comfy_extras.nodes_attention_multiply", "category": "_for_testing/attention_experiments", "output_node": false, "deprecated": false, "experimental": true, "api_node": false}, "UNetCrossAttentionMultiply": {"input": {"required": {"model": ["MODEL", {}], "q": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}], "k": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}], "v": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}], "out": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}]}}, "input_order": {"required": ["model", "q", "k", "v", "out"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "output_tooltips": [null], "name": "UNetCrossAttentionMultiply", "display_name": null, "description": "", "python_module": "comfy_extras.nodes_attention_multiply", "category": "_for_testing/attention_experiments", "output_node": false, "deprecated": false, "experimental": true, "api_node": false}, "CLIPAttentionMultiply": {"input": {"required": {"clip": ["CLIP", {}], "q": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}], "k": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}], "v": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}], "out": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}]}}, "input_order": {"required": ["clip", "q", "k", "v", "out"]}, "output": ["CLIP"], "output_is_list": [false], "output_name": ["CLIP"], "output_tooltips": [null], "name": "CLIPAttentionMultiply", "display_name": null, "description": "", "python_module": "comfy_extras.nodes_attention_multiply", "category": "_for_testing/attention_experiments", "output_node": false, "deprecated": false, "experimental": true, "api_node": false}, "UNetTemporalAttentionMultiply": {"input": {"required": {"model": ["MODEL", {}], "self_structural": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}], "self_temporal": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}], "cross_structural": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}], "cross_temporal": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}]}}, "input_order": {"required": ["model", "self_structural", "self_temporal", "cross_structural", "cross_temporal"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "output_tooltips": [null], "name": "UNetTemporalAttentionMultiply", "display_name": null, "description": "", "python_module": "comfy_extras.nodes_attention_multiply", "category": "_for_testing/attention_experiments", "output_node": false, "deprecated": false, "experimental": true, "api_node": false}, "SamplerLCMUpscale": {"input": {"required": {"scale_ratio": ["FLOAT", {"default": 1.0, "min": 0.1, "max": 20.0, "step": 0.01}], "scale_steps": ["INT", {"default": -1, "min": -1, "max": 1000, "step": 1}], "upscale_method": ["COMBO", {"multiselect": false, "options": ["bislerp", "nearest-exact", "bilinear", "area", "bicubic"]}]}}, "input_order": {"required": ["scale_ratio", "scale_steps", "upscale_method"]}, "output": ["SAMPLER"], "output_is_list": [false], "output_name": ["SAMPLER"], "output_tooltips": [null], "name": "SamplerLCMUpscale", "display_name": null, "description": "", "python_module": "comfy_extras.nodes_advanced_samplers", "category": "sampling/custom_sampling/samplers", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "SamplerEulerCFGpp": {"input": {"required": {"version": ["COMBO", {"multiselect": false, "options": ["regular", "alternative"]}]}}, "input_order": {"required": ["version"]}, "output": ["SAMPLER"], "output_is_list": [false], "output_name": ["SAMPLER"], "output_tooltips": [null], "name": "SamplerEulerCFGpp", "display_name": "SamplerEulerCFG++", "description": "", "python_module": "comfy_extras.nodes_advanced_samplers", "category": "_for_testing", "output_node": false, "deprecated": false, "experimental": true, "api_node": false}, "WebcamCapture": {"input": {"required": {"image": ["WEBCAM", {}], "width": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 1}], "height": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 1}], "capture_on_queue": ["BOOLEAN", {"default": true}]}}, "input_order": {"required": ["image", "width", "height", "capture_on_queue"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "WebcamCapture", "display_name": "Webcam Capture", "description": "", "python_module": "comfy_extras.nodes_webcam", "category": "image", "output_node": false}, "EmptyLatentAudio": {"input": {"required": {"seconds": ["FLOAT", {"default": 47.6, "min": 1.0, "max": 1000.0, "step": 0.1}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096, "tooltip": "The number of latent images in the batch."}]}}, "input_order": {"required": ["seconds", "batch_size"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "EmptyLatentAudio", "display_name": "Empty Latent Audio", "description": "", "python_module": "comfy_extras.nodes_audio", "category": "latent/audio", "output_node": false}, "VAEEncodeAudio": {"input": {"required": {"audio": ["AUDIO"], "vae": ["VAE"]}}, "input_order": {"required": ["audio", "vae"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "VAEEncodeAudio", "display_name": "VAE Encode Audio", "description": "", "python_module": "comfy_extras.nodes_audio", "category": "latent/audio", "output_node": false}, "VAEDecodeAudio": {"input": {"required": {"samples": ["LATENT"], "vae": ["VAE"]}}, "input_order": {"required": ["samples", "vae"]}, "output": ["AUDIO"], "output_is_list": [false], "output_name": ["AUDIO"], "name": "VAEDecodeAudio", "display_name": "VAE Decode Audio", "description": "", "python_module": "comfy_extras.nodes_audio", "category": "latent/audio", "output_node": false}, "SaveAudio": {"input": {"required": {"audio": ["AUDIO"], "filename_prefix": ["STRING", {"default": "audio/ComfyUI"}]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["audio", "filename_prefix"], "hidden": ["prompt", "extra_pnginfo"]}, "output": [], "output_is_list": [], "output_name": [], "name": "SaveAudio", "display_name": "Save Audio (FLAC)", "description": "", "python_module": "comfy_extras.nodes_audio", "category": "audio", "output_node": true}, "SaveAudioMP3": {"input": {"required": {"audio": ["AUDIO"], "filename_prefix": ["STRING", {"default": "audio/ComfyUI"}], "quality": [["V0", "128k", "320k"], {"default": "V0"}]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["audio", "filename_prefix", "quality"], "hidden": ["prompt", "extra_pnginfo"]}, "output": [], "output_is_list": [], "output_name": [], "name": "SaveAudioMP3", "display_name": "Save Audio (MP3)", "description": "", "python_module": "comfy_extras.nodes_audio", "category": "audio", "output_node": true}, "SaveAudioOpus": {"input": {"required": {"audio": ["AUDIO"], "filename_prefix": ["STRING", {"default": "audio/ComfyUI"}], "quality": [["64k", "96k", "128k", "192k", "320k"], {"default": "128k"}]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["audio", "filename_prefix", "quality"], "hidden": ["prompt", "extra_pnginfo"]}, "output": [], "output_is_list": [], "output_name": [], "name": "SaveAudioOpus", "display_name": "Save Audio (Opus)", "description": "", "python_module": "comfy_extras.nodes_audio", "category": "audio", "output_node": true}, "LoadAudio": {"input": {"required": {"audio": [["06d0d6e92e43f12050a047b7e9c0ad1b280a78206072fab30c9f0556155e870b.m4a"], {"audio_upload": true}]}}, "input_order": {"required": ["audio"]}, "output": ["AUDIO"], "output_is_list": [false], "output_name": ["AUDIO"], "name": "LoadAudio", "display_name": "Load Audio", "description": "", "python_module": "comfy_extras.nodes_audio", "category": "audio", "output_node": false}, "PreviewAudio": {"input": {"required": {"audio": ["AUDIO"]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["audio"], "hidden": ["prompt", "extra_pnginfo"]}, "output": [], "output_is_list": [], "output_name": [], "name": "PreviewAudio", "display_name": "Preview Audio", "description": "", "python_module": "comfy_extras.nodes_audio", "category": "audio", "output_node": true}, "ConditioningStableAudio": {"input": {"required": {"positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "seconds_start": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1000.0, "step": 0.1}], "seconds_total": ["FLOAT", {"default": 47.0, "min": 0.0, "max": 1000.0, "step": 0.1}]}}, "input_order": {"required": ["positive", "negative", "seconds_start", "seconds_total"]}, "output": ["CONDITIONING", "CONDITIONING"], "output_is_list": [false, false], "output_name": ["positive", "negative"], "name": "ConditioningStableAudio", "display_name": "ConditioningStableAudio", "description": "", "python_module": "comfy_extras.nodes_audio", "category": "conditioning", "output_node": false}, "RecordAudio": {"input": {"required": {"audio": ["AUDIO_RECORD", {}]}}, "input_order": {"required": ["audio"]}, "output": ["AUDIO"], "output_is_list": [false], "output_name": ["AUDIO"], "name": "RecordAudio", "display_name": "Record Audio", "description": "", "python_module": "comfy_extras.nodes_audio", "category": "audio", "output_node": false}, "TripleCLIPLoader": {"input": {"required": {"clip_name1": [["clip_g.safetensors", "clip_g_hidream.safetensors", "clip_l.safetensors", "clip_l_hidream.safetensors", "llama_3.1_8b_instruct_fp8_scaled.safetensors", "t5_base.safetensors", "t5xxl_fp16.safetensors", "t5xxl_fp8_e4m3fn.safetensors", "t5xxl_fp8_e4m3fn_scaled.safetensors", "umt5_xxl_fp8_e4m3fn_scaled.safetensors"]], "clip_name2": [["clip_g.safetensors", "clip_g_hidream.safetensors", "clip_l.safetensors", "clip_l_hidream.safetensors", "llama_3.1_8b_instruct_fp8_scaled.safetensors", "t5_base.safetensors", "t5xxl_fp16.safetensors", "t5xxl_fp8_e4m3fn.safetensors", "t5xxl_fp8_e4m3fn_scaled.safetensors", "umt5_xxl_fp8_e4m3fn_scaled.safetensors"]], "clip_name3": [["clip_g.safetensors", "clip_g_hidream.safetensors", "clip_l.safetensors", "clip_l_hidream.safetensors", "llama_3.1_8b_instruct_fp8_scaled.safetensors", "t5_base.safetensors", "t5xxl_fp16.safetensors", "t5xxl_fp8_e4m3fn.safetensors", "t5xxl_fp8_e4m3fn_scaled.safetensors", "umt5_xxl_fp8_e4m3fn_scaled.safetensors"]]}}, "input_order": {"required": ["clip_name1", "clip_name2", "clip_name3"]}, "output": ["CLIP"], "output_is_list": [false], "output_name": ["CLIP"], "name": "TripleCLIPLoader", "display_name": "TripleCLIPLoader", "description": "[Recipes]\n\nsd3: clip-l, clip-g, t5", "python_module": "comfy_extras.nodes_sd3", "category": "advanced/loaders", "output_node": false}, "EmptySD3LatentImage": {"input": {"required": {"width": ["INT", {"default": 1024, "min": 16, "max": 16384, "step": 16}], "height": ["INT", {"default": 1024, "min": 16, "max": 16384, "step": 16}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096}]}}, "input_order": {"required": ["width", "height", "batch_size"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "EmptySD3LatentImage", "display_name": "EmptySD3LatentImage", "description": "", "python_module": "comfy_extras.nodes_sd3", "category": "latent/sd3", "output_node": false}, "CLIPTextEncodeSD3": {"input": {"required": {"clip": ["CLIP"], "clip_l": ["STRING", {"multiline": true, "dynamicPrompts": true}], "clip_g": ["STRING", {"multiline": true, "dynamicPrompts": true}], "t5xxl": ["STRING", {"multiline": true, "dynamicPrompts": true}], "empty_padding": [["none", "empty_prompt"]]}}, "input_order": {"required": ["clip", "clip_l", "clip_g", "t5xxl", "empty_padding"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "CLIPTextEncodeSD3", "display_name": "CLIPTextEncodeSD3", "description": "", "python_module": "comfy_extras.nodes_sd3", "category": "advanced/conditioning", "output_node": false}, "ControlNetApplySD3": {"input": {"required": {"positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "control_net": ["CONTROL_NET"], "vae": ["VAE"], "image": ["IMAGE"], "strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}], "start_percent": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.001}], "end_percent": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}]}}, "input_order": {"required": ["positive", "negative", "control_net", "vae", "image", "strength", "start_percent", "end_percent"]}, "output": ["CONDITIONING", "CONDITIONING"], "output_is_list": [false, false], "output_name": ["positive", "negative"], "name": "ControlNetApplySD3", "display_name": "Apply Controlnet with VAE", "description": "", "python_module": "comfy_extras.nodes_sd3", "category": "conditioning/controlnet", "output_node": false, "deprecated": true}, "SkipLayerGuidanceSD3": {"input": {"required": {"model": ["MODEL"], "layers": ["STRING", {"default": "7, 8, 9", "multiline": false}], "scale": ["FLOAT", {"default": 3.0, "min": 0.0, "max": 10.0, "step": 0.1}], "start_percent": ["FLOAT", {"default": 0.01, "min": 0.0, "max": 1.0, "step": 0.001}], "end_percent": ["FLOAT", {"default": 0.15, "min": 0.0, "max": 1.0, "step": 0.001}]}}, "input_order": {"required": ["model", "layers", "scale", "start_percent", "end_percent"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "SkipLayerGuidanceSD3", "display_name": "SkipLayerGuidanceSD3", "description": "Generic version of SkipLayerGuidance node that can be used on every DiT model.", "python_module": "comfy_extras.nodes_sd3", "category": "advanced/guidance", "output_node": false, "experimental": true}, "GITSScheduler": {"input": {"required": {"coeff": ["FLOAT", {"default": 1.2, "min": 0.8, "max": 1.5, "step": 0.05}], "steps": ["INT", {"default": 10, "min": 2, "max": 1000}], "denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["coeff", "steps", "denoise"]}, "output": ["SIGMAS"], "output_is_list": [false], "output_name": ["SIGMAS"], "name": "GITSScheduler", "display_name": "GITSScheduler", "description": "", "python_module": "comfy_extras.nodes_gits", "category": "sampling/custom_sampling/schedulers", "output_node": false}, "SetUnionControlNetType": {"input": {"required": {"control_net": ["CONTROL_NET"], "type": [["auto", "openpose", "depth", "hed/pidi/scribble/ted", "canny/lineart/anime_lineart/mlsd", "normal", "segment", "tile", "repaint"]]}}, "input_order": {"required": ["control_net", "type"]}, "output": ["CONTROL_NET"], "output_is_list": [false], "output_name": ["CONTROL_NET"], "name": "SetUnionControlNetType", "display_name": "SetUnionControlNetType", "description": "", "python_module": "comfy_extras.nodes_controlnet", "category": "conditioning/controlnet", "output_node": false}, "ControlNetInpaintingAliMamaApply": {"input": {"required": {"positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "control_net": ["CONTROL_NET"], "vae": ["VAE"], "image": ["IMAGE"], "mask": ["MASK"], "strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}], "start_percent": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.001}], "end_percent": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}]}}, "input_order": {"required": ["positive", "negative", "control_net", "vae", "image", "mask", "strength", "start_percent", "end_percent"]}, "output": ["CONDITIONING", "CONDITIONING"], "output_is_list": [false, false], "output_name": ["positive", "negative"], "name": "ControlNetInpaintingAliMamaApply", "display_name": "ControlNetInpaintingAliMamaApply", "description": "", "python_module": "comfy_extras.nodes_controlnet", "category": "conditioning/controlnet", "output_node": false}, "CLIPTextEncodeHunyuanDiT": {"input": {"required": {"clip": ["CLIP"], "bert": ["STRING", {"multiline": true, "dynamicPrompts": true}], "mt5xl": ["STRING", {"multiline": true, "dynamicPrompts": true}]}}, "input_order": {"required": ["clip", "bert", "mt5xl"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "CLIPTextEncodeHunyuanDiT", "display_name": "CLIPTextEncodeHunyuanDiT", "description": "", "python_module": "comfy_extras.nodes_hunyuan", "category": "advanced/conditioning", "output_node": false}, "TextEncodeHunyuanVideo_ImageToVideo": {"input": {"required": {"clip": ["CLIP"], "clip_vision_output": ["CLIP_VISION_OUTPUT"], "prompt": ["STRING", {"multiline": true, "dynamicPrompts": true}], "image_interleave": ["INT", {"default": 2, "min": 1, "max": 512, "tooltip": "How much the image influences things vs the text prompt. Higher number means more influence from the text prompt."}]}}, "input_order": {"required": ["clip", "clip_vision_output", "prompt", "image_interleave"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "TextEncodeHunyuanVideo_ImageToVideo", "display_name": "TextEncodeHunyuanVideo_ImageToVideo", "description": "", "python_module": "comfy_extras.nodes_hunyuan", "category": "advanced/conditioning", "output_node": false}, "EmptyHunyuanLatentVideo": {"input": {"required": {"width": ["INT", {"default": 848, "min": 16, "max": 16384, "step": 16}], "height": ["INT", {"default": 480, "min": 16, "max": 16384, "step": 16}], "length": ["INT", {"default": 25, "min": 1, "max": 16384, "step": 4}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096}]}}, "input_order": {"required": ["width", "height", "length", "batch_size"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "EmptyHunyuanLatentVideo", "display_name": "EmptyHunyuanLatentVideo", "description": "", "python_module": "comfy_extras.nodes_hunyuan", "category": "latent/video", "output_node": false}, "HunyuanImageToVideo": {"input": {"required": {"positive": ["CONDITIONING"], "vae": ["VAE"], "width": ["INT", {"default": 848, "min": 16, "max": 16384, "step": 16}], "height": ["INT", {"default": 480, "min": 16, "max": 16384, "step": 16}], "length": ["INT", {"default": 53, "min": 1, "max": 16384, "step": 4}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096}], "guidance_type": [["v1 (concat)", "v2 (replace)", "custom"]]}, "optional": {"start_image": ["IMAGE"]}}, "input_order": {"required": ["positive", "vae", "width", "height", "length", "batch_size", "guidance_type"], "optional": ["start_image"]}, "output": ["CONDITIONING", "LATENT"], "output_is_list": [false, false], "output_name": ["positive", "latent"], "name": "HunyuanImageToVideo", "display_name": "HunyuanImageToVideo", "description": "", "python_module": "comfy_extras.nodes_hunyuan", "category": "conditioning/video_models", "output_node": false}, "CLIPTextEncodeFlux": {"input": {"required": {"clip": ["CLIP"], "clip_l": ["STRING", {"multiline": true, "dynamicPrompts": true}], "t5xxl": ["STRING", {"multiline": true, "dynamicPrompts": true}], "guidance": ["FLOAT", {"default": 3.5, "min": 0.0, "max": 100.0, "step": 0.1}]}}, "input_order": {"required": ["clip", "clip_l", "t5xxl", "guidance"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "CLIPTextEncodeFlux", "display_name": "CLIPTextEncodeFlux", "description": "", "python_module": "comfy_extras.nodes_flux", "category": "advanced/conditioning/flux", "output_node": false}, "FluxGuidance": {"input": {"required": {"conditioning": ["CONDITIONING"], "guidance": ["FLOAT", {"default": 3.5, "min": 0.0, "max": 100.0, "step": 0.1}]}}, "input_order": {"required": ["conditioning", "guidance"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "FluxGuidance", "display_name": "FluxGuidance", "description": "", "python_module": "comfy_extras.nodes_flux", "category": "advanced/conditioning/flux", "output_node": false}, "FluxDisableGuidance": {"input": {"required": {"conditioning": ["CONDITIONING"]}}, "input_order": {"required": ["conditioning"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "FluxDisableGuidance", "display_name": "FluxDisableGuidance", "description": "This node completely disables the guidance embed on Flux and Flux like models", "python_module": "comfy_extras.nodes_flux", "category": "advanced/conditioning/flux", "output_node": false}, "FluxKontextImageScale": {"input": {"required": {"image": ["IMAGE"]}}, "input_order": {"required": ["image"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "FluxKontextImageScale", "display_name": "FluxKontextImageScale", "description": "This node resizes the image to one that is more optimal for flux kontext.", "python_module": "comfy_extras.nodes_flux", "category": "advanced/conditioning/flux", "output_node": false}, "FluxKontextMultiReferenceLatentMethod": {"input": {"required": {"conditioning": ["CONDITIONING"], "reference_latents_method": [["offset", "index", "uxo/uno"]]}}, "input_order": {"required": ["conditioning", "reference_latents_method"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "FluxKontextMultiReferenceLatentMethod", "display_name": "FluxKontextMultiReferenceLatentMethod", "description": "", "python_module": "comfy_extras.nodes_flux", "category": "advanced/conditioning/flux", "output_node": false, "experimental": true}, "LoraSave": {"input": {"required": {"filename_prefix": ["STRING", {"default": "loras/ComfyUI_extracted_lora"}], "rank": ["INT", {"default": 8, "min": 1, "max": 4096, "step": 1}], "lora_type": [["standard", "full_diff"]], "bias_diff": ["BOOLEAN", {"default": true}]}, "optional": {"model_diff": ["MODEL", {"tooltip": "The ModelSubtract output to be converted to a lora."}], "text_encoder_diff": ["CLIP", {"tooltip": "The CLIPSubtract output to be converted to a lora."}]}}, "input_order": {"required": ["filename_prefix", "rank", "lora_type", "bias_diff"], "optional": ["model_diff", "text_encoder_diff"]}, "output": [], "output_is_list": [], "output_name": [], "name": "LoraSave", "display_name": "Extract and Save Lora", "description": "", "python_module": "comfy_extras.nodes_lora_extract", "category": "_for_testing", "output_node": true}, "TorchCompileModel": {"input": {"required": {"model": ["MODEL"], "backend": [["inductor", "cudagraphs"]]}}, "input_order": {"required": ["model", "backend"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "TorchCompileModel", "display_name": "TorchCompileModel", "description": "", "python_module": "comfy_extras.nodes_torch_compile", "category": "_for_testing", "output_node": false, "experimental": true}, "EmptyMochiLatentVideo": {"input": {"required": {"width": ["INT", {"default": 848, "min": 16, "max": 16384, "step": 16}], "height": ["INT", {"default": 480, "min": 16, "max": 16384, "step": 16}], "length": ["INT", {"default": 25, "min": 7, "max": 16384, "step": 6}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096}]}}, "input_order": {"required": ["width", "height", "length", "batch_size"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "EmptyMochiLatentVideo", "display_name": "EmptyMochiLatentVideo", "description": "", "python_module": "comfy_extras.nodes_mochi", "category": "latent/video", "output_node": false}, "SkipLayerGuidanceDiT": {"input": {"required": {"model": ["MODEL"], "double_layers": ["STRING", {"default": "7, 8, 9", "multiline": false}], "single_layers": ["STRING", {"default": "7, 8, 9", "multiline": false}], "scale": ["FLOAT", {"default": 3.0, "min": 0.0, "max": 10.0, "step": 0.1}], "start_percent": ["FLOAT", {"default": 0.01, "min": 0.0, "max": 1.0, "step": 0.001}], "end_percent": ["FLOAT", {"default": 0.15, "min": 0.0, "max": 1.0, "step": 0.001}], "rescaling_scale": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 10.0, "step": 0.01}]}}, "input_order": {"required": ["model", "double_layers", "single_layers", "scale", "start_percent", "end_percent", "rescaling_scale"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "SkipLayerGuidanceDiT", "display_name": "SkipLayerGuidanceDiT", "description": "Generic version of SkipLayerGuidance node that can be used on every DiT model.", "python_module": "comfy_extras.nodes_slg", "category": "advanced/guidance", "output_node": false, "experimental": true}, "SkipLayerGuidanceDiTSimple": {"input": {"required": {"model": ["MODEL"], "double_layers": ["STRING", {"default": "7, 8, 9", "multiline": false}], "single_layers": ["STRING", {"default": "7, 8, 9", "multiline": false}], "start_percent": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.001}], "end_percent": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}]}}, "input_order": {"required": ["model", "double_layers", "single_layers", "start_percent", "end_percent"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "SkipLayerGuidanceDiTSimple", "display_name": "SkipLayerGuidanceDiTSimple", "description": "Simple version of the SkipLayerGuidanceDiT node that only modifies the uncond pass.", "python_module": "comfy_extras.nodes_slg", "category": "advanced/guidance", "output_node": false, "experimental": true}, "Mahiro": {"input": {"required": {"model": ["MODEL"]}}, "input_order": {"required": ["model"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["patched_model"], "name": "Mahiro", "display_name": "Mahiro is so cute that she deserves a better guidance function!! (\u3002\u30fb\u03c9\u30fb\u3002)", "description": "Modify the guidance to scale more on the 'direction' of the positive prompt rather than the difference between the negative prompt.", "python_module": "comfy_extras.nodes_mahiro", "category": "_for_testing", "output_node": false}, "EmptyLTXVLatentVideo": {"input": {"required": {"width": ["INT", {"default": 768, "min": 64, "max": 16384, "step": 32}], "height": ["INT", {"default": 512, "min": 64, "max": 16384, "step": 32}], "length": ["INT", {"default": 97, "min": 1, "max": 16384, "step": 8}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096}]}}, "input_order": {"required": ["width", "height", "length", "batch_size"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "EmptyLTXVLatentVideo", "display_name": "EmptyLTXVLatentVideo", "description": "", "python_module": "comfy_extras.nodes_lt", "category": "latent/video/ltxv", "output_node": false}, "LTXVImgToVideo": {"input": {"required": {"positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "vae": ["VAE"], "image": ["IMAGE"], "width": ["INT", {"default": 768, "min": 64, "max": 16384, "step": 32}], "height": ["INT", {"default": 512, "min": 64, "max": 16384, "step": 32}], "length": ["INT", {"default": 97, "min": 9, "max": 16384, "step": 8}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096}], "strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0}]}}, "input_order": {"required": ["positive", "negative", "vae", "image", "width", "height", "length", "batch_size", "strength"]}, "output": ["CONDITIONING", "CONDITIONING", "LATENT"], "output_is_list": [false, false, false], "output_name": ["positive", "negative", "latent"], "name": "LTXVImgToVideo", "display_name": "LTXVImgToVideo", "description": "", "python_module": "comfy_extras.nodes_lt", "category": "conditioning/video_models", "output_node": false}, "ModelSamplingLTXV": {"input": {"required": {"model": ["MODEL"], "max_shift": ["FLOAT", {"default": 2.05, "min": 0.0, "max": 100.0, "step": 0.01}], "base_shift": ["FLOAT", {"default": 0.95, "min": 0.0, "max": 100.0, "step": 0.01}]}, "optional": {"latent": ["LATENT"]}}, "input_order": {"required": ["model", "max_shift", "base_shift"], "optional": ["latent"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "ModelSamplingLTXV", "display_name": "ModelSamplingLTXV", "description": "", "python_module": "comfy_extras.nodes_lt", "category": "advanced/model", "output_node": false}, "LTXVConditioning": {"input": {"required": {"positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "frame_rate": ["FLOAT", {"default": 25.0, "min": 0.0, "max": 1000.0, "step": 0.01}]}}, "input_order": {"required": ["positive", "negative", "frame_rate"]}, "output": ["CONDITIONING", "CONDITIONING"], "output_is_list": [false, false], "output_name": ["positive", "negative"], "name": "LTXVConditioning", "display_name": "LTXVConditioning", "description": "", "python_module": "comfy_extras.nodes_lt", "category": "conditioning/video_models", "output_node": false}, "LTXVScheduler": {"input": {"required": {"steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "max_shift": ["FLOAT", {"default": 2.05, "min": 0.0, "max": 100.0, "step": 0.01}], "base_shift": ["FLOAT", {"default": 0.95, "min": 0.0, "max": 100.0, "step": 0.01}], "stretch": ["BOOLEAN", {"default": true, "tooltip": "Stretch the sigmas to be in the range [terminal, 1]."}], "terminal": ["FLOAT", {"default": 0.1, "min": 0.0, "max": 0.99, "step": 0.01, "tooltip": "The terminal value of the sigmas after stretching."}]}, "optional": {"latent": ["LATENT"]}}, "input_order": {"required": ["steps", "max_shift", "base_shift", "stretch", "terminal"], "optional": ["latent"]}, "output": ["SIGMAS"], "output_is_list": [false], "output_name": ["SIGMAS"], "name": "LTXVScheduler", "display_name": "LTXVScheduler", "description": "", "python_module": "comfy_extras.nodes_lt", "category": "sampling/custom_sampling/schedulers", "output_node": false}, "LTXVAddGuide": {"input": {"required": {"positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "vae": ["VAE"], "latent": ["LATENT"], "image": ["IMAGE", {"tooltip": "Image or video to condition the latent video on. Must be 8*n + 1 frames.If the video is not 8*n + 1 frames, it will be cropped to the nearest 8*n + 1 frames."}], "frame_idx": ["INT", {"default": 0, "min": -9999, "max": 9999, "tooltip": "Frame index to start the conditioning at. For single-frame images or videos with 1-8 frames, any frame_idx value is acceptable. For videos with 9+ frames, frame_idx must be divisible by 8, otherwise it will be rounded down to the nearest multiple of 8. Negative values are counted from the end of the video."}], "strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["positive", "negative", "vae", "latent", "image", "frame_idx", "strength"]}, "output": ["CONDITIONING", "CONDITIONING", "LATENT"], "output_is_list": [false, false, false], "output_name": ["positive", "negative", "latent"], "name": "LTXVAddGuide", "display_name": "LTXVAddGuide", "description": "", "python_module": "comfy_extras.nodes_lt", "category": "conditioning/video_models", "output_node": false}, "LTXVPreprocess": {"input": {"required": {"image": ["IMAGE"], "img_compression": ["INT", {"default": 35, "min": 0, "max": 100, "tooltip": "Amount of compression to apply on image."}]}}, "input_order": {"required": ["image", "img_compression"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["output_image"], "name": "LTXVPreprocess", "display_name": "LTXVPreprocess", "description": "", "python_module": "comfy_extras.nodes_lt", "category": "image", "output_node": false}, "LTXVCropGuides": {"input": {"required": {"positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "latent": ["LATENT"]}}, "input_order": {"required": ["positive", "negative", "latent"]}, "output": ["CONDITIONING", "CONDITIONING", "LATENT"], "output_is_list": [false, false, false], "output_name": ["positive", "negative", "latent"], "name": "LTXVCropGuides", "display_name": "LTXVCropGuides", "description": "", "python_module": "comfy_extras.nodes_lt", "category": "conditioning/video_models", "output_node": false}, "CreateHookLora": {"input": {"required": {"lora_name": [["Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "strength_model": ["FLOAT", {"default": 1.0, "min": -20.0, "max": 20.0, "step": 0.01}], "strength_clip": ["FLOAT", {"default": 1.0, "min": -20.0, "max": 20.0, "step": 0.01}]}, "optional": {"prev_hooks": ["HOOKS"]}}, "input_order": {"required": ["lora_name", "strength_model", "strength_clip"], "optional": ["prev_hooks"]}, "output": ["HOOKS"], "output_is_list": [false], "output_name": ["HOOKS"], "name": "CreateHookLora", "display_name": "Create Hook LoRA", "description": "", "python_module": "comfy_extras.nodes_hooks", "category": "advanced/hooks/create", "output_node": false, "experimental": true}, "CreateHookLoraModelOnly": {"input": {"required": {"lora_name": [["Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "strength_model": ["FLOAT", {"default": 1.0, "min": -20.0, "max": 20.0, "step": 0.01}]}, "optional": {"prev_hooks": ["HOOKS"]}}, "input_order": {"required": ["lora_name", "strength_model"], "optional": ["prev_hooks"]}, "output": ["HOOKS"], "output_is_list": [false], "output_name": ["HOOKS"], "name": "CreateHookLoraModelOnly", "display_name": "Create Hook LoRA (MO)", "description": "", "python_module": "comfy_extras.nodes_hooks", "category": "advanced/hooks/create", "output_node": false, "experimental": true}, "CreateHookModelAsLora": {"input": {"required": {"ckpt_name": [["3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"]], "strength_model": ["FLOAT", {"default": 1.0, "min": -20.0, "max": 20.0, "step": 0.01}], "strength_clip": ["FLOAT", {"default": 1.0, "min": -20.0, "max": 20.0, "step": 0.01}]}, "optional": {"prev_hooks": ["HOOKS"]}}, "input_order": {"required": ["ckpt_name", "strength_model", "strength_clip"], "optional": ["prev_hooks"]}, "output": ["HOOKS"], "output_is_list": [false], "output_name": ["HOOKS"], "name": "CreateHookModelAsLora", "display_name": "Create Hook Model as LoRA", "description": "", "python_module": "comfy_extras.nodes_hooks", "category": "advanced/hooks/create", "output_node": false, "experimental": true}, "CreateHookModelAsLoraModelOnly": {"input": {"required": {"ckpt_name": [["3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"]], "strength_model": ["FLOAT", {"default": 1.0, "min": -20.0, "max": 20.0, "step": 0.01}]}, "optional": {"prev_hooks": ["HOOKS"]}}, "input_order": {"required": ["ckpt_name", "strength_model"], "optional": ["prev_hooks"]}, "output": ["HOOKS"], "output_is_list": [false], "output_name": ["HOOKS"], "name": "CreateHookModelAsLoraModelOnly", "display_name": "Create Hook Model as LoRA (MO)", "description": "", "python_module": "comfy_extras.nodes_hooks", "category": "advanced/hooks/create", "output_node": false, "experimental": true}, "SetHookKeyframes": {"input": {"required": {"hooks": ["HOOKS"]}, "optional": {"hook_kf": ["HOOK_KEYFRAMES"]}}, "input_order": {"required": ["hooks"], "optional": ["hook_kf"]}, "output": ["HOOKS"], "output_is_list": [false], "output_name": ["HOOKS"], "name": "SetHookKeyframes", "display_name": "Set Hook Keyframes", "description": "", "python_module": "comfy_extras.nodes_hooks", "category": "advanced/hooks/scheduling", "output_node": false, "experimental": true}, "CreateHookKeyframe": {"input": {"required": {"strength_mult": ["FLOAT", {"default": 1.0, "min": -20.0, "max": 20.0, "step": 0.01}], "start_percent": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.001}]}, "optional": {"prev_hook_kf": ["HOOK_KEYFRAMES"]}}, "input_order": {"required": ["strength_mult", "start_percent"], "optional": ["prev_hook_kf"]}, "output": ["HOOK_KEYFRAMES"], "output_is_list": [false], "output_name": ["HOOK_KF"], "name": "CreateHookKeyframe", "display_name": "Create Hook Keyframe", "description": "", "python_module": "comfy_extras.nodes_hooks", "category": "advanced/hooks/scheduling", "output_node": false, "experimental": true}, "CreateHookKeyframesInterpolated": {"input": {"required": {"strength_start": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.001}], "strength_end": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.001}], "interpolation": [["linear", "ease_in", "ease_out", "ease_in_out"]], "start_percent": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.001}], "end_percent": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}], "keyframes_count": ["INT", {"default": 5, "min": 2, "max": 100, "step": 1}], "print_keyframes": ["BOOLEAN", {"default": false}]}, "optional": {"prev_hook_kf": ["HOOK_KEYFRAMES"]}}, "input_order": {"required": ["strength_start", "strength_end", "interpolation", "start_percent", "end_percent", "keyframes_count", "print_keyframes"], "optional": ["prev_hook_kf"]}, "output": ["HOOK_KEYFRAMES"], "output_is_list": [false], "output_name": ["HOOK_KF"], "name": "CreateHookKeyframesInterpolated", "display_name": "Create Hook Keyframes Interp.", "description": "", "python_module": "comfy_extras.nodes_hooks", "category": "advanced/hooks/scheduling", "output_node": false, "experimental": true}, "CreateHookKeyframesFromFloats": {"input": {"required": {"floats_strength": ["FLOATS", {"default": -1, "min": -1, "step": 0.001, "forceInput": true}], "start_percent": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.001}], "end_percent": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}], "print_keyframes": ["BOOLEAN", {"default": false}]}, "optional": {"prev_hook_kf": ["HOOK_KEYFRAMES"]}}, "input_order": {"required": ["floats_strength", "start_percent", "end_percent", "print_keyframes"], "optional": ["prev_hook_kf"]}, "output": ["HOOK_KEYFRAMES"], "output_is_list": [false], "output_name": ["HOOK_KF"], "name": "CreateHookKeyframesFromFloats", "display_name": "Create Hook Keyframes From Floats", "description": "", "python_module": "comfy_extras.nodes_hooks", "category": "advanced/hooks/scheduling", "output_node": false, "experimental": true}, "CombineHooks2": {"input": {"required": {}, "optional": {"hooks_A": ["HOOKS"], "hooks_B": ["HOOKS"]}}, "input_order": {"required": [], "optional": ["hooks_A", "hooks_B"]}, "output": ["HOOKS"], "output_is_list": [false], "output_name": ["HOOKS"], "name": "CombineHooks2", "display_name": "Combine Hooks [2]", "description": "", "python_module": "comfy_extras.nodes_hooks", "category": "advanced/hooks/combine", "output_node": false, "experimental": true}, "CombineHooks4": {"input": {"required": {}, "optional": {"hooks_A": ["HOOKS"], "hooks_B": ["HOOKS"], "hooks_C": ["HOOKS"], "hooks_D": ["HOOKS"]}}, "input_order": {"required": [], "optional": ["hooks_A", "hooks_B", "hooks_C", "hooks_D"]}, "output": ["HOOKS"], "output_is_list": [false], "output_name": ["HOOKS"], "name": "CombineHooks4", "display_name": "Combine Hooks [4]", "description": "", "python_module": "comfy_extras.nodes_hooks", "category": "advanced/hooks/combine", "output_node": false, "experimental": true}, "CombineHooks8": {"input": {"required": {}, "optional": {"hooks_A": ["HOOKS"], "hooks_B": ["HOOKS"], "hooks_C": ["HOOKS"], "hooks_D": ["HOOKS"], "hooks_E": ["HOOKS"], "hooks_F": ["HOOKS"], "hooks_G": ["HOOKS"], "hooks_H": ["HOOKS"]}}, "input_order": {"required": [], "optional": ["hooks_A", "hooks_B", "hooks_C", "hooks_D", "hooks_E", "hooks_F", "hooks_G", "hooks_H"]}, "output": ["HOOKS"], "output_is_list": [false], "output_name": ["HOOKS"], "name": "CombineHooks8", "display_name": "Combine Hooks [8]", "description": "", "python_module": "comfy_extras.nodes_hooks", "category": "advanced/hooks/combine", "output_node": false, "experimental": true}, "ConditioningSetProperties": {"input": {"required": {"cond_NEW": ["CONDITIONING"], "strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}], "set_cond_area": [["default", "mask bounds"]]}, "optional": {"mask": ["MASK"], "hooks": ["HOOKS"], "timesteps": ["TIMESTEPS_RANGE"]}}, "input_order": {"required": ["cond_NEW", "strength", "set_cond_area"], "optional": ["mask", "hooks", "timesteps"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "ConditioningSetProperties", "display_name": "Cond Set Props", "description": "", "python_module": "comfy_extras.nodes_hooks", "category": "advanced/hooks/cond single", "output_node": false, "experimental": true}, "ConditioningSetPropertiesAndCombine": {"input": {"required": {"cond": ["CONDITIONING"], "cond_NEW": ["CONDITIONING"], "strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}], "set_cond_area": [["default", "mask bounds"]]}, "optional": {"mask": ["MASK"], "hooks": ["HOOKS"], "timesteps": ["TIMESTEPS_RANGE"]}}, "input_order": {"required": ["cond", "cond_NEW", "strength", "set_cond_area"], "optional": ["mask", "hooks", "timesteps"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "ConditioningSetPropertiesAndCombine", "display_name": "Cond Set Props Combine", "description": "", "python_module": "comfy_extras.nodes_hooks", "category": "advanced/hooks/cond single", "output_node": false, "experimental": true}, "PairConditioningSetProperties": {"input": {"required": {"positive_NEW": ["CONDITIONING"], "negative_NEW": ["CONDITIONING"], "strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}], "set_cond_area": [["default", "mask bounds"]]}, "optional": {"mask": ["MASK"], "hooks": ["HOOKS"], "timesteps": ["TIMESTEPS_RANGE"]}}, "input_order": {"required": ["positive_NEW", "negative_NEW", "strength", "set_cond_area"], "optional": ["mask", "hooks", "timesteps"]}, "output": ["CONDITIONING", "CONDITIONING"], "output_is_list": [false, false], "output_name": ["positive", "negative"], "name": "PairConditioningSetProperties", "display_name": "Cond Pair Set Props", "description": "", "python_module": "comfy_extras.nodes_hooks", "category": "advanced/hooks/cond pair", "output_node": false, "experimental": true}, "PairConditioningSetPropertiesAndCombine": {"input": {"required": {"positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "positive_NEW": ["CONDITIONING"], "negative_NEW": ["CONDITIONING"], "strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}], "set_cond_area": [["default", "mask bounds"]]}, "optional": {"mask": ["MASK"], "hooks": ["HOOKS"], "timesteps": ["TIMESTEPS_RANGE"]}}, "input_order": {"required": ["positive", "negative", "positive_NEW", "negative_NEW", "strength", "set_cond_area"], "optional": ["mask", "hooks", "timesteps"]}, "output": ["CONDITIONING", "CONDITIONING"], "output_is_list": [false, false], "output_name": ["positive", "negative"], "name": "PairConditioningSetPropertiesAndCombine", "display_name": "Cond Pair Set Props Combine", "description": "", "python_module": "comfy_extras.nodes_hooks", "category": "advanced/hooks/cond pair", "output_node": false, "experimental": true}, "ConditioningSetDefaultCombine": {"input": {"required": {"cond": ["CONDITIONING"], "cond_DEFAULT": ["CONDITIONING"]}, "optional": {"hooks": ["HOOKS"]}}, "input_order": {"required": ["cond", "cond_DEFAULT"], "optional": ["hooks"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "ConditioningSetDefaultCombine", "display_name": "Cond Set Default Combine", "description": "", "python_module": "comfy_extras.nodes_hooks", "category": "advanced/hooks/cond single", "output_node": false, "experimental": true}, "PairConditioningSetDefaultCombine": {"input": {"required": {"positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "positive_DEFAULT": ["CONDITIONING"], "negative_DEFAULT": ["CONDITIONING"]}, "optional": {"hooks": ["HOOKS"]}}, "input_order": {"required": ["positive", "negative", "positive_DEFAULT", "negative_DEFAULT"], "optional": ["hooks"]}, "output": ["CONDITIONING", "CONDITIONING"], "output_is_list": [false, false], "output_name": ["positive", "negative"], "name": "PairConditioningSetDefaultCombine", "display_name": "Cond Pair Set Default Combine", "description": "", "python_module": "comfy_extras.nodes_hooks", "category": "advanced/hooks/cond pair", "output_node": false, "experimental": true}, "PairConditioningCombine": {"input": {"required": {"positive_A": ["CONDITIONING"], "negative_A": ["CONDITIONING"], "positive_B": ["CONDITIONING"], "negative_B": ["CONDITIONING"]}}, "input_order": {"required": ["positive_A", "negative_A", "positive_B", "negative_B"]}, "output": ["CONDITIONING", "CONDITIONING"], "output_is_list": [false, false], "output_name": ["positive", "negative"], "name": "PairConditioningCombine", "display_name": "Cond Pair Combine", "description": "", "python_module": "comfy_extras.nodes_hooks", "category": "advanced/hooks/cond pair", "output_node": false, "experimental": true}, "SetClipHooks": {"input": {"required": {"clip": ["CLIP"], "apply_to_conds": ["BOOLEAN", {"default": true}], "schedule_clip": ["BOOLEAN", {"default": false}]}, "optional": {"hooks": ["HOOKS"]}}, "input_order": {"required": ["clip", "apply_to_conds", "schedule_clip"], "optional": ["hooks"]}, "output": ["CLIP"], "output_is_list": [false], "output_name": ["CLIP"], "name": "SetClipHooks", "display_name": "Set CLIP Hooks", "description": "", "python_module": "comfy_extras.nodes_hooks", "category": "advanced/hooks/clip", "output_node": false, "experimental": true}, "ConditioningTimestepsRange": {"input": {"required": {"start_percent": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.001}], "end_percent": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}]}}, "input_order": {"required": ["start_percent", "end_percent"]}, "output": ["TIMESTEPS_RANGE", "TIMESTEPS_RANGE", "TIMESTEPS_RANGE"], "output_is_list": [false, false, false], "output_name": ["TIMESTEPS_RANGE", "BEFORE_RANGE", "AFTER_RANGE"], "name": "ConditioningTimestepsRange", "display_name": "Timesteps Range", "description": "", "python_module": "comfy_extras.nodes_hooks", "category": "advanced/hooks", "output_node": false, "experimental": true}, "Load3D": {"input": {"required": {"model_file": [[], {"file_upload": true}], "image": ["LOAD_3D", {}], "width": ["INT", {"default": 1024, "min": 1, "max": 4096, "step": 1}], "height": ["INT", {"default": 1024, "min": 1, "max": 4096, "step": 1}]}}, "input_order": {"required": ["model_file", "image", "width", "height"]}, "output": ["IMAGE", "MASK", "STRING", "IMAGE", "IMAGE", "LOAD3D_CAMERA", "VIDEO"], "output_is_list": [false, false, false, false, false, false, false], "output_name": ["image", "mask", "mesh_path", "normal", "lineart", "camera_info", "recording_video"], "name": "Load3D", "display_name": "Load 3D", "description": "", "python_module": "comfy_extras.nodes_load_3d", "category": "3d", "output_node": false, "experimental": true}, "Load3DAnimation": {"input": {"required": {"model_file": [[], {"file_upload": true}], "image": ["LOAD_3D_ANIMATION", {}], "width": ["INT", {"default": 1024, "min": 1, "max": 4096, "step": 1}], "height": ["INT", {"default": 1024, "min": 1, "max": 4096, "step": 1}]}}, "input_order": {"required": ["model_file", "image", "width", "height"]}, "output": ["IMAGE", "MASK", "STRING", "IMAGE", "LOAD3D_CAMERA", "VIDEO"], "output_is_list": [false, false, false, false, false, false], "output_name": ["image", "mask", "mesh_path", "normal", "camera_info", "recording_video"], "name": "Load3DAnimation", "display_name": "Load 3D - Animation", "description": "", "python_module": "comfy_extras.nodes_load_3d", "category": "3d", "output_node": false, "experimental": true}, "Preview3D": {"input": {"required": {"model_file": ["STRING", {"default": "", "multiline": false}]}, "optional": {"camera_info": ["LOAD3D_CAMERA", {}]}}, "input_order": {"required": ["model_file"], "optional": ["camera_info"]}, "output": [], "output_is_list": [], "output_name": [], "name": "Preview3D", "display_name": "Preview 3D", "description": "", "python_module": "comfy_extras.nodes_load_3d", "category": "3d", "output_node": true, "experimental": true}, "Preview3DAnimation": {"input": {"required": {"model_file": ["STRING", {"default": "", "multiline": false}]}, "optional": {"camera_info": ["LOAD3D_CAMERA", {}]}}, "input_order": {"required": ["model_file"], "optional": ["camera_info"]}, "output": [], "output_is_list": [], "output_name": [], "name": "Preview3DAnimation", "display_name": "Preview 3D - Animation", "description": "", "python_module": "comfy_extras.nodes_load_3d", "category": "3d", "output_node": true, "experimental": true}, "EmptyCosmosLatentVideo": {"input": {"required": {"width": ["INT", {"default": 1280, "min": 16, "max": 16384, "step": 16}], "height": ["INT", {"default": 704, "min": 16, "max": 16384, "step": 16}], "length": ["INT", {"default": 121, "min": 1, "max": 16384, "step": 8}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096}]}}, "input_order": {"required": ["width", "height", "length", "batch_size"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "EmptyCosmosLatentVideo", "display_name": "EmptyCosmosLatentVideo", "description": "", "python_module": "comfy_extras.nodes_cosmos", "category": "latent/video", "output_node": false}, "CosmosImageToVideoLatent": {"input": {"required": {"vae": ["VAE"], "width": ["INT", {"default": 1280, "min": 16, "max": 16384, "step": 16}], "height": ["INT", {"default": 704, "min": 16, "max": 16384, "step": 16}], "length": ["INT", {"default": 121, "min": 1, "max": 16384, "step": 8}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096}]}, "optional": {"start_image": ["IMAGE"], "end_image": ["IMAGE"]}}, "input_order": {"required": ["vae", "width", "height", "length", "batch_size"], "optional": ["start_image", "end_image"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "CosmosImageToVideoLatent", "display_name": "CosmosImageToVideoLatent", "description": "", "python_module": "comfy_extras.nodes_cosmos", "category": "conditioning/inpaint", "output_node": false}, "CosmosPredict2ImageToVideoLatent": {"input": {"required": {"vae": ["VAE"], "width": ["INT", {"default": 848, "min": 16, "max": 16384, "step": 16}], "height": ["INT", {"default": 480, "min": 16, "max": 16384, "step": 16}], "length": ["INT", {"default": 93, "min": 1, "max": 16384, "step": 4}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096}]}, "optional": {"start_image": ["IMAGE"], "end_image": ["IMAGE"]}}, "input_order": {"required": ["vae", "width", "height", "length", "batch_size"], "optional": ["start_image", "end_image"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "CosmosPredict2ImageToVideoLatent", "display_name": "CosmosPredict2ImageToVideoLatent", "description": "", "python_module": "comfy_extras.nodes_cosmos", "category": "conditioning/inpaint", "output_node": false}, "SaveWEBM": {"input": {"required": {"images": ["IMAGE", {}], "filename_prefix": ["STRING", {"default": "ComfyUI", "multiline": false}], "codec": ["COMBO", {"multiselect": false, "options": ["vp9", "av1"]}], "fps": ["FLOAT", {"default": 24.0, "min": 0.01, "max": 1000.0, "step": 0.01}], "crf": ["FLOAT", {"tooltip": "Higher crf means lower quality with a smaller file size, lower crf means higher quality higher filesize.", "default": 32.0, "min": 0, "max": 63.0, "step": 1}]}, "hidden": {"prompt": ["PROMPT"], "extra_pnginfo": ["EXTRA_PNGINFO"]}}, "input_order": {"required": ["images", "filename_prefix", "codec", "fps", "crf"], "hidden": ["prompt", "extra_pnginfo"]}, "output": [], "output_is_list": [], "output_name": [], "output_tooltips": [], "name": "SaveWEBM", "display_name": null, "description": "", "python_module": "comfy_extras.nodes_video", "category": "image/video", "output_node": true, "deprecated": false, "experimental": true, "api_node": false}, "SaveVideo": {"input": {"required": {"video": ["VIDEO", {"tooltip": "The video to save."}], "filename_prefix": ["STRING", {"tooltip": "The prefix for the file to save. This may include formatting information such as %date:yyyy-MM-dd% or %Empty Latent Image.width% to include values from nodes.", "default": "video/ComfyUI", "multiline": false}], "format": ["COMBO", {"tooltip": "The format to save the video as.", "default": "auto", "multiselect": false, "options": ["auto", "mp4"]}], "codec": ["COMBO", {"tooltip": "The codec to use for the video.", "default": "auto", "multiselect": false, "options": ["auto", "h264"]}]}, "hidden": {"prompt": ["PROMPT"], "extra_pnginfo": ["EXTRA_PNGINFO"]}}, "input_order": {"required": ["video", "filename_prefix", "format", "codec"], "hidden": ["prompt", "extra_pnginfo"]}, "output": [], "output_is_list": [], "output_name": [], "output_tooltips": [], "name": "SaveVideo", "display_name": "Save Video", "description": "Saves the input images to your ComfyUI output directory.", "python_module": "comfy_extras.nodes_video", "category": "image/video", "output_node": true, "deprecated": false, "experimental": false, "api_node": false}, "CreateVideo": {"input": {"required": {"images": ["IMAGE", {"tooltip": "The images to create a video from."}], "fps": ["FLOAT", {"default": 30.0, "min": 1.0, "max": 120.0, "step": 1.0}]}, "optional": {"audio": ["AUDIO", {"tooltip": "The audio to add to the video."}]}}, "input_order": {"required": ["images", "fps"], "optional": ["audio"]}, "output": ["VIDEO"], "output_is_list": [false], "output_name": ["VIDEO"], "output_tooltips": [null], "name": "CreateVideo", "display_name": "Create Video", "description": "Create a video from images.", "python_module": "comfy_extras.nodes_video", "category": "image/video", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "GetVideoComponents": {"input": {"required": {"video": ["VIDEO", {"tooltip": "The video to extract components from."}]}}, "input_order": {"required": ["video"]}, "output": ["IMAGE", "AUDIO", "FLOAT"], "output_is_list": [false, false, false], "output_name": ["images", "audio", "fps"], "output_tooltips": [null, null, null], "name": "GetVideoComponents", "display_name": "Get Video Components", "description": "Extracts all components from a video: frames, audio, and framerate.", "python_module": "comfy_extras.nodes_video", "category": "image/video", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "LoadVideo": {"input": {"required": {"file": ["COMBO", {"multiselect": false, "options": [], "video_upload": true}]}}, "input_order": {"required": ["file"]}, "output": ["VIDEO"], "output_is_list": [false], "output_name": ["VIDEO"], "output_tooltips": [null], "name": "LoadVideo", "display_name": "Load Video", "description": "", "python_module": "comfy_extras.nodes_video", "category": "image/video", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "CLIPTextEncodeLumina2": {"input": {"required": {"system_prompt": [["superior", "alignment"], {"tooltip": "Lumina2 provide two types of system prompts:Superior: You are an assistant designed to generate superior images with the superior degree of image-text alignment based on textual prompts or user prompts. Alignment: You are an assistant designed to generate high-quality images with the highest degree of image-text alignment based on textual prompts."}], "user_prompt": ["STRING", {"multiline": true, "dynamicPrompts": true, "tooltip": "The text to be encoded."}], "clip": ["CLIP", {"tooltip": "The CLIP model used for encoding the text."}]}}, "input_order": {"required": ["system_prompt", "user_prompt", "clip"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "CLIPTextEncodeLumina2", "display_name": "CLIP Text Encode for Lumina2", "description": "Encodes a system prompt and a user prompt using a CLIP model into an embedding that can be used to guide the diffusion model towards generating specific images.", "python_module": "comfy_extras.nodes_lumina2", "category": "conditioning", "output_node": false, "output_tooltips": ["A conditioning containing the embedded text used to guide the diffusion model."]}, "RenormCFG": {"input": {"required": {"model": ["MODEL"], "cfg_trunc": ["FLOAT", {"default": 100, "min": 0.0, "max": 100.0, "step": 0.01}], "renorm_cfg": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 100.0, "step": 0.01}]}}, "input_order": {"required": ["model", "cfg_trunc", "renorm_cfg"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "RenormCFG", "display_name": "RenormCFG", "description": "", "python_module": "comfy_extras.nodes_lumina2", "category": "advanced/model", "output_node": false}, "WanTrackToVideo": {"input": {"required": {"positive": ["CONDITIONING", {}], "negative": ["CONDITIONING", {}], "vae": ["VAE", {}], "tracks": ["STRING", {"default": "[]", "multiline": true}], "width": ["INT", {"default": 832, "min": 16, "max": 16384, "step": 16}], "height": ["INT", {"default": 480, "min": 16, "max": 16384, "step": 16}], "length": ["INT", {"default": 81, "min": 1, "max": 16384, "step": 4}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096}], "temperature": ["FLOAT", {"default": 220.0, "min": 1.0, "max": 1000.0, "step": 0.1}], "topk": ["INT", {"default": 2, "min": 1, "max": 10}], "start_image": ["IMAGE", {}]}, "optional": {"clip_vision_output": ["CLIP_VISION_OUTPUT", {}]}}, "input_order": {"required": ["positive", "negative", "vae", "tracks", "width", "height", "length", "batch_size", "temperature", "topk", "start_image"], "optional": ["clip_vision_output"]}, "output": ["CONDITIONING", "CONDITIONING", "LATENT"], "output_is_list": [false, false, false], "output_name": ["positive", "negative", "latent"], "output_tooltips": [null, null, null], "name": "WanTrackToVideo", "display_name": null, "description": "", "python_module": "comfy_extras.nodes_wan", "category": "conditioning/video_models", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "WanImageToVideo": {"input": {"required": {"positive": ["CONDITIONING", {}], "negative": ["CONDITIONING", {}], "vae": ["VAE", {}], "width": ["INT", {"default": 832, "min": 16, "max": 16384, "step": 16}], "height": ["INT", {"default": 480, "min": 16, "max": 16384, "step": 16}], "length": ["INT", {"default": 81, "min": 1, "max": 16384, "step": 4}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096}]}, "optional": {"clip_vision_output": ["CLIP_VISION_OUTPUT", {}], "start_image": ["IMAGE", {}]}}, "input_order": {"required": ["positive", "negative", "vae", "width", "height", "length", "batch_size"], "optional": ["clip_vision_output", "start_image"]}, "output": ["CONDITIONING", "CONDITIONING", "LATENT"], "output_is_list": [false, false, false], "output_name": ["positive", "negative", "latent"], "output_tooltips": [null, null, null], "name": "WanImageToVideo", "display_name": null, "description": "", "python_module": "comfy_extras.nodes_wan", "category": "conditioning/video_models", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "WanFunControlToVideo": {"input": {"required": {"positive": ["CONDITIONING", {}], "negative": ["CONDITIONING", {}], "vae": ["VAE", {}], "width": ["INT", {"default": 832, "min": 16, "max": 16384, "step": 16}], "height": ["INT", {"default": 480, "min": 16, "max": 16384, "step": 16}], "length": ["INT", {"default": 81, "min": 1, "max": 16384, "step": 4}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096}]}, "optional": {"clip_vision_output": ["CLIP_VISION_OUTPUT", {}], "start_image": ["IMAGE", {}], "control_video": ["IMAGE", {}]}}, "input_order": {"required": ["positive", "negative", "vae", "width", "height", "length", "batch_size"], "optional": ["clip_vision_output", "start_image", "control_video"]}, "output": ["CONDITIONING", "CONDITIONING", "LATENT"], "output_is_list": [false, false, false], "output_name": ["positive", "negative", "latent"], "output_tooltips": [null, null, null], "name": "WanFunControlToVideo", "display_name": null, "description": "", "python_module": "comfy_extras.nodes_wan", "category": "conditioning/video_models", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "Wan22FunControlToVideo": {"input": {"required": {"positive": ["CONDITIONING", {}], "negative": ["CONDITIONING", {}], "vae": ["VAE", {}], "width": ["INT", {"default": 832, "min": 16, "max": 16384, "step": 16}], "height": ["INT", {"default": 480, "min": 16, "max": 16384, "step": 16}], "length": ["INT", {"default": 81, "min": 1, "max": 16384, "step": 4}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096}]}, "optional": {"ref_image": ["IMAGE", {}], "control_video": ["IMAGE", {}]}}, "input_order": {"required": ["positive", "negative", "vae", "width", "height", "length", "batch_size"], "optional": ["ref_image", "control_video"]}, "output": ["CONDITIONING", "CONDITIONING", "LATENT"], "output_is_list": [false, false, false], "output_name": ["positive", "negative", "latent"], "output_tooltips": [null, null, null], "name": "Wan22FunControlToVideo", "display_name": null, "description": "", "python_module": "comfy_extras.nodes_wan", "category": "conditioning/video_models", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "WanFunInpaintToVideo": {"input": {"required": {"positive": ["CONDITIONING", {}], "negative": ["CONDITIONING", {}], "vae": ["VAE", {}], "width": ["INT", {"default": 832, "min": 16, "max": 16384, "step": 16}], "height": ["INT", {"default": 480, "min": 16, "max": 16384, "step": 16}], "length": ["INT", {"default": 81, "min": 1, "max": 16384, "step": 4}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096}]}, "optional": {"clip_vision_output": ["CLIP_VISION_OUTPUT", {}], "start_image": ["IMAGE", {}], "end_image": ["IMAGE", {}]}}, "input_order": {"required": ["positive", "negative", "vae", "width", "height", "length", "batch_size"], "optional": ["clip_vision_output", "start_image", "end_image"]}, "output": ["CONDITIONING", "CONDITIONING", "LATENT"], "output_is_list": [false, false, false], "output_name": ["positive", "negative", "latent"], "output_tooltips": [null, null, null], "name": "WanFunInpaintToVideo", "display_name": null, "description": "", "python_module": "comfy_extras.nodes_wan", "category": "conditioning/video_models", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "WanFirstLastFrameToVideo": {"input": {"required": {"positive": ["CONDITIONING", {}], "negative": ["CONDITIONING", {}], "vae": ["VAE", {}], "width": ["INT", {"default": 832, "min": 16, "max": 16384, "step": 16}], "height": ["INT", {"default": 480, "min": 16, "max": 16384, "step": 16}], "length": ["INT", {"default": 81, "min": 1, "max": 16384, "step": 4}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096}]}, "optional": {"clip_vision_start_image": ["CLIP_VISION_OUTPUT", {}], "clip_vision_end_image": ["CLIP_VISION_OUTPUT", {}], "start_image": ["IMAGE", {}], "end_image": ["IMAGE", {}]}}, "input_order": {"required": ["positive", "negative", "vae", "width", "height", "length", "batch_size"], "optional": ["clip_vision_start_image", "clip_vision_end_image", "start_image", "end_image"]}, "output": ["CONDITIONING", "CONDITIONING", "LATENT"], "output_is_list": [false, false, false], "output_name": ["positive", "negative", "latent"], "output_tooltips": [null, null, null], "name": "WanFirstLastFrameToVideo", "display_name": null, "description": "", "python_module": "comfy_extras.nodes_wan", "category": "conditioning/video_models", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "WanVaceToVideo": {"input": {"required": {"positive": ["CONDITIONING", {}], "negative": ["CONDITIONING", {}], "vae": ["VAE", {}], "width": ["INT", {"default": 832, "min": 16, "max": 16384, "step": 16}], "height": ["INT", {"default": 480, "min": 16, "max": 16384, "step": 16}], "length": ["INT", {"default": 81, "min": 1, "max": 16384, "step": 4}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096}], "strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1000.0, "step": 0.01}]}, "optional": {"control_video": ["IMAGE", {}], "control_masks": ["MASK", {}], "reference_image": ["IMAGE", {}]}}, "input_order": {"required": ["positive", "negative", "vae", "width", "height", "length", "batch_size", "strength"], "optional": ["control_video", "control_masks", "reference_image"]}, "output": ["CONDITIONING", "CONDITIONING", "LATENT", "INT"], "output_is_list": [false, false, false, false], "output_name": ["positive", "negative", "latent", "trim_latent"], "output_tooltips": [null, null, null, null], "name": "WanVaceToVideo", "display_name": null, "description": "", "python_module": "comfy_extras.nodes_wan", "category": "conditioning/video_models", "output_node": false, "deprecated": false, "experimental": true, "api_node": false}, "TrimVideoLatent": {"input": {"required": {"samples": ["LATENT", {}], "trim_amount": ["INT", {"default": 0, "min": 0, "max": 99999}]}}, "input_order": {"required": ["samples", "trim_amount"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "output_tooltips": [null], "name": "TrimVideoLatent", "display_name": null, "description": "", "python_module": "comfy_extras.nodes_wan", "category": "latent/video", "output_node": false, "deprecated": false, "experimental": true, "api_node": false}, "WanCameraImageToVideo": {"input": {"required": {"positive": ["CONDITIONING", {}], "negative": ["CONDITIONING", {}], "vae": ["VAE", {}], "width": ["INT", {"default": 832, "min": 16, "max": 16384, "step": 16}], "height": ["INT", {"default": 480, "min": 16, "max": 16384, "step": 16}], "length": ["INT", {"default": 81, "min": 1, "max": 16384, "step": 4}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096}]}, "optional": {"clip_vision_output": ["CLIP_VISION_OUTPUT", {}], "start_image": ["IMAGE", {}], "camera_conditions": ["WAN_CAMERA_EMBEDDING", {}]}}, "input_order": {"required": ["positive", "negative", "vae", "width", "height", "length", "batch_size"], "optional": ["clip_vision_output", "start_image", "camera_conditions"]}, "output": ["CONDITIONING", "CONDITIONING", "LATENT"], "output_is_list": [false, false, false], "output_name": ["positive", "negative", "latent"], "output_tooltips": [null, null, null], "name": "WanCameraImageToVideo", "display_name": null, "description": "", "python_module": "comfy_extras.nodes_wan", "category": "conditioning/video_models", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "WanPhantomSubjectToVideo": {"input": {"required": {"positive": ["CONDITIONING", {}], "negative": ["CONDITIONING", {}], "vae": ["VAE", {}], "width": ["INT", {"default": 832, "min": 16, "max": 16384, "step": 16}], "height": ["INT", {"default": 480, "min": 16, "max": 16384, "step": 16}], "length": ["INT", {"default": 81, "min": 1, "max": 16384, "step": 4}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096}]}, "optional": {"images": ["IMAGE", {}]}}, "input_order": {"required": ["positive", "negative", "vae", "width", "height", "length", "batch_size"], "optional": ["images"]}, "output": ["CONDITIONING", "CONDITIONING", "CONDITIONING", "LATENT"], "output_is_list": [false, false, false, false], "output_name": ["positive", "negative_text", "negative_img_text", "latent"], "output_tooltips": [null, null, null, null], "name": "WanPhantomSubjectToVideo", "display_name": null, "description": "", "python_module": "comfy_extras.nodes_wan", "category": "conditioning/video_models", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "WanSoundImageToVideo": {"input": {"required": {"positive": ["CONDITIONING", {}], "negative": ["CONDITIONING", {}], "vae": ["VAE", {}], "width": ["INT", {"default": 832, "min": 16, "max": 16384, "step": 16}], "height": ["INT", {"default": 480, "min": 16, "max": 16384, "step": 16}], "length": ["INT", {"default": 77, "min": 1, "max": 16384, "step": 4}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096}]}, "optional": {"audio_encoder_output": ["AUDIO_ENCODER_OUTPUT", {}], "ref_image": ["IMAGE", {}], "control_video": ["IMAGE", {}], "ref_motion": ["IMAGE", {}]}}, "input_order": {"required": ["positive", "negative", "vae", "width", "height", "length", "batch_size"], "optional": ["audio_encoder_output", "ref_image", "control_video", "ref_motion"]}, "output": ["CONDITIONING", "CONDITIONING", "LATENT"], "output_is_list": [false, false, false], "output_name": ["positive", "negative", "latent"], "output_tooltips": [null, null, null], "name": "WanSoundImageToVideo", "display_name": null, "description": "", "python_module": "comfy_extras.nodes_wan", "category": "conditioning/video_models", "output_node": false, "deprecated": false, "experimental": true, "api_node": false}, "WanSoundImageToVideoExtend": {"input": {"required": {"positive": ["CONDITIONING", {}], "negative": ["CONDITIONING", {}], "vae": ["VAE", {}], "length": ["INT", {"default": 77, "min": 1, "max": 16384, "step": 4}], "video_latent": ["LATENT", {}]}, "optional": {"audio_encoder_output": ["AUDIO_ENCODER_OUTPUT", {}], "ref_image": ["IMAGE", {}], "control_video": ["IMAGE", {}]}}, "input_order": {"required": ["positive", "negative", "vae", "length", "video_latent"], "optional": ["audio_encoder_output", "ref_image", "control_video"]}, "output": ["CONDITIONING", "CONDITIONING", "LATENT"], "output_is_list": [false, false, false], "output_name": ["positive", "negative", "latent"], "output_tooltips": [null, null, null], "name": "WanSoundImageToVideoExtend", "display_name": null, "description": "", "python_module": "comfy_extras.nodes_wan", "category": "conditioning/video_models", "output_node": false, "deprecated": false, "experimental": true, "api_node": false}, "Wan22ImageToVideoLatent": {"input": {"required": {"vae": ["VAE", {}], "width": ["INT", {"default": 1280, "min": 32, "max": 16384, "step": 32}], "height": ["INT", {"default": 704, "min": 32, "max": 16384, "step": 32}], "length": ["INT", {"default": 49, "min": 1, "max": 16384, "step": 4}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096}]}, "optional": {"start_image": ["IMAGE", {}]}}, "input_order": {"required": ["vae", "width", "height", "length", "batch_size"], "optional": ["start_image"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "output_tooltips": [null], "name": "Wan22ImageToVideoLatent", "display_name": null, "description": "", "python_module": "comfy_extras.nodes_wan", "category": "conditioning/inpaint", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "LotusConditioning": {"input": {"required": {}}, "input_order": {"required": []}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["conditioning"], "name": "LotusConditioning", "display_name": "LotusConditioning", "description": "", "python_module": "comfy_extras.nodes_lotus", "category": "conditioning/lotus", "output_node": false}, "EmptyLatentHunyuan3Dv2": {"input": {"required": {"resolution": ["INT", {"default": 3072, "min": 1, "max": 8192}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096, "tooltip": "The number of latent images in the batch."}]}}, "input_order": {"required": ["resolution", "batch_size"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "EmptyLatentHunyuan3Dv2", "display_name": "EmptyLatentHunyuan3Dv2", "description": "", "python_module": "comfy_extras.nodes_hunyuan3d", "category": "latent/3d", "output_node": false}, "Hunyuan3Dv2Conditioning": {"input": {"required": {"clip_vision_output": ["CLIP_VISION_OUTPUT"]}}, "input_order": {"required": ["clip_vision_output"]}, "output": ["CONDITIONING", "CONDITIONING"], "output_is_list": [false, false], "output_name": ["positive", "negative"], "name": "Hunyuan3Dv2Conditioning", "display_name": "Hunyuan3Dv2Conditioning", "description": "", "python_module": "comfy_extras.nodes_hunyuan3d", "category": "conditioning/video_models", "output_node": false}, "Hunyuan3Dv2ConditioningMultiView": {"input": {"required": {}, "optional": {"front": ["CLIP_VISION_OUTPUT"], "left": ["CLIP_VISION_OUTPUT"], "back": ["CLIP_VISION_OUTPUT"], "right": ["CLIP_VISION_OUTPUT"]}}, "input_order": {"required": [], "optional": ["front", "left", "back", "right"]}, "output": ["CONDITIONING", "CONDITIONING"], "output_is_list": [false, false], "output_name": ["positive", "negative"], "name": "Hunyuan3Dv2ConditioningMultiView", "display_name": "Hunyuan3Dv2ConditioningMultiView", "description": "", "python_module": "comfy_extras.nodes_hunyuan3d", "category": "conditioning/video_models", "output_node": false}, "VAEDecodeHunyuan3D": {"input": {"required": {"samples": ["LATENT"], "vae": ["VAE"], "num_chunks": ["INT", {"default": 8000, "min": 1000, "max": 500000}], "octree_resolution": ["INT", {"default": 256, "min": 16, "max": 512}]}}, "input_order": {"required": ["samples", "vae", "num_chunks", "octree_resolution"]}, "output": ["VOXEL"], "output_is_list": [false], "output_name": ["VOXEL"], "name": "VAEDecodeHunyuan3D", "display_name": "VAEDecodeHunyuan3D", "description": "", "python_module": "comfy_extras.nodes_hunyuan3d", "category": "latent/3d", "output_node": false}, "VoxelToMeshBasic": {"input": {"required": {"voxel": ["VOXEL"], "threshold": ["FLOAT", {"default": 0.6, "min": -1.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["voxel", "threshold"]}, "output": ["MESH"], "output_is_list": [false], "output_name": ["MESH"], "name": "VoxelToMeshBasic", "display_name": "VoxelToMeshBasic", "description": "", "python_module": "comfy_extras.nodes_hunyuan3d", "category": "3d", "output_node": false}, "VoxelToMesh": {"input": {"required": {"voxel": ["VOXEL"], "algorithm": [["surface net", "basic"]], "threshold": ["FLOAT", {"default": 0.6, "min": -1.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["voxel", "algorithm", "threshold"]}, "output": ["MESH"], "output_is_list": [false], "output_name": ["MESH"], "name": "VoxelToMesh", "display_name": "VoxelToMesh", "description": "", "python_module": "comfy_extras.nodes_hunyuan3d", "category": "3d", "output_node": false}, "SaveGLB": {"input": {"required": {"mesh": ["MESH"], "filename_prefix": ["STRING", {"default": "mesh/ComfyUI"}]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["mesh", "filename_prefix"], "hidden": ["prompt", "extra_pnginfo"]}, "output": [], "output_is_list": [], "output_name": [], "name": "SaveGLB", "display_name": "SaveGLB", "description": "", "python_module": "comfy_extras.nodes_hunyuan3d", "category": "3d", "output_node": true}, "PrimitiveString": {"input": {"required": {"value": ["STRING", {"multiline": false}]}}, "input_order": {"required": ["value"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["STRING"], "output_tooltips": [null], "name": "PrimitiveString", "display_name": "String", "description": "", "python_module": "comfy_extras.nodes_primitive", "category": "utils/primitive", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "PrimitiveStringMultiline": {"input": {"required": {"value": ["STRING", {"multiline": true}]}}, "input_order": {"required": ["value"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["STRING"], "output_tooltips": [null], "name": "PrimitiveStringMultiline", "display_name": "String (Multiline)", "description": "", "python_module": "comfy_extras.nodes_primitive", "category": "utils/primitive", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "PrimitiveInt": {"input": {"required": {"value": ["INT", {"min": -9223372036854775807, "max": 9223372036854775807, "control_after_generate": true}]}}, "input_order": {"required": ["value"]}, "output": ["INT"], "output_is_list": [false], "output_name": ["INT"], "output_tooltips": [null], "name": "PrimitiveInt", "display_name": "Int", "description": "", "python_module": "comfy_extras.nodes_primitive", "category": "utils/primitive", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "PrimitiveFloat": {"input": {"required": {"value": ["FLOAT", {"min": -9223372036854775807, "max": 9223372036854775807}]}}, "input_order": {"required": ["value"]}, "output": ["FLOAT"], "output_is_list": [false], "output_name": ["FLOAT"], "output_tooltips": [null], "name": "PrimitiveFloat", "display_name": "Float", "description": "", "python_module": "comfy_extras.nodes_primitive", "category": "utils/primitive", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "PrimitiveBoolean": {"input": {"required": {"value": ["BOOLEAN", {}]}}, "input_order": {"required": ["value"]}, "output": ["BOOLEAN"], "output_is_list": [false], "output_name": ["BOOLEAN"], "output_tooltips": [null], "name": "PrimitiveBoolean", "display_name": "Boolean", "description": "", "python_module": "comfy_extras.nodes_primitive", "category": "utils/primitive", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "CFGZeroStar": {"input": {"required": {"model": ["MODEL"]}}, "input_order": {"required": ["model"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["patched_model"], "name": "CFGZeroStar", "display_name": "CFGZeroStar", "description": "", "python_module": "comfy_extras.nodes_cfg", "category": "advanced/guidance", "output_node": false}, "CFGNorm": {"input": {"required": {"model": ["MODEL"], "strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 100.0, "step": 0.01}]}}, "input_order": {"required": ["model", "strength"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["patched_model"], "name": "CFGNorm", "display_name": "CFGNorm", "description": "", "python_module": "comfy_extras.nodes_cfg", "category": "advanced/guidance", "output_node": false, "experimental": true}, "OptimalStepsScheduler": {"input": {"required": {"model_type": [["FLUX", "Wan", "Chroma"]], "steps": ["INT", {"default": 20, "min": 3, "max": 1000}], "denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["model_type", "steps", "denoise"]}, "output": ["SIGMAS"], "output_is_list": [false], "output_name": ["SIGMAS"], "name": "OptimalStepsScheduler", "display_name": "OptimalStepsScheduler", "description": "", "python_module": "comfy_extras.nodes_optimalsteps", "category": "sampling/custom_sampling/schedulers", "output_node": false}, "QuadrupleCLIPLoader": {"input": {"required": {"clip_name1": [["clip_g.safetensors", "clip_g_hidream.safetensors", "clip_l.safetensors", "clip_l_hidream.safetensors", "llama_3.1_8b_instruct_fp8_scaled.safetensors", "t5_base.safetensors", "t5xxl_fp16.safetensors", "t5xxl_fp8_e4m3fn.safetensors", "t5xxl_fp8_e4m3fn_scaled.safetensors", "umt5_xxl_fp8_e4m3fn_scaled.safetensors"]], "clip_name2": [["clip_g.safetensors", "clip_g_hidream.safetensors", "clip_l.safetensors", "clip_l_hidream.safetensors", "llama_3.1_8b_instruct_fp8_scaled.safetensors", "t5_base.safetensors", "t5xxl_fp16.safetensors", "t5xxl_fp8_e4m3fn.safetensors", "t5xxl_fp8_e4m3fn_scaled.safetensors", "umt5_xxl_fp8_e4m3fn_scaled.safetensors"]], "clip_name3": [["clip_g.safetensors", "clip_g_hidream.safetensors", "clip_l.safetensors", "clip_l_hidream.safetensors", "llama_3.1_8b_instruct_fp8_scaled.safetensors", "t5_base.safetensors", "t5xxl_fp16.safetensors", "t5xxl_fp8_e4m3fn.safetensors", "t5xxl_fp8_e4m3fn_scaled.safetensors", "umt5_xxl_fp8_e4m3fn_scaled.safetensors"]], "clip_name4": [["clip_g.safetensors", "clip_g_hidream.safetensors", "clip_l.safetensors", "clip_l_hidream.safetensors", "llama_3.1_8b_instruct_fp8_scaled.safetensors", "t5_base.safetensors", "t5xxl_fp16.safetensors", "t5xxl_fp8_e4m3fn.safetensors", "t5xxl_fp8_e4m3fn_scaled.safetensors", "umt5_xxl_fp8_e4m3fn_scaled.safetensors"]]}}, "input_order": {"required": ["clip_name1", "clip_name2", "clip_name3", "clip_name4"]}, "output": ["CLIP"], "output_is_list": [false], "output_name": ["CLIP"], "name": "QuadrupleCLIPLoader", "display_name": "QuadrupleCLIPLoader", "description": "[Recipes]\n\nhidream: long clip-l, long clip-g, t5xxl, llama_8b_3.1_instruct", "python_module": "comfy_extras.nodes_hidream", "category": "advanced/loaders", "output_node": false}, "CLIPTextEncodeHiDream": {"input": {"required": {"clip": ["CLIP"], "clip_l": ["STRING", {"multiline": true, "dynamicPrompts": true}], "clip_g": ["STRING", {"multiline": true, "dynamicPrompts": true}], "t5xxl": ["STRING", {"multiline": true, "dynamicPrompts": true}], "llama": ["STRING", {"multiline": true, "dynamicPrompts": true}]}}, "input_order": {"required": ["clip", "clip_l", "clip_g", "t5xxl", "llama"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "CLIPTextEncodeHiDream", "display_name": "CLIPTextEncodeHiDream", "description": "", "python_module": "comfy_extras.nodes_hidream", "category": "advanced/conditioning", "output_node": false}, "FreSca": {"input": {"required": {"model": ["MODEL"], "scale_low": ["FLOAT", {"default": 1.0, "min": 0, "max": 10, "step": 0.01, "tooltip": "Scaling factor for low-frequency components"}], "scale_high": ["FLOAT", {"default": 1.25, "min": 0, "max": 10, "step": 0.01, "tooltip": "Scaling factor for high-frequency components"}], "freq_cutoff": ["INT", {"default": 20, "min": 1, "max": 10000, "step": 1, "tooltip": "Number of frequency indices around center to consider as low-frequency"}]}}, "input_order": {"required": ["model", "scale_low", "scale_high", "freq_cutoff"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "FreSca", "display_name": "FreSca", "description": "Applies frequency-dependent scaling to the guidance", "python_module": "comfy_extras.nodes_fresca", "category": "_for_testing", "output_node": false}, "APG": {"input": {"required": {"model": ["MODEL", {}], "eta": ["FLOAT", {"tooltip": "Controls the scale of the parallel guidance vector. Default CFG behavior at a setting of 1.", "default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "norm_threshold": ["FLOAT", {"tooltip": "Normalize guidance vector to this value, normalization disable at a setting of 0.", "default": 5.0, "min": 0.0, "max": 50.0, "step": 0.1}], "momentum": ["FLOAT", {"tooltip": "Controls a running average of guidance during diffusion, disabled at a setting of 0.", "default": 0.0, "min": -5.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["model", "eta", "norm_threshold", "momentum"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "output_tooltips": [null], "name": "APG", "display_name": "Adaptive Projected Guidance", "description": "", "python_module": "comfy_extras.nodes_apg", "category": "sampling/custom_sampling", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "PreviewAny": {"input": {"required": {"source": ["*", {}]}}, "input_order": {"required": ["source"]}, "output": [], "output_is_list": [], "output_name": [], "name": "PreviewAny", "display_name": "Preview Any", "description": "", "python_module": "comfy_extras.nodes_preview_any", "category": "utils", "output_node": true}, "TextEncodeAceStepAudio": {"input": {"required": {"clip": ["CLIP", {}], "tags": ["STRING", {"multiline": true, "dynamicPrompts": true}], "lyrics": ["STRING", {"multiline": true, "dynamicPrompts": true}], "lyrics_strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}]}}, "input_order": {"required": ["clip", "tags", "lyrics", "lyrics_strength"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "output_tooltips": [null], "name": "TextEncodeAceStepAudio", "display_name": null, "description": "", "python_module": "comfy_extras.nodes_ace", "category": "conditioning", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "EmptyAceStepLatentAudio": {"input": {"required": {"seconds": ["FLOAT", {"default": 120.0, "min": 1.0, "max": 1000.0, "step": 0.1}], "batch_size": ["INT", {"tooltip": "The number of latent images in the batch.", "default": 1, "min": 1, "max": 4096}]}}, "input_order": {"required": ["seconds", "batch_size"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "output_tooltips": [null], "name": "EmptyAceStepLatentAudio", "display_name": null, "description": "", "python_module": "comfy_extras.nodes_ace", "category": "latent/audio", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "StringConcatenate": {"input": {"required": {"string_a": ["STRING", {"multiline": true}], "string_b": ["STRING", {"multiline": true}], "delimiter": ["STRING", {"default": "", "multiline": false}]}}, "input_order": {"required": ["string_a", "string_b", "delimiter"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["STRING"], "output_tooltips": [null], "name": "StringConcatenate", "display_name": "Concatenate", "description": "", "python_module": "comfy_extras.nodes_string", "category": "utils/string", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "StringSubstring": {"input": {"required": {"string": ["STRING", {"multiline": true}], "start": ["INT", {}], "end": ["INT", {}]}}, "input_order": {"required": ["string", "start", "end"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["STRING"], "output_tooltips": [null], "name": "StringSubstring", "display_name": "Substring", "description": "", "python_module": "comfy_extras.nodes_string", "category": "utils/string", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "StringLength": {"input": {"required": {"string": ["STRING", {"multiline": true}]}}, "input_order": {"required": ["string"]}, "output": ["INT"], "output_is_list": [false], "output_name": ["length"], "output_tooltips": [null], "name": "StringLength", "display_name": "Length", "description": "", "python_module": "comfy_extras.nodes_string", "category": "utils/string", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "CaseConverter": {"input": {"required": {"string": ["STRING", {"multiline": true}], "mode": ["COMBO", {"multiselect": false, "options": ["UPPERCASE", "lowercase", "Capitalize", "Title Case"]}]}}, "input_order": {"required": ["string", "mode"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["STRING"], "output_tooltips": [null], "name": "CaseConverter", "display_name": "Case Converter", "description": "", "python_module": "comfy_extras.nodes_string", "category": "utils/string", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "StringTrim": {"input": {"required": {"string": ["STRING", {"multiline": true}], "mode": ["COMBO", {"multiselect": false, "options": ["Both", "Left", "Right"]}]}}, "input_order": {"required": ["string", "mode"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["STRING"], "output_tooltips": [null], "name": "StringTrim", "display_name": "Trim", "description": "", "python_module": "comfy_extras.nodes_string", "category": "utils/string", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "StringReplace": {"input": {"required": {"string": ["STRING", {"multiline": true}], "find": ["STRING", {"multiline": true}], "replace": ["STRING", {"multiline": true}]}}, "input_order": {"required": ["string", "find", "replace"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["STRING"], "output_tooltips": [null], "name": "StringReplace", "display_name": "Replace", "description": "", "python_module": "comfy_extras.nodes_string", "category": "utils/string", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "StringContains": {"input": {"required": {"string": ["STRING", {"multiline": true}], "substring": ["STRING", {"multiline": true}], "case_sensitive": ["BOOLEAN", {"default": true}]}}, "input_order": {"required": ["string", "substring", "case_sensitive"]}, "output": ["BOOLEAN"], "output_is_list": [false], "output_name": ["contains"], "output_tooltips": [null], "name": "StringContains", "display_name": "Contains", "description": "", "python_module": "comfy_extras.nodes_string", "category": "utils/string", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "StringCompare": {"input": {"required": {"string_a": ["STRING", {"multiline": true}], "string_b": ["STRING", {"multiline": true}], "mode": ["COMBO", {"multiselect": false, "options": ["Starts With", "Ends With", "Equal"]}], "case_sensitive": ["BOOLEAN", {"default": true}]}}, "input_order": {"required": ["string_a", "string_b", "mode", "case_sensitive"]}, "output": ["BOOLEAN"], "output_is_list": [false], "output_name": ["BOOLEAN"], "output_tooltips": [null], "name": "StringCompare", "display_name": "Compare", "description": "", "python_module": "comfy_extras.nodes_string", "category": "utils/string", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "RegexMatch": {"input": {"required": {"string": ["STRING", {"multiline": true}], "regex_pattern": ["STRING", {"multiline": true}], "case_insensitive": ["BOOLEAN", {"default": true}], "multiline": ["BOOLEAN", {"default": false}], "dotall": ["BOOLEAN", {"default": false}]}}, "input_order": {"required": ["string", "regex_pattern", "case_insensitive", "multiline", "dotall"]}, "output": ["BOOLEAN"], "output_is_list": [false], "output_name": ["matches"], "output_tooltips": [null], "name": "RegexMatch", "display_name": "Regex Match", "description": "", "python_module": "comfy_extras.nodes_string", "category": "utils/string", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "RegexExtract": {"input": {"required": {"string": ["STRING", {"multiline": true}], "regex_pattern": ["STRING", {"multiline": true}], "mode": ["COMBO", {"multiselect": false, "options": ["First Match", "All Matches", "First Group", "All Groups"]}], "case_insensitive": ["BOOLEAN", {"default": true}], "multiline": ["BOOLEAN", {"default": false}], "dotall": ["BOOLEAN", {"default": false}], "group_index": ["INT", {"default": 1, "min": 0, "max": 100}]}}, "input_order": {"required": ["string", "regex_pattern", "mode", "case_insensitive", "multiline", "dotall", "group_index"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["STRING"], "output_tooltips": [null], "name": "RegexExtract", "display_name": "Regex Extract", "description": "", "python_module": "comfy_extras.nodes_string", "category": "utils/string", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "RegexReplace": {"input": {"required": {"string": ["STRING", {"multiline": true}], "regex_pattern": ["STRING", {"multiline": true}], "replace": ["STRING", {"multiline": true}]}, "optional": {"case_insensitive": ["BOOLEAN", {"default": true}], "multiline": ["BOOLEAN", {"default": false}], "dotall": ["BOOLEAN", {"tooltip": "When enabled, the dot (.) character will match any character including newline characters. When disabled, dots won't match newlines.", "default": false}], "count": ["INT", {"tooltip": "Maximum number of replacements to make. Set to 0 to replace all occurrences (default). Set to 1 to replace only the first match, 2 for the first two matches, etc.", "default": 0, "min": 0, "max": 100}]}}, "input_order": {"required": ["string", "regex_pattern", "replace"], "optional": ["case_insensitive", "multiline", "dotall", "count"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["STRING"], "output_tooltips": [null], "name": "RegexReplace", "display_name": "Regex Replace", "description": "Find and replace text using regex patterns.", "python_module": "comfy_extras.nodes_string", "category": "utils/string", "output_node": false, "deprecated": false, "experimental": false, "api_node": false}, "WanCameraEmbedding": {"input": {"required": {"camera_pose": [["Static", "Pan Up", "Pan Down", "Pan Left", "Pan Right", "Zoom In", "Zoom Out", "Anti Clockwise (ACW)", "ClockWise (CW)"], {"default": "Static"}], "width": ["INT", {"default": 832, "min": 16, "max": 16384, "step": 16}], "height": ["INT", {"default": 480, "min": 16, "max": 16384, "step": 16}], "length": ["INT", {"default": 81, "min": 1, "max": 16384, "step": 4}]}, "optional": {"speed": ["FLOAT", {"default": 1.0, "min": 0, "max": 10.0, "step": 0.1}], "fx": ["FLOAT", {"default": 0.5, "min": 0, "max": 1, "step": 1e-09}], "fy": ["FLOAT", {"default": 0.5, "min": 0, "max": 1, "step": 1e-09}], "cx": ["FLOAT", {"default": 0.5, "min": 0, "max": 1, "step": 0.01}], "cy": ["FLOAT", {"default": 0.5, "min": 0, "max": 1, "step": 0.01}]}}, "input_order": {"required": ["camera_pose", "width", "height", "length"], "optional": ["speed", "fx", "fy", "cx", "cy"]}, "output": ["WAN_CAMERA_EMBEDDING", "INT", "INT", "INT"], "output_is_list": [false, false, false, false], "output_name": ["camera_embedding", "width", "height", "length"], "name": "WanCameraEmbedding", "display_name": "WanCameraEmbedding", "description": "", "python_module": "comfy_extras.nodes_camera_trajectory", "category": "camera", "output_node": false}, "ReferenceLatent": {"input": {"required": {"conditioning": ["CONDITIONING"]}, "optional": {"latent": ["LATENT"]}}, "input_order": {"required": ["conditioning"], "optional": ["latent"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "ReferenceLatent", "display_name": "ReferenceLatent", "description": "This node sets the guiding latent for an edit model. If the model supports it you can chain multiple to set multiple reference images.", "python_module": "comfy_extras.nodes_edit_model", "category": "advanced/conditioning/edit_models", "output_node": false}, "TCFG": {"input": {"required": {"model": ["MODEL", {}]}}, "input_order": {"required": ["model"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["patched_model"], "name": "TCFG", "display_name": "Tangential Damping CFG", "description": "TCFG \u2013 Tangential Damping CFG (2503.18137)\n\nRefine the uncond (negative) to align with the cond (positive) for improving quality.", "python_module": "comfy_extras.nodes_tcfg", "category": "advanced/guidance", "output_node": false}, "ContextWindowsManual": {"input": {"required": {"model": ["MODEL", {"tooltip": "The model to apply context windows to during sampling."}], "context_length": ["INT", {"tooltip": "The length of the context window.", "default": 16, "min": 1}], "context_overlap": ["INT", {"tooltip": "The overlap of the context window.", "default": 4, "min": 0}], "context_schedule": ["COMBO", {"tooltip": "The stride of the context window.", "multiselect": false, "options": ["standard_static", "standard_uniform", "looped_uniform", "batched"]}], "context_stride": ["INT", {"tooltip": "The stride of the context window; only applicable to uniform schedules.", "default": 1, "min": 1}], "closed_loop": ["BOOLEAN", {"tooltip": "Whether to close the context window loop; only applicable to looped schedules.", "default": false}], "fuse_method": ["COMBO", {"tooltip": "The method to use to fuse the context windows.", "default": "pyramid", "multiselect": false, "options": ["pyramid", "relative", "flat", "overlap-linear"]}], "dim": ["INT", {"tooltip": "The dimension to apply the context windows to.", "default": 0, "min": 0, "max": 5}]}}, "input_order": {"required": ["model", "context_length", "context_overlap", "context_schedule", "context_stride", "closed_loop", "fuse_method", "dim"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "output_tooltips": ["The model with context windows applied during sampling."], "name": "ContextWindowsManual", "display_name": "Context Windows (Manual)", "description": "Manually set context windows.", "python_module": "comfy_extras.nodes_context_windows", "category": "context", "output_node": false, "deprecated": false, "experimental": true, "api_node": false}, "WanContextWindowsManual": {"input": {"required": {"model": ["MODEL", {"tooltip": "The model to apply context windows to during sampling."}], "context_length": ["INT", {"tooltip": "The length of the context window.", "default": 81, "min": 1, "max": 16384, "step": 4}], "context_overlap": ["INT", {"tooltip": "The overlap of the context window.", "default": 30, "min": 0}], "context_schedule": ["COMBO", {"tooltip": "The stride of the context window.", "multiselect": false, "options": ["standard_static", "standard_uniform", "looped_uniform", "batched"]}], "context_stride": ["INT", {"tooltip": "The stride of the context window; only applicable to uniform schedules.", "default": 1, "min": 1}], "closed_loop": ["BOOLEAN", {"tooltip": "Whether to close the context window loop; only applicable to looped schedules.", "default": false}], "fuse_method": ["COMBO", {"tooltip": "The method to use to fuse the context windows.", "default": "pyramid", "multiselect": false, "options": ["pyramid", "relative", "flat", "overlap-linear"]}]}}, "input_order": {"required": ["model", "context_length", "context_overlap", "context_schedule", "context_stride", "closed_loop", "fuse_method"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "output_tooltips": ["The model with context windows applied during sampling."], "name": "WanContextWindowsManual", "display_name": "WAN Context Windows (Manual)", "description": "Manually set context windows for WAN-like models (dim=2).", "python_module": "comfy_extras.nodes_context_windows", "category": "context", "output_node": false, "deprecated": false, "experimental": true, "api_node": false}, "TextEncodeQwenImageEdit": {"input": {"required": {"clip": ["CLIP"], "prompt": ["STRING", {"multiline": true, "dynamicPrompts": true}]}, "optional": {"vae": ["VAE"], "image": ["IMAGE"]}}, "input_order": {"required": ["clip", "prompt"], "optional": ["vae", "image"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "TextEncodeQwenImageEdit", "display_name": "TextEncodeQwenImageEdit", "description": "", "python_module": "comfy_extras.nodes_qwen", "category": "advanced/conditioning", "output_node": false}, "ModelPatchLoader": {"input": {"required": {"name": [[]]}}, "input_order": {"required": ["name"]}, "output": ["MODEL_PATCH"], "output_is_list": [false], "output_name": ["MODEL_PATCH"], "name": "ModelPatchLoader", "display_name": "ModelPatchLoader", "description": "", "python_module": "comfy_extras.nodes_model_patch", "category": "advanced/loaders", "output_node": false, "experimental": true}, "QwenImageDiffsynthControlnet": {"input": {"required": {"model": ["MODEL"], "model_patch": ["MODEL_PATCH"], "vae": ["VAE"], "image": ["IMAGE"], "strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}]}, "optional": {"mask": ["MASK"]}}, "input_order": {"required": ["model", "model_patch", "vae", "image", "strength"], "optional": ["mask"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "QwenImageDiffsynthControlnet", "display_name": "QwenImageDiffsynthControlnet", "description": "", "python_module": "comfy_extras.nodes_model_patch", "category": "advanced/loaders/qwen", "output_node": false, "experimental": true}, "USOStyleReference": {"input": {"required": {"model": ["MODEL"], "model_patch": ["MODEL_PATCH"], "clip_vision_output": ["CLIP_VISION_OUTPUT"]}}, "input_order": {"required": ["model", "model_patch", "clip_vision_output"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "USOStyleReference", "display_name": "USOStyleReference", "description": "", "python_module": "comfy_extras.nodes_model_patch", "category": "advanced/model_patches/flux", "output_node": false, "experimental": true}, "EasyCache": {"input": {"required": {"model": ["MODEL", {"tooltip": "The model to add EasyCache to."}], "reuse_threshold": ["FLOAT", {"tooltip": "The threshold for reusing cached steps.", "default": 0.2, "min": 0.0, "max": 3.0, "step": 0.01}], "start_percent": ["FLOAT", {"tooltip": "The relative sampling step to begin use of EasyCache.", "default": 0.15, "min": 0.0, "max": 1.0, "step": 0.01}], "end_percent": ["FLOAT", {"tooltip": "The relative sampling step to end use of EasyCache.", "default": 0.95, "min": 0.0, "max": 1.0, "step": 0.01}], "verbose": ["BOOLEAN", {"tooltip": "Whether to log verbose information.", "default": false}]}}, "input_order": {"required": ["model", "reuse_threshold", "start_percent", "end_percent", "verbose"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "output_tooltips": ["The model with EasyCache."], "name": "EasyCache", "display_name": "EasyCache", "description": "Native EasyCache implementation.", "python_module": "comfy_extras.nodes_easycache", "category": "advanced/debug/model", "output_node": false, "deprecated": false, "experimental": true, "api_node": false}, "LazyCache": {"input": {"required": {"model": ["MODEL", {"tooltip": "The model to add LazyCache to."}], "reuse_threshold": ["FLOAT", {"tooltip": "The threshold for reusing cached steps.", "default": 0.2, "min": 0.0, "max": 3.0, "step": 0.01}], "start_percent": ["FLOAT", {"tooltip": "The relative sampling step to begin use of LazyCache.", "default": 0.15, "min": 0.0, "max": 1.0, "step": 0.01}], "end_percent": ["FLOAT", {"tooltip": "The relative sampling step to end use of LazyCache.", "default": 0.95, "min": 0.0, "max": 1.0, "step": 0.01}], "verbose": ["BOOLEAN", {"tooltip": "Whether to log verbose information.", "default": false}]}}, "input_order": {"required": ["model", "reuse_threshold", "start_percent", "end_percent", "verbose"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "output_tooltips": ["The model with LazyCache."], "name": "LazyCache", "display_name": "LazyCache", "description": "A homebrew version of EasyCache - even 'easier' version of EasyCache to implement. Overall works worse than EasyCache, but better in some rare cases AND universal compatibility with everything in ComfyUI.", "python_module": "comfy_extras.nodes_easycache", "category": "advanced/debug/model", "output_node": false, "deprecated": false, "experimental": true, "api_node": false}, "AudioEncoderLoader": {"input": {"required": {"audio_encoder_name": [[]]}}, "input_order": {"required": ["audio_encoder_name"]}, "output": ["AUDIO_ENCODER"], "output_is_list": [false], "output_name": ["AUDIO_ENCODER"], "name": "AudioEncoderLoader", "display_name": "AudioEncoderLoader", "description": "", "python_module": "comfy_extras.nodes_audio_encoder", "category": "loaders", "output_node": false}, "AudioEncoderEncode": {"input": {"required": {"audio_encoder": ["AUDIO_ENCODER"], "audio": ["AUDIO"]}}, "input_order": {"required": ["audio_encoder", "audio"]}, "output": ["AUDIO_ENCODER_OUTPUT"], "output_is_list": [false], "output_name": ["AUDIO_ENCODER_OUTPUT"], "name": "AudioEncoderEncode", "display_name": "AudioEncoderEncode", "description": "", "python_module": "comfy_extras.nodes_audio_encoder", "category": "conditioning", "output_node": false}, "IdeogramV1": {"input": {"required": {"prompt": ["STRING", {"tooltip": "Prompt for the image generation", "default": "", "multiline": true}], "turbo": ["BOOLEAN", {"tooltip": "Whether to use turbo mode (faster generation, potentially lower quality)", "default": false}]}, "optional": {"aspect_ratio": ["COMBO", {"tooltip": "The aspect ratio for image generation.", "default": "1:1", "multiselect": false, "options": ["1:1", "4:3", "3:4", "16:9", "9:16", "2:1", "1:2", "3:2", "2:3", "4:5", "5:4"]}], "magic_prompt_option": ["COMBO", {"tooltip": "Determine if MagicPrompt should be used in generation", "default": "AUTO", "multiselect": false, "options": ["AUTO", "ON", "OFF"]}], "seed": ["INT", {"default": 0, "min": 0, "max": 2147483647, "step": 1, "control_after_generate": true, "display": "number"}], "negative_prompt": ["STRING", {"tooltip": "Description of what to exclude from the image", "default": "", "multiline": true}], "num_images": ["INT", {"default": 1, "min": 1, "max": 8, "step": 1, "display": "number"}]}, "hidden": {"auth_token_comfy_org": ["AUTH_TOKEN_COMFY_ORG"], "api_key_comfy_org": ["API_KEY_COMFY_ORG"], "unique_id": ["UNIQUE_ID"]}}, "input_order": {"required": ["prompt", "turbo"], "optional": ["aspect_ratio", "magic_prompt_option", "seed", "negative_prompt", "num_images"], "hidden": ["auth_token_comfy_org", "api_key_comfy_org", "unique_id"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "output_tooltips": [null], "name": "IdeogramV1", "display_name": "Ideogram V1", "description": "Generates images using the Ideogram V1 model.", "python_module": "comfy_api_nodes.nodes_ideogram", "category": "api node/image/Ideogram", "output_node": false, "deprecated": false, "experimental": false, "api_node": true}, "IdeogramV2": {"input": {"required": {"prompt": ["STRING", {"tooltip": "Prompt for the image generation", "default": "", "multiline": true}], "turbo": ["BOOLEAN", {"tooltip": "Whether to use turbo mode (faster generation, potentially lower quality)", "default": false}]}, "optional": {"aspect_ratio": ["COMBO", {"tooltip": "The aspect ratio for image generation. Ignored if resolution is not set to AUTO.", "default": "1:1", "multiselect": false, "options": ["1:1", "4:3", "3:4", "16:9", "9:16", "2:1", "1:2", "3:2", "2:3", "4:5", "5:4"]}], "resolution": ["COMBO", {"tooltip": "The resolution for image generation. If not set to AUTO, this overrides the aspect_ratio setting.", "default": "Auto", "multiselect": false, "options": ["Auto", "512 x 1536", "576 x 1408", "576 x 1472", "576 x 1536", "640 x 1024", "640 x 1344", "640 x 1408", "640 x 1472", "640 x 1536", "704 x 1152", "704 x 1216", "704 x 1280", "704 x 1344", "704 x 1408", "704 x 1472", "720 x 1280", "736 x 1312", "768 x 1024", "768 x 1088", "768 x 1152", "768 x 1216", "768 x 1232", "768 x 1280", "768 x 1344", "832 x 960", "832 x 1024", "832 x 1088", "832 x 1152", "832 x 1216", "832 x 1248", "864 x 1152", "896 x 960", "896 x 1024", "896 x 1088", "896 x 1120", "896 x 1152", "960 x 832", "960 x 896", "960 x 1024", "960 x 1088", "1024 x 640", "1024 x 768", "1024 x 832", "1024 x 896", "1024 x 960", "1024 x 1024", "1088 x 768", "1088 x 832", "1088 x 896", "1088 x 960", "1120 x 896", "1152 x 704", "1152 x 768", "1152 x 832", "1152 x 864", "1152 x 896", "1216 x 704", "1216 x 768", "1216 x 832", "1232 x 768", "1248 x 832", "1280 x 704", "1280 x 720", "1280 x 768", "1280 x 800", "1312 x 736", "1344 x 640", "1344 x 704", "1344 x 768", "1408 x 576", "1408 x 640", "1408 x 704", "1472 x 576", "1472 x 640", "1472 x 704", "1536 x 512", "1536 x 576", "1536 x 640"]}], "magic_prompt_option": ["COMBO", {"tooltip": "Determine if MagicPrompt should be used in generation", "default": "AUTO", "multiselect": false, "options": ["AUTO", "ON", "OFF"]}], "seed": ["INT", {"default": 0, "min": 0, "max": 2147483647, "step": 1, "control_after_generate": true, "display": "number"}], "style_type": ["COMBO", {"tooltip": "Style type for generation (V2 only)", "default": "NONE", "multiselect": false, "options": ["AUTO", "GENERAL", "REALISTIC", "DESIGN", "RENDER_3D", "ANIME"]}], "negative_prompt": ["STRING", {"tooltip": "Description of what to exclude from the image", "default": "", "multiline": true}], "num_images": ["INT", {"default": 1, "min": 1, "max": 8, "step": 1, "display": "number"}]}, "hidden": {"auth_token_comfy_org": ["AUTH_TOKEN_COMFY_ORG"], "api_key_comfy_org": ["API_KEY_COMFY_ORG"], "unique_id": ["UNIQUE_ID"]}}, "input_order": {"required": ["prompt", "turbo"], "optional": ["aspect_ratio", "resolution", "magic_prompt_option", "seed", "style_type", "negative_prompt", "num_images"], "hidden": ["auth_token_comfy_org", "api_key_comfy_org", "unique_id"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "output_tooltips": [null], "name": "IdeogramV2", "display_name": "Ideogram V2", "description": "Generates images using the Ideogram V2 model.", "python_module": "comfy_api_nodes.nodes_ideogram", "category": "api node/image/Ideogram", "output_node": false, "deprecated": false, "experimental": false, "api_node": true}, "IdeogramV3": {"input": {"required": {"prompt": ["STRING", {"tooltip": "Prompt for the image generation or editing", "default": "", "multiline": true}]}, "optional": {"image": ["IMAGE", {"tooltip": "Optional reference image for image editing."}], "mask": ["MASK", {"tooltip": "Optional mask for inpainting (white areas will be replaced)"}], "aspect_ratio": ["COMBO", {"tooltip": "The aspect ratio for image generation. Ignored if resolution is not set to Auto.", "default": "1:1", "multiselect": false, "options": ["1:3", "3:1", "1:2", "2:1", "9:16", "16:9", "10:16", "16:10", "2:3", "3:2", "3:4", "4:3", "4:5", "5:4", "1:1"]}], "resolution": ["COMBO", {"tooltip": "The resolution for image generation. If not set to Auto, this overrides the aspect_ratio setting.", "default": "Auto", "multiselect": false, "options": ["Auto", "512x1536", "576x1408", "576x1472", "576x1536", "640x1344", "640x1408", "640x1472", "640x1536", "704x1152", "704x1216", "704x1280", "704x1344", "704x1408", "704x1472", "736x1312", "768x1088", "768x1216", "768x1280", "768x1344", "800x1280", "832x960", "832x1024", "832x1088", "832x1152", "832x1216", "832x1248", "864x1152", "896x960", "896x1024", "896x1088", "896x1120", "896x1152", "960x832", "960x896", "960x1024", "960x1088", "1024x832", "1024x896", "1024x960", "1024x1024", "1088x768", "1088x832", "1088x896", "1088x960", "1120x896", "1152x704", "1152x832", "1152x864", "1152x896", "1216x704", "1216x768", "1216x832", "1248x832", "1280x704", "1280x768", "1280x800", "1312x736", "1344x640", "1344x704", "1344x768", "1408x576", "1408x640", "1408x704", "1472x576", "1472x640", "1472x704", "1536x512", "1536x576", "1536x640"]}], "magic_prompt_option": ["COMBO", {"tooltip": "Determine if MagicPrompt should be used in generation", "default": "AUTO", "multiselect": false, "options": ["AUTO", "ON", "OFF"]}], "seed": ["INT", {"default": 0, "min": 0, "max": 2147483647, "step": 1, "control_after_generate": true, "display": "number"}], "num_images": ["INT", {"default": 1, "min": 1, "max": 8, "step": 1, "display": "number"}], "rendering_speed": ["COMBO", {"tooltip": "Controls the trade-off between generation speed and quality", "default": "DEFAULT", "multiselect": false, "options": ["DEFAULT", "TURBO", "QUALITY"]}], "character_image": ["IMAGE", {"tooltip": "Image to use as character reference."}], "character_mask": ["MASK", {"tooltip": "Optional mask for character reference image."}]}, "hidden": {"auth_token_comfy_org": ["AUTH_TOKEN_COMFY_ORG"], "api_key_comfy_org": ["API_KEY_COMFY_ORG"], "unique_id": ["UNIQUE_ID"]}}, "input_order": {"required": ["prompt"], "optional": ["image", "mask", "aspect_ratio", "resolution", "magic_prompt_option", "seed", "num_images", "rendering_speed", "character_image", "character_mask"], "hidden": ["auth_token_comfy_org", "api_key_comfy_org", "unique_id"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "output_tooltips": [null], "name": "IdeogramV3", "display_name": "Ideogram V3", "description": "Generates images using the Ideogram V3 model. Supports both regular image generation from text prompts and image editing with mask.", "python_module": "comfy_api_nodes.nodes_ideogram", "category": "api node/image/Ideogram", "output_node": false, "deprecated": false, "experimental": false, "api_node": true}, "OpenAIDalle2": {"input": {"required": {"prompt": ["STRING", {"multiline": true, "default": "", "tooltip": "Text prompt for DALL\u00b7E"}]}, "optional": {"seed": ["INT", {"default": 0, "min": 0, "max": 2147483647, "step": 1, "display": "number", "control_after_generate": true, "tooltip": "not implemented yet in backend"}], "size": ["COMBO", {"options": ["256x256", "512x512", "1024x1024"], "default": "1024x1024", "tooltip": "Image size"}], "n": ["INT", {"default": 1, "min": 1, "max": 8, "step": 1, "display": "number", "tooltip": "How many images to generate"}], "image": ["IMAGE", {"default": null, "tooltip": "Optional reference image for image editing."}], "mask": ["MASK", {"default": null, "tooltip": "Optional mask for inpainting (white areas will be replaced)"}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["prompt"], "optional": ["seed", "size", "n", "image", "mask"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "OpenAIDalle2", "display_name": "OpenAI DALL\u00b7E 2", "description": "Generates images synchronously via OpenAI's DALL\u00b7E 2 endpoint.", "python_module": "comfy_api_nodes.nodes_openai", "category": "api node/image/OpenAI", "output_node": false, "api_node": true}, "OpenAIDalle3": {"input": {"required": {"prompt": ["STRING", {"multiline": true, "default": "", "tooltip": "Text prompt for DALL\u00b7E"}]}, "optional": {"seed": ["INT", {"default": 0, "min": 0, "max": 2147483647, "step": 1, "display": "number", "control_after_generate": true, "tooltip": "not implemented yet in backend"}], "quality": ["COMBO", {"options": ["standard", "hd"], "default": "standard", "tooltip": "Image quality"}], "style": ["COMBO", {"options": ["natural", "vivid"], "default": "natural", "tooltip": "Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images."}], "size": ["COMBO", {"options": ["1024x1024", "1024x1792", "1792x1024"], "default": "1024x1024", "tooltip": "Image size"}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["prompt"], "optional": ["seed", "quality", "style", "size"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "OpenAIDalle3", "display_name": "OpenAI DALL\u00b7E 3", "description": "Generates images synchronously via OpenAI's DALL\u00b7E 3 endpoint.", "python_module": "comfy_api_nodes.nodes_openai", "category": "api node/image/OpenAI", "output_node": false, "api_node": true}, "OpenAIGPTImage1": {"input": {"required": {"prompt": ["STRING", {"multiline": true, "default": "", "tooltip": "Text prompt for GPT Image 1"}]}, "optional": {"seed": ["INT", {"default": 0, "min": 0, "max": 2147483647, "step": 1, "display": "number", "control_after_generate": true, "tooltip": "not implemented yet in backend"}], "quality": ["COMBO", {"options": ["low", "medium", "high"], "default": "low", "tooltip": "Image quality, affects cost and generation time."}], "background": ["COMBO", {"options": ["opaque", "transparent"], "default": "opaque", "tooltip": "Return image with or without background"}], "size": ["COMBO", {"options": ["auto", "1024x1024", "1024x1536", "1536x1024"], "default": "auto", "tooltip": "Image size"}], "n": ["INT", {"default": 1, "min": 1, "max": 8, "step": 1, "display": "number", "tooltip": "How many images to generate"}], "image": ["IMAGE", {"default": null, "tooltip": "Optional reference image for image editing."}], "mask": ["MASK", {"default": null, "tooltip": "Optional mask for inpainting (white areas will be replaced)"}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["prompt"], "optional": ["seed", "quality", "background", "size", "n", "image", "mask"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "OpenAIGPTImage1", "display_name": "OpenAI GPT Image 1", "description": "Generates images synchronously via OpenAI's GPT Image 1 endpoint.", "python_module": "comfy_api_nodes.nodes_openai", "category": "api node/image/OpenAI", "output_node": false, "api_node": true}, "OpenAIChatNode": {"input": {"required": {"prompt": ["STRING", {"multiline": true, "default": "", "tooltip": "Text inputs to the model, used to generate a response."}], "persist_context": ["BOOLEAN", {"default": true, "tooltip": "Persist chat context between calls (multi-turn conversation)"}], "model": ["COMBO", {"options": ["o4-mini", "o1", "o3", "o1-pro", "gpt-4o", "gpt-4.1", "gpt-4.1-mini", "gpt-4.1-nano", "gpt-5", "gpt-5-mini", "gpt-5-nano"], "default": null, "tooltip": "The model used to generate the response"}]}, "optional": {"images": ["IMAGE", {"default": null, "tooltip": "Optional image(s) to use as context for the model. To include multiple images, you can use the Batch Images node."}], "files": ["OPENAI_INPUT_FILES", {"default": null, "tooltip": "Optional file(s) to use as context for the model. Accepts inputs from the OpenAI Chat Input Files node."}], "advanced_options": ["OPENAI_CHAT_CONFIG", {"default": null, "tooltip": "Optional configuration for the model. Accepts inputs from the OpenAI Chat Advanced Options node."}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["prompt", "persist_context", "model"], "optional": ["images", "files", "advanced_options"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["STRING"], "name": "OpenAIChatNode", "display_name": "OpenAI ChatGPT", "description": "Generate text responses from an OpenAI model.", "python_module": "comfy_api_nodes.nodes_openai", "category": "api node/text/OpenAI", "output_node": false, "api_node": true}, "OpenAIInputFiles": {"input": {"required": {"file": ["COMBO", {"tooltip": "Input files to include as context for the model. Only accepts text (.txt) and PDF (.pdf) files for now.", "options": [], "default": null}]}, "optional": {"OPENAI_INPUT_FILES": ["OPENAI_INPUT_FILES", {"tooltip": "An optional additional file(s) to batch together with the file loaded from this node. Allows chaining of input files so that a single message can include multiple input files.", "default": null}]}}, "input_order": {"required": ["file"], "optional": ["OPENAI_INPUT_FILES"]}, "output": ["OPENAI_INPUT_FILES"], "output_is_list": [false], "output_name": ["OPENAI_INPUT_FILES"], "name": "OpenAIInputFiles", "display_name": "OpenAI ChatGPT Input Files", "description": "Loads and prepares input files (text, pdf, etc.) to include as inputs for the OpenAI Chat Node. The files will be read by the OpenAI model when generating a response. \ud83d\udec8 TIP: Can be chained together with other OpenAI Input File nodes.", "python_module": "comfy_api_nodes.nodes_openai", "category": "api node/text/OpenAI", "output_node": false}, "OpenAIChatConfig": {"input": {"required": {"truncation": ["COMBO", {"options": ["auto", "disabled"], "default": "auto", "tooltip": "The truncation strategy to use for the model response. auto: If the context of this response and previous ones exceeds the model's context window size, the model will truncate the response to fit the context window by dropping input items in the middle of the conversation.disabled: If a model response will exceed the context window size for a model, the request will fail with a 400 error"}]}, "optional": {"max_output_tokens": ["INT", {"default": 4096, "tooltip": "An upper bound for the number of tokens that can be generated for a response, including visible output tokens", "min": 16, "max": 16384}], "instructions": ["STRING", {"default": null, "tooltip": "Instructions for the model on how to generate the response", "multiline": true}]}}, "input_order": {"required": ["truncation"], "optional": ["max_output_tokens", "instructions"]}, "output": ["OPENAI_CHAT_CONFIG"], "output_is_list": [false], "output_name": ["OPENAI_CHAT_CONFIG"], "name": "OpenAIChatConfig", "display_name": "OpenAI ChatGPT Advanced Options", "description": "Allows specifying advanced configuration options for the OpenAI Chat Nodes.", "python_module": "comfy_api_nodes.nodes_openai", "category": "api node/text/OpenAI", "output_node": false}, "MinimaxTextToVideoNode": {"input": {"required": {"prompt_text": ["STRING", {"multiline": true, "default": "", "tooltip": "Text prompt to guide the video generation"}], "model": [["T2V-01", "T2V-01-Director"], {"default": "T2V-01", "tooltip": "Model to use for video generation"}]}, "optional": {"seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "control_after_generate": true, "tooltip": "The random seed used for creating the noise."}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["prompt_text", "model"], "optional": ["seed"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["VIDEO"], "output_is_list": [false], "output_name": ["VIDEO"], "name": "MinimaxTextToVideoNode", "display_name": "MiniMax Text to Video", "description": "Generates videos from prompts using MiniMax's API", "python_module": "comfy_api_nodes.nodes_minimax", "category": "api node/video/MiniMax", "output_node": false, "api_node": true}, "MinimaxImageToVideoNode": {"input": {"required": {"image": ["IMAGE", {"tooltip": "Image to use as first frame of video generation"}], "prompt_text": ["STRING", {"multiline": true, "default": "", "tooltip": "Text prompt to guide the video generation"}], "model": [["I2V-01-Director", "I2V-01", "I2V-01-live"], {"default": "I2V-01", "tooltip": "Model to use for video generation"}]}, "optional": {"seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "control_after_generate": true, "tooltip": "The random seed used for creating the noise."}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["image", "prompt_text", "model"], "optional": ["seed"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["VIDEO"], "output_is_list": [false], "output_name": ["VIDEO"], "name": "MinimaxImageToVideoNode", "display_name": "MiniMax Image to Video", "description": "Generates videos from an image and prompts using MiniMax's API", "python_module": "comfy_api_nodes.nodes_minimax", "category": "api node/video/MiniMax", "output_node": false, "api_node": true}, "MinimaxHailuoVideoNode": {"input": {"required": {"prompt_text": ["STRING", {"multiline": true, "default": "", "tooltip": "Text prompt to guide the video generation."}]}, "optional": {"seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "control_after_generate": true, "tooltip": "The random seed used for creating the noise."}], "first_frame_image": ["IMAGE", {"tooltip": "Optional image to use as the first frame to generate a video."}], "prompt_optimizer": ["BOOLEAN", {"tooltip": "Optimize prompt to improve generation quality when needed.", "default": true}], "duration": ["COMBO", {"tooltip": "The length of the output video in seconds.", "default": 6, "options": [6, 10]}], "resolution": ["COMBO", {"tooltip": "The dimensions of the video display. 1080p corresponds to 1920 x 1080 pixels, 768p corresponds to 1366 x 768 pixels.", "default": "768P", "options": ["768P", "1080P"]}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["prompt_text"], "optional": ["seed", "first_frame_image", "prompt_optimizer", "duration", "resolution"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["VIDEO"], "output_is_list": [false], "output_name": ["VIDEO"], "name": "MinimaxHailuoVideoNode", "display_name": "MiniMax Hailuo Video", "description": "Generates videos from prompt, with optional start frame using the new MiniMax Hailuo-02 model.", "python_module": "comfy_api_nodes.nodes_minimax", "category": "api node/video/MiniMax", "output_node": false, "api_node": true}, "VeoVideoGenerationNode": {"input": {"required": {"prompt": ["STRING", {"tooltip": "Text description of the video", "default": "", "multiline": true}], "aspect_ratio": ["COMBO", {"tooltip": "Aspect ratio of the output video", "default": "16:9", "multiselect": false, "options": ["16:9", "9:16"]}]}, "optional": {"negative_prompt": ["STRING", {"tooltip": "Negative text prompt to guide what to avoid in the video", "default": "", "multiline": true}], "duration_seconds": ["INT", {"tooltip": "Duration of the output video in seconds", "default": 5, "min": 5, "max": 8, "step": 1, "display": "number"}], "enhance_prompt": ["BOOLEAN", {"tooltip": "Whether to enhance the prompt with AI assistance", "default": true}], "person_generation": ["COMBO", {"tooltip": "Whether to allow generating people in the video", "default": "ALLOW", "multiselect": false, "options": ["ALLOW", "BLOCK"]}], "seed": ["INT", {"tooltip": "Seed for video generation (0 for random)", "default": 0, "min": 0, "max": 4294967295, "step": 1, "control_after_generate": true, "display": "number"}], "image": ["IMAGE", {"tooltip": "Optional reference image to guide video generation"}], "model": ["COMBO", {"tooltip": "Veo 2 model to use for video generation", "default": "veo-2.0-generate-001", "multiselect": false, "options": ["veo-2.0-generate-001"]}]}, "hidden": {"auth_token_comfy_org": ["AUTH_TOKEN_COMFY_ORG"], "api_key_comfy_org": ["API_KEY_COMFY_ORG"], "unique_id": ["UNIQUE_ID"]}}, "input_order": {"required": ["prompt", "aspect_ratio"], "optional": ["negative_prompt", "duration_seconds", "enhance_prompt", "person_generation", "seed", "image", "model"], "hidden": ["auth_token_comfy_org", "api_key_comfy_org", "unique_id"]}, "output": ["VIDEO"], "output_is_list": [false], "output_name": ["VIDEO"], "output_tooltips": [null], "name": "VeoVideoGenerationNode", "display_name": "Google Veo 2 Video Generation", "description": "Generates videos from text prompts using Google's Veo 2 API", "python_module": "comfy_api_nodes.nodes_veo2", "category": "api node/video/Veo", "output_node": false, "deprecated": false, "experimental": false, "api_node": true}, "Veo3VideoGenerationNode": {"input": {"required": {"prompt": ["STRING", {"tooltip": "Text description of the video", "default": "", "multiline": true}], "aspect_ratio": ["COMBO", {"tooltip": "Aspect ratio of the output video", "default": "16:9", "multiselect": false, "options": ["16:9", "9:16"]}]}, "optional": {"negative_prompt": ["STRING", {"tooltip": "Negative text prompt to guide what to avoid in the video", "default": "", "multiline": true}], "duration_seconds": ["INT", {"tooltip": "Duration of the output video in seconds (Veo 3 only supports 8 seconds)", "default": 8, "min": 8, "max": 8, "step": 1, "display": "number"}], "enhance_prompt": ["BOOLEAN", {"tooltip": "Whether to enhance the prompt with AI assistance", "default": true}], "person_generation": ["COMBO", {"tooltip": "Whether to allow generating people in the video", "default": "ALLOW", "multiselect": false, "options": ["ALLOW", "BLOCK"]}], "seed": ["INT", {"tooltip": "Seed for video generation (0 for random)", "default": 0, "min": 0, "max": 4294967295, "step": 1, "control_after_generate": true, "display": "number"}], "image": ["IMAGE", {"tooltip": "Optional reference image to guide video generation"}], "model": ["COMBO", {"tooltip": "Veo 3 model to use for video generation", "default": "veo-3.0-generate-001", "multiselect": false, "options": ["veo-3.0-generate-001", "veo-3.0-fast-generate-001"]}], "generate_audio": ["BOOLEAN", {"tooltip": "Generate audio for the video. Supported by all Veo 3 models.", "default": false}]}, "hidden": {"auth_token_comfy_org": ["AUTH_TOKEN_COMFY_ORG"], "api_key_comfy_org": ["API_KEY_COMFY_ORG"], "unique_id": ["UNIQUE_ID"]}}, "input_order": {"required": ["prompt", "aspect_ratio"], "optional": ["negative_prompt", "duration_seconds", "enhance_prompt", "person_generation", "seed", "image", "model", "generate_audio"], "hidden": ["auth_token_comfy_org", "api_key_comfy_org", "unique_id"]}, "output": ["VIDEO"], "output_is_list": [false], "output_name": ["VIDEO"], "output_tooltips": [null], "name": "Veo3VideoGenerationNode", "display_name": "Google Veo 3 Video Generation", "description": "Generates videos from text prompts using Google's Veo 3 API", "python_module": "comfy_api_nodes.nodes_veo2", "category": "api node/video/Veo", "output_node": false, "deprecated": false, "experimental": false, "api_node": true}, "KlingCameraControls": {"input": {"required": {"camera_control_type": ["COMBO", {"options": ["simple", "down_back", "forward_up", "right_turn_forward", "left_turn_forward"], "default": null}], "horizontal_movement": ["FLOAT", {"default": 0.0, "min": -10.0, "max": 10.0, "step": 0.25, "display": "slider", "tooltip": "Controls camera's movement along horizontal axis (x-axis). Negative indicates left, positive indicates right"}], "vertical_movement": ["FLOAT", {"default": 0.0, "min": -10.0, "max": 10.0, "step": 0.25, "display": "slider", "tooltip": "Controls camera's movement along vertical axis (y-axis). Negative indicates downward, positive indicates upward."}], "pan": ["FLOAT", {"default": 0.5, "min": -10.0, "max": 10.0, "step": 0.25, "display": "slider", "tooltip": "Controls camera's rotation in vertical plane (x-axis). Negative indicates downward rotation, positive indicates upward rotation."}], "tilt": ["FLOAT", {"default": 0.0, "min": -10.0, "max": 10.0, "step": 0.25, "display": "slider", "tooltip": "Controls camera's rotation in horizontal plane (y-axis). Negative indicates left rotation, positive indicates right rotation."}], "roll": ["FLOAT", {"default": 0.0, "min": -10.0, "max": 10.0, "step": 0.25, "display": "slider", "tooltip": "Controls camera's rolling amount (z-axis). Negative indicates counterclockwise, positive indicates clockwise."}], "zoom": ["FLOAT", {"default": 0.0, "min": -10.0, "max": 10.0, "step": 0.25, "display": "slider", "tooltip": "Controls change in camera's focal length. Negative indicates narrower field of view, positive indicates wider field of view."}]}}, "input_order": {"required": ["camera_control_type", "horizontal_movement", "vertical_movement", "pan", "tilt", "roll", "zoom"]}, "output": ["CAMERA_CONTROL"], "output_is_list": [false], "output_name": ["camera_control"], "name": "KlingCameraControls", "display_name": "Kling Camera Controls", "description": "Allows specifying configuration options for Kling Camera Controls and motion control effects.", "python_module": "comfy_api_nodes.nodes_kling", "category": "api node/video/Kling", "output_node": false, "api_node": false}, "KlingTextToVideoNode": {"input": {"required": {"prompt": ["STRING", {"default": null, "tooltip": "Positive text prompt", "multiline": true}], "negative_prompt": ["STRING", {"default": null, "tooltip": "Negative text prompt", "multiline": true}], "cfg_scale": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0}], "aspect_ratio": ["COMBO", {"options": ["16:9", "9:16", "1:1"], "default": "16:9"}], "mode": [["standard mode / 5s duration / kling-v1", "standard mode / 10s duration / kling-v1", "pro mode / 5s duration / kling-v1", "pro mode / 10s duration / kling-v1", "standard mode / 5s duration / kling-v1-6", "standard mode / 10s duration / kling-v1-6", "pro mode / 5s duration / kling-v2-master", "pro mode / 10s duration / kling-v2-master", "standard mode / 5s duration / kling-v2-master", "standard mode / 10s duration / kling-v2-master", "pro mode / 5s duration / kling-v2-1-master", "pro mode / 10s duration / kling-v2-1-master"], {"default": "standard mode / 5s duration / kling-v1-6", "tooltip": "The configuration to use for the video generation following the format: mode / duration / model_name."}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["prompt", "negative_prompt", "cfg_scale", "aspect_ratio", "mode"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["VIDEO", "STRING", "STRING"], "output_is_list": [false, false, false], "output_name": ["VIDEO", "video_id", "duration"], "name": "KlingTextToVideoNode", "display_name": "Kling Text to Video", "description": "Kling Text to Video Node", "python_module": "comfy_api_nodes.nodes_kling", "category": "api node/video/Kling", "output_node": false, "api_node": true}, "KlingImage2VideoNode": {"input": {"required": {"start_frame": ["IMAGE", {"default": null, "tooltip": "The reference image used to generate the video."}], "prompt": ["STRING", {"default": null, "tooltip": "Positive text prompt", "multiline": true}], "negative_prompt": ["STRING", {"default": null, "tooltip": "Negative text prompt", "multiline": true}], "model_name": ["COMBO", {"options": ["kling-v1", "kling-v1-5", "kling-v1-6", "kling-v2-master", "kling-v2-1", "kling-v2-1-master"], "default": "kling-v2-master"}], "cfg_scale": ["FLOAT", {"default": 0.8, "min": 0.0, "max": 1.0}], "mode": ["COMBO", {"options": ["std", "pro"], "default": "std"}], "aspect_ratio": ["COMBO", {"options": ["16:9", "9:16", "1:1"], "default": "16:9"}], "duration": ["COMBO", {"options": ["5", "10"], "default": "5"}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["start_frame", "prompt", "negative_prompt", "model_name", "cfg_scale", "mode", "aspect_ratio", "duration"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["VIDEO", "STRING", "STRING"], "output_is_list": [false, false, false], "output_name": ["VIDEO", "video_id", "duration"], "name": "KlingImage2VideoNode", "display_name": "Kling Image to Video", "description": "Kling Image to Video Node", "python_module": "comfy_api_nodes.nodes_kling", "category": "api node/video/Kling", "output_node": false, "api_node": true}, "KlingCameraControlI2VNode": {"input": {"required": {"start_frame": ["IMAGE", {"default": null, "tooltip": "Reference Image - URL or Base64 encoded string, cannot exceed 10MB, resolution not less than 300*300px, aspect ratio between 1:2.5 ~ 2.5:1. Base64 should not include data:image prefix."}], "prompt": ["STRING", {"default": null, "tooltip": "Positive text prompt", "multiline": true}], "negative_prompt": ["STRING", {"default": null, "tooltip": "Negative text prompt", "multiline": true}], "cfg_scale": ["FLOAT", {"default": 0.75, "min": 0.0, "max": 1.0}], "aspect_ratio": ["COMBO", {"options": ["16:9", "9:16", "1:1"], "default": "16:9"}], "camera_control": ["CAMERA_CONTROL", {"tooltip": "Can be created using the Kling Camera Controls node. Controls the camera movement and motion during the video generation."}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["start_frame", "prompt", "negative_prompt", "cfg_scale", "aspect_ratio", "camera_control"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["VIDEO", "STRING", "STRING"], "output_is_list": [false, false, false], "output_name": ["VIDEO", "video_id", "duration"], "name": "KlingCameraControlI2VNode", "display_name": "Kling Image to Video (Camera Control)", "description": "Transform still images into cinematic videos with professional camera movements that simulate real-world cinematography. Control virtual camera actions including zoom, rotation, pan, tilt, and first-person view, while maintaining focus on your original image.", "python_module": "comfy_api_nodes.nodes_kling", "category": "api node/video/Kling", "output_node": false, "api_node": true}, "KlingCameraControlT2VNode": {"input": {"required": {"prompt": ["STRING", {"default": null, "tooltip": "Positive text prompt", "multiline": true}], "negative_prompt": ["STRING", {"default": null, "tooltip": "Negative text prompt", "multiline": true}], "cfg_scale": ["FLOAT", {"default": 0.75, "min": 0.0, "max": 1.0}], "aspect_ratio": ["COMBO", {"options": ["16:9", "9:16", "1:1"], "default": "16:9"}], "camera_control": ["CAMERA_CONTROL", {"tooltip": "Can be created using the Kling Camera Controls node. Controls the camera movement and motion during the video generation."}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["prompt", "negative_prompt", "cfg_scale", "aspect_ratio", "camera_control"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["VIDEO", "STRING", "STRING"], "output_is_list": [false, false, false], "output_name": ["VIDEO", "video_id", "duration"], "name": "KlingCameraControlT2VNode", "display_name": "Kling Text to Video (Camera Control)", "description": "Transform text into cinematic videos with professional camera movements that simulate real-world cinematography. Control virtual camera actions including zoom, rotation, pan, tilt, and first-person view, while maintaining focus on your original text.", "python_module": "comfy_api_nodes.nodes_kling", "category": "api node/video/Kling", "output_node": false, "api_node": true}, "KlingStartEndFrameNode": {"input": {"required": {"start_frame": ["IMAGE", {"default": null, "tooltip": "Reference Image - URL or Base64 encoded string, cannot exceed 10MB, resolution not less than 300*300px, aspect ratio between 1:2.5 ~ 2.5:1. Base64 should not include data:image prefix."}], "end_frame": ["IMAGE", {"default": null, "tooltip": "Reference Image - End frame control. URL or Base64 encoded string, cannot exceed 10MB, resolution not less than 300*300px. Base64 should not include data:image prefix."}], "prompt": ["STRING", {"default": null, "tooltip": "Positive text prompt", "multiline": true}], "negative_prompt": ["STRING", {"default": null, "tooltip": "Negative text prompt", "multiline": true}], "cfg_scale": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 1.0}], "aspect_ratio": ["COMBO", {"options": ["16:9", "9:16", "1:1"], "default": "16:9"}], "mode": [["standard mode / 5s duration / kling-v1", "pro mode / 5s duration / kling-v1", "pro mode / 5s duration / kling-v1-5", "pro mode / 10s duration / kling-v1-5", "pro mode / 5s duration / kling-v1-6", "pro mode / 10s duration / kling-v1-6"], {"default": "pro mode / 5s duration / kling-v1-5", "tooltip": "The configuration to use for the video generation following the format: mode / duration / model_name."}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["start_frame", "end_frame", "prompt", "negative_prompt", "cfg_scale", "aspect_ratio", "mode"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["VIDEO", "STRING", "STRING"], "output_is_list": [false, false, false], "output_name": ["VIDEO", "video_id", "duration"], "name": "KlingStartEndFrameNode", "display_name": "Kling Start-End Frame to Video", "description": "Generate a video sequence that transitions between your provided start and end images. The node creates all frames in between, producing a smooth transformation from the first frame to the last.", "python_module": "comfy_api_nodes.nodes_kling", "category": "api node/video/Kling", "output_node": false, "api_node": true}, "KlingVideoExtendNode": {"input": {"required": {"prompt": ["STRING", {"default": null, "tooltip": "Positive text prompt for guiding the video extension", "multiline": true}], "negative_prompt": ["STRING", {"default": null, "tooltip": "Negative text prompt for elements to avoid in the extended video", "multiline": true}], "cfg_scale": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 1.0}], "video_id": ["STRING", {"default": null, "tooltip": "The ID of the video to be extended. Supports videos generated by text-to-video, image-to-video, and previous video extension operations. Cannot exceed 3 minutes total duration after extension.", "forceInput": true}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["prompt", "negative_prompt", "cfg_scale", "video_id"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["VIDEO", "STRING", "STRING"], "output_is_list": [false, false, false], "output_name": ["VIDEO", "video_id", "duration"], "name": "KlingVideoExtendNode", "display_name": "Kling Video Extend", "description": "Kling Video Extend Node. Extend videos made by other Kling nodes. The video_id is created by using other Kling Nodes.", "python_module": "comfy_api_nodes.nodes_kling", "category": "api node/video/Kling", "output_node": false, "api_node": true}, "KlingLipSyncAudioToVideoNode": {"input": {"required": {"video": ["VIDEO", {}], "audio": ["AUDIO", {}], "voice_language": ["COMBO", {"options": ["zh", "en"], "default": "en"}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["video", "audio", "voice_language"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["VIDEO", "STRING", "STRING"], "output_is_list": [false, false, false], "output_name": ["VIDEO", "video_id", "duration"], "name": "KlingLipSyncAudioToVideoNode", "display_name": "Kling Lip Sync Video with Audio", "description": "Kling Lip Sync Audio to Video Node. Syncs mouth movements in a video file to the audio content of an audio file. When using, ensure that the audio contains clearly distinguishable vocals and that the video contains a distinct face. The audio file should not be larger than 5MB. The video file should not be larger than 100MB, should have height/width between 720px and 1920px, and should be between 2s and 10s in length.", "python_module": "comfy_api_nodes.nodes_kling", "category": "api node/video/Kling", "output_node": false, "api_node": true}, "KlingLipSyncTextToVideoNode": {"input": {"required": {"video": ["VIDEO", {}], "text": ["STRING", {"default": null, "tooltip": "Text Content for Lip-Sync Video Generation. Required when mode is text2video. Maximum length is 120 characters.", "multiline": true}], "voice": [["Melody", "Sunny", "Sage", "Ace", "Blossom", "Peppy", "Dove", "Shine", "Anchor", "Lyric", "Tender", "Siren", "Zippy", "Bud", "Sprite", "Candy", "Beacon", "Rock", "Titan", "Grace", "Helen", "Lore", "Crag", "Prattle", "Hearth", "The Reader", "Commercial Lady", "\u9633\u5149\u5c11\u5e74", "\u61c2\u4e8b\u5c0f\u5f1f", "\u8fd0\u52a8\u5c11\u5e74", "\u9752\u6625\u5c11\u5973", "\u6e29\u67d4\u5c0f\u59b9", "\u5143\u6c14\u5c11\u5973", "\u9633\u5149\u7537\u751f", "\u5e7d\u9ed8\u5c0f\u54e5", "\u6587\u827a\u5c0f\u54e5", "\u751c\u7f8e\u90bb\u5bb6", "\u6e29\u67d4\u59d0\u59d0", "\u804c\u573a\u5973\u9752", "\u6d3b\u6cfc\u7537\u7ae5", "\u4fcf\u76ae\u5973\u7ae5", "\u7a33\u91cd\u8001\u7238", "\u6e29\u67d4\u5988\u5988", "\u4e25\u8083\u4e0a\u53f8", "\u4f18\u96c5\u8d35\u5987", "\u6148\u7965\u7237\u7237", "\u5520\u53e8\u7237\u7237", "\u5520\u53e8\u5976\u5976", "\u548c\u853c\u5976\u5976", "\u4e1c\u5317\u8001\u94c1", "\u91cd\u5e86\u5c0f\u4f19", "\u56db\u5ddd\u59b9\u5b50", "\u6f6e\u6c55\u5927\u53d4", "\u53f0\u6e7e\u7537\u751f", "\u897f\u5b89\u638c\u67dc", "\u5929\u6d25\u59d0\u59d0", "\u65b0\u95fb\u64ad\u62a5\u7537", "\u8bd1\u5236\u7247\u7537", "\u6492\u5a07\u5973\u53cb", "\u5200\u7247\u70df\u55d3", "\u4e56\u5de7\u6b63\u592a"], {"default": "Melody"}], "voice_speed": ["FLOAT", {"default": 1, "tooltip": "Speech Rate. Valid range: 0.8~2.0, accurate to one decimal place.", "min": 0.8, "max": 2.0, "slider": true}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["video", "text", "voice", "voice_speed"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["VIDEO", "STRING", "STRING"], "output_is_list": [false, false, false], "output_name": ["VIDEO", "video_id", "duration"], "name": "KlingLipSyncTextToVideoNode", "display_name": "Kling Lip Sync Video with Text", "description": "Kling Lip Sync Text to Video Node. Syncs mouth movements in a video file to a text prompt. The video file should not be larger than 100MB, should have height/width between 720px and 1920px, and should be between 2s and 10s in length.", "python_module": "comfy_api_nodes.nodes_kling", "category": "api node/video/Kling", "output_node": false, "api_node": true}, "KlingVirtualTryOnNode": {"input": {"required": {"human_image": ["IMAGE", {}], "cloth_image": ["IMAGE", {}], "model_name": ["COMBO", {"options": ["kolors-virtual-try-on-v1", "kolors-virtual-try-on-v1-5"], "default": "kolors-virtual-try-on-v1"}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["human_image", "cloth_image", "model_name"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "KlingVirtualTryOnNode", "display_name": "Kling Virtual Try On", "description": "Kling Virtual Try On Node. Input a human image and a cloth image to try on the cloth on the human. You can merge multiple clothing item pictures into one image with a white background.", "python_module": "comfy_api_nodes.nodes_kling", "category": "api node/image/Kling", "output_node": false, "api_node": true}, "KlingImageGenerationNode": {"input": {"required": {"prompt": ["STRING", {"tooltip": "Positive text prompt", "multiline": true, "max_length": 500}], "negative_prompt": ["STRING", {"default": null, "tooltip": "Negative text prompt", "multiline": true}], "image_type": ["COMBO", {"options": ["subject", "face"], "default": null}], "image_fidelity": ["FLOAT", {"default": 0.5, "tooltip": "Reference intensity for user-uploaded images", "min": 0.0, "max": 1.0, "slider": true, "step": 0.01}], "human_fidelity": ["FLOAT", {"default": 0.45, "tooltip": "Subject reference similarity", "min": 0.0, "max": 1.0, "slider": true, "step": 0.01}], "model_name": ["COMBO", {"options": ["kling-v1", "kling-v1-5", "kling-v2"], "default": "kling-v1"}], "aspect_ratio": ["COMBO", {"options": ["16:9", "9:16", "1:1", "4:3", "3:4", "3:2", "2:3", "21:9"], "default": "16:9"}], "n": ["INT", {"default": 1, "tooltip": "Number of generated images", "min": 1, "max": 9}]}, "optional": {"image": ["IMAGE", {}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["prompt", "negative_prompt", "image_type", "image_fidelity", "human_fidelity", "model_name", "aspect_ratio", "n"], "optional": ["image"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "KlingImageGenerationNode", "display_name": "Kling Image Generation", "description": "Kling Image Generation Node. Generate an image from a text prompt with an optional reference image.", "python_module": "comfy_api_nodes.nodes_kling", "category": "api node/image/Kling", "output_node": false, "api_node": true}, "KlingSingleImageVideoEffectNode": {"input": {"required": {"image": ["IMAGE", {"tooltip": " Reference Image. URL or Base64 encoded string (without data:image prefix). File size cannot exceed 10MB, resolution not less than 300*300px, aspect ratio between 1:2.5 ~ 2.5:1"}], "effect_scene": ["COMBO", {"options": ["bloombloom", "dizzydizzy", "fuzzyfuzzy", "squish", "expansion"]}], "model_name": ["COMBO", {"options": ["kling-v1-6"]}], "duration": ["COMBO", {"options": ["5", "10"]}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["image", "effect_scene", "model_name", "duration"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["VIDEO", "STRING", "STRING"], "output_is_list": [false, false, false], "output_name": ["VIDEO", "video_id", "duration"], "name": "KlingSingleImageVideoEffectNode", "display_name": "Kling Video Effects", "description": "Achieve different special effects when generating a video based on the effect_scene.", "python_module": "comfy_api_nodes.nodes_kling", "category": "api node/video/Kling", "output_node": false, "api_node": true}, "KlingDualCharacterVideoEffectNode": {"input": {"required": {"image_left": ["IMAGE", {"tooltip": "Left side image"}], "image_right": ["IMAGE", {"tooltip": "Right side image"}], "effect_scene": ["COMBO", {"options": ["hug", "kiss", "heart_gesture"]}], "model_name": ["COMBO", {"options": ["kling-v1", "kling-v1-5", "kling-v1-6"], "default": "kling-v1"}], "mode": ["COMBO", {"options": ["std", "pro"], "default": "std"}], "duration": ["COMBO", {"options": ["5", "10"]}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["image_left", "image_right", "effect_scene", "model_name", "mode", "duration"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["VIDEO", "STRING"], "output_is_list": [false, false], "output_name": ["VIDEO", "duration"], "name": "KlingDualCharacterVideoEffectNode", "display_name": "Kling Dual Character Video Effects", "description": "Achieve different special effects when generating a video based on the effect_scene. First image will be positioned on left side, second on right side of the composite.", "python_module": "comfy_api_nodes.nodes_kling", "category": "api node/video/Kling", "output_node": false, "api_node": true}, "FluxProUltraImageNode": {"input": {"required": {"prompt": ["STRING", {"multiline": true, "default": "", "tooltip": "Prompt for the image generation"}], "prompt_upsampling": ["BOOLEAN", {"default": false, "tooltip": "Whether to perform upsampling on the prompt. If active, automatically modifies the prompt for more creative generation, but results are nondeterministic (same seed will not produce exactly the same result)."}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "control_after_generate": true, "tooltip": "The random seed used for creating the noise."}], "aspect_ratio": ["STRING", {"default": "16:9", "tooltip": "Aspect ratio of image; must be between 1:4 and 4:1."}], "raw": ["BOOLEAN", {"default": false, "tooltip": "When True, generate less processed, more natural-looking images."}]}, "optional": {"image_prompt": ["IMAGE"], "image_prompt_strength": ["FLOAT", {"default": 0.1, "min": 0.0, "max": 1.0, "step": 0.01, "tooltip": "Blend between the prompt and the image prompt."}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["prompt", "prompt_upsampling", "seed", "aspect_ratio", "raw"], "optional": ["image_prompt", "image_prompt_strength"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "FluxProUltraImageNode", "display_name": "Flux 1.1 [pro] Ultra Image", "description": "Generates images using Flux Pro 1.1 Ultra via api based on prompt and resolution.", "python_module": "comfy_api_nodes.nodes_bfl", "category": "api node/image/BFL", "output_node": false, "api_node": true}, "FluxKontextProImageNode": {"input": {"required": {"prompt": ["STRING", {"multiline": true, "default": "", "tooltip": "Prompt for the image generation - specify what and how to edit."}], "aspect_ratio": ["STRING", {"default": "16:9", "tooltip": "Aspect ratio of image; must be between 1:4 and 4:1."}], "guidance": ["FLOAT", {"default": 3.0, "min": 0.1, "max": 99.0, "step": 0.1, "tooltip": "Guidance strength for the image generation process"}], "steps": ["INT", {"default": 50, "min": 1, "max": 150, "tooltip": "Number of steps for the image generation process"}], "seed": ["INT", {"default": 1234, "min": 0, "max": 18446744073709551615, "control_after_generate": true, "tooltip": "The random seed used for creating the noise."}], "prompt_upsampling": ["BOOLEAN", {"default": false, "tooltip": "Whether to perform upsampling on the prompt. If active, automatically modifies the prompt for more creative generation, but results are nondeterministic (same seed will not produce exactly the same result)."}]}, "optional": {"input_image": ["IMAGE"]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["prompt", "aspect_ratio", "guidance", "steps", "seed", "prompt_upsampling"], "optional": ["input_image"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "FluxKontextProImageNode", "display_name": "Flux.1 Kontext [pro] Image", "description": "Edits images using Flux.1 Kontext [pro] via api based on prompt and aspect ratio.", "python_module": "comfy_api_nodes.nodes_bfl", "category": "api node/image/BFL", "output_node": false, "api_node": true}, "FluxKontextMaxImageNode": {"input": {"required": {"prompt": ["STRING", {"multiline": true, "default": "", "tooltip": "Prompt for the image generation - specify what and how to edit."}], "aspect_ratio": ["STRING", {"default": "16:9", "tooltip": "Aspect ratio of image; must be between 1:4 and 4:1."}], "guidance": ["FLOAT", {"default": 3.0, "min": 0.1, "max": 99.0, "step": 0.1, "tooltip": "Guidance strength for the image generation process"}], "steps": ["INT", {"default": 50, "min": 1, "max": 150, "tooltip": "Number of steps for the image generation process"}], "seed": ["INT", {"default": 1234, "min": 0, "max": 18446744073709551615, "control_after_generate": true, "tooltip": "The random seed used for creating the noise."}], "prompt_upsampling": ["BOOLEAN", {"default": false, "tooltip": "Whether to perform upsampling on the prompt. If active, automatically modifies the prompt for more creative generation, but results are nondeterministic (same seed will not produce exactly the same result)."}]}, "optional": {"input_image": ["IMAGE"]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["prompt", "aspect_ratio", "guidance", "steps", "seed", "prompt_upsampling"], "optional": ["input_image"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "FluxKontextMaxImageNode", "display_name": "Flux.1 Kontext [max] Image", "description": "Edits images using Flux.1 Kontext [max] via api based on prompt and aspect ratio.", "python_module": "comfy_api_nodes.nodes_bfl", "category": "api node/image/BFL", "output_node": false, "api_node": true}, "FluxProExpandNode": {"input": {"required": {"image": ["IMAGE"], "prompt": ["STRING", {"multiline": true, "default": "", "tooltip": "Prompt for the image generation"}], "prompt_upsampling": ["BOOLEAN", {"default": false, "tooltip": "Whether to perform upsampling on the prompt. If active, automatically modifies the prompt for more creative generation, but results are nondeterministic (same seed will not produce exactly the same result)."}], "top": ["INT", {"default": 0, "min": 0, "max": 2048, "tooltip": "Number of pixels to expand at the top of the image"}], "bottom": ["INT", {"default": 0, "min": 0, "max": 2048, "tooltip": "Number of pixels to expand at the bottom of the image"}], "left": ["INT", {"default": 0, "min": 0, "max": 2048, "tooltip": "Number of pixels to expand at the left side of the image"}], "right": ["INT", {"default": 0, "min": 0, "max": 2048, "tooltip": "Number of pixels to expand at the right side of the image"}], "guidance": ["FLOAT", {"default": 60, "min": 1.5, "max": 100, "tooltip": "Guidance strength for the image generation process"}], "steps": ["INT", {"default": 50, "min": 15, "max": 50, "tooltip": "Number of steps for the image generation process"}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "control_after_generate": true, "tooltip": "The random seed used for creating the noise."}]}, "optional": {}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["image", "prompt", "prompt_upsampling", "top", "bottom", "left", "right", "guidance", "steps", "seed"], "optional": [], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "FluxProExpandNode", "display_name": "Flux.1 Expand Image", "description": "Outpaints image based on prompt.", "python_module": "comfy_api_nodes.nodes_bfl", "category": "api node/image/BFL", "output_node": false, "api_node": true}, "FluxProFillNode": {"input": {"required": {"image": ["IMAGE"], "mask": ["MASK"], "prompt": ["STRING", {"multiline": true, "default": "", "tooltip": "Prompt for the image generation"}], "prompt_upsampling": ["BOOLEAN", {"default": false, "tooltip": "Whether to perform upsampling on the prompt. If active, automatically modifies the prompt for more creative generation, but results are nondeterministic (same seed will not produce exactly the same result)."}], "guidance": ["FLOAT", {"default": 60, "min": 1.5, "max": 100, "tooltip": "Guidance strength for the image generation process"}], "steps": ["INT", {"default": 50, "min": 15, "max": 50, "tooltip": "Number of steps for the image generation process"}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "control_after_generate": true, "tooltip": "The random seed used for creating the noise."}]}, "optional": {}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["image", "mask", "prompt", "prompt_upsampling", "guidance", "steps", "seed"], "optional": [], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "FluxProFillNode", "display_name": "Flux.1 Fill Image", "description": "Inpaints image based on mask and prompt.", "python_module": "comfy_api_nodes.nodes_bfl", "category": "api node/image/BFL", "output_node": false, "api_node": true}, "FluxProCannyNode": {"input": {"required": {"control_image": ["IMAGE"], "prompt": ["STRING", {"multiline": true, "default": "", "tooltip": "Prompt for the image generation"}], "prompt_upsampling": ["BOOLEAN", {"default": false, "tooltip": "Whether to perform upsampling on the prompt. If active, automatically modifies the prompt for more creative generation, but results are nondeterministic (same seed will not produce exactly the same result)."}], "canny_low_threshold": ["FLOAT", {"default": 0.1, "min": 0.01, "max": 0.99, "step": 0.01, "tooltip": "Low threshold for Canny edge detection; ignored if skip_processing is True"}], "canny_high_threshold": ["FLOAT", {"default": 0.4, "min": 0.01, "max": 0.99, "step": 0.01, "tooltip": "High threshold for Canny edge detection; ignored if skip_processing is True"}], "skip_preprocessing": ["BOOLEAN", {"default": false, "tooltip": "Whether to skip preprocessing; set to True if control_image already is canny-fied, False if it is a raw image."}], "guidance": ["FLOAT", {"default": 30, "min": 1, "max": 100, "tooltip": "Guidance strength for the image generation process"}], "steps": ["INT", {"default": 50, "min": 15, "max": 50, "tooltip": "Number of steps for the image generation process"}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "control_after_generate": true, "tooltip": "The random seed used for creating the noise."}]}, "optional": {}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["control_image", "prompt", "prompt_upsampling", "canny_low_threshold", "canny_high_threshold", "skip_preprocessing", "guidance", "steps", "seed"], "optional": [], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "FluxProCannyNode", "display_name": "Flux.1 Canny Control Image", "description": "Generate image using a control image (canny).", "python_module": "comfy_api_nodes.nodes_bfl", "category": "api node/image/BFL", "output_node": false, "api_node": true}, "FluxProDepthNode": {"input": {"required": {"control_image": ["IMAGE"], "prompt": ["STRING", {"multiline": true, "default": "", "tooltip": "Prompt for the image generation"}], "prompt_upsampling": ["BOOLEAN", {"default": false, "tooltip": "Whether to perform upsampling on the prompt. If active, automatically modifies the prompt for more creative generation, but results are nondeterministic (same seed will not produce exactly the same result)."}], "skip_preprocessing": ["BOOLEAN", {"default": false, "tooltip": "Whether to skip preprocessing; set to True if control_image already is depth-ified, False if it is a raw image."}], "guidance": ["FLOAT", {"default": 15, "min": 1, "max": 100, "tooltip": "Guidance strength for the image generation process"}], "steps": ["INT", {"default": 50, "min": 15, "max": 50, "tooltip": "Number of steps for the image generation process"}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "control_after_generate": true, "tooltip": "The random seed used for creating the noise."}]}, "optional": {}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["control_image", "prompt", "prompt_upsampling", "skip_preprocessing", "guidance", "steps", "seed"], "optional": [], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "FluxProDepthNode", "display_name": "Flux.1 Depth Control Image", "description": "Generate image using a control image (depth).", "python_module": "comfy_api_nodes.nodes_bfl", "category": "api node/image/BFL", "output_node": false, "api_node": true}, "ByteDanceImageNode": {"input": {"required": {"model": ["COMBO", {"tooltip": "Model name", "default": "seedream-3-0-t2i-250415", "multiselect": false, "options": ["seedream-3-0-t2i-250415"]}], "prompt": ["STRING", {"tooltip": "The text prompt used to generate the image", "multiline": true}], "size_preset": ["COMBO", {"tooltip": "Pick a recommended size. Select Custom to use the width and height below", "multiselect": false, "options": ["1024x1024 (1:1)", "864x1152 (3:4)", "1152x864 (4:3)", "1280x720 (16:9)", "720x1280 (9:16)", "832x1248 (2:3)", "1248x832 (3:2)", "1512x648 (21:9)", "2048x2048 (1:1)", "Custom"]}], "width": ["INT", {"tooltip": "Custom width for image. Value is working only if `size_preset` is set to `Custom`", "default": 1024, "min": 512, "max": 2048, "step": 64}], "height": ["INT", {"tooltip": "Custom height for image. Value is working only if `size_preset` is set to `Custom`", "default": 1024, "min": 512, "max": 2048, "step": 64}]}, "optional": {"seed": ["INT", {"tooltip": "Seed to use for generation", "default": 0, "min": 0, "max": 2147483647, "step": 1, "control_after_generate": true, "display": "number"}], "guidance_scale": ["FLOAT", {"tooltip": "Higher value makes the image follow the prompt more closely", "default": 2.5, "min": 1.0, "max": 10.0, "step": 0.01, "display": "number"}], "watermark": ["BOOLEAN", {"tooltip": "Whether to add an \"AI generated\" watermark to the image", "default": true}]}, "hidden": {"auth_token_comfy_org": ["AUTH_TOKEN_COMFY_ORG"], "api_key_comfy_org": ["API_KEY_COMFY_ORG"], "unique_id": ["UNIQUE_ID"]}}, "input_order": {"required": ["model", "prompt", "size_preset", "width", "height"], "optional": ["seed", "guidance_scale", "watermark"], "hidden": ["auth_token_comfy_org", "api_key_comfy_org", "unique_id"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "output_tooltips": [null], "name": "ByteDanceImageNode", "display_name": "ByteDance Image", "description": "Generate images using ByteDance models via api based on prompt", "python_module": "comfy_api_nodes.nodes_bytedance", "category": "api node/image/ByteDance", "output_node": false, "deprecated": false, "experimental": false, "api_node": true}, "ByteDanceImageEditNode": {"input": {"required": {"model": ["COMBO", {"tooltip": "Model name", "default": "seededit-3-0-i2i-250628", "multiselect": false, "options": ["seededit-3-0-i2i-250628"]}], "image": ["IMAGE", {"tooltip": "The base image to edit"}], "prompt": ["STRING", {"tooltip": "Instruction to edit image", "default": "", "multiline": true}]}, "optional": {"seed": ["INT", {"tooltip": "Seed to use for generation", "default": 0, "min": 0, "max": 2147483647, "step": 1, "control_after_generate": true, "display": "number"}], "guidance_scale": ["FLOAT", {"tooltip": "Higher value makes the image follow the prompt more closely", "default": 5.5, "min": 1.0, "max": 10.0, "step": 0.01, "display": "number"}], "watermark": ["BOOLEAN", {"tooltip": "Whether to add an \"AI generated\" watermark to the image", "default": true}]}, "hidden": {"auth_token_comfy_org": ["AUTH_TOKEN_COMFY_ORG"], "api_key_comfy_org": ["API_KEY_COMFY_ORG"], "unique_id": ["UNIQUE_ID"]}}, "input_order": {"required": ["model", "image", "prompt"], "optional": ["seed", "guidance_scale", "watermark"], "hidden": ["auth_token_comfy_org", "api_key_comfy_org", "unique_id"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "output_tooltips": [null], "name": "ByteDanceImageEditNode", "display_name": "ByteDance Image Edit", "description": "Edit images using ByteDance models via api based on prompt", "python_module": "comfy_api_nodes.nodes_bytedance", "category": "api node/video/ByteDance", "output_node": false, "deprecated": false, "experimental": false, "api_node": true}, "LumaImageNode": {"input": {"required": {"prompt": ["STRING", {"multiline": true, "default": "", "tooltip": "Prompt for the image generation"}], "model": [["photon-1", "photon-flash-1"]], "aspect_ratio": [["1:1", "16:9", "9:16", "4:3", "3:4", "21:9", "9:21"], {"default": "16:9"}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "control_after_generate": true, "tooltip": "Seed to determine if node should re-run; actual results are nondeterministic regardless of seed."}], "style_image_weight": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01, "tooltip": "Weight of style image. Ignored if no style_image provided."}]}, "optional": {"image_luma_ref": ["LUMA_REF", {"tooltip": "Luma Reference node connection to influence generation with input images; up to 4 images can be considered."}], "style_image": ["IMAGE", {"tooltip": "Style reference image; only 1 image will be used."}], "character_image": ["IMAGE", {"tooltip": "Character reference images; can be a batch of multiple, up to 4 images can be considered."}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["prompt", "model", "aspect_ratio", "seed", "style_image_weight"], "optional": ["image_luma_ref", "style_image", "character_image"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "LumaImageNode", "display_name": "Luma Text to Image", "description": "Generates images synchronously based on prompt and aspect ratio.", "python_module": "comfy_api_nodes.nodes_luma", "category": "api node/image/Luma", "output_node": false, "api_node": true}, "LumaImageModifyNode": {"input": {"required": {"image": ["IMAGE"], "prompt": ["STRING", {"multiline": true, "default": "", "tooltip": "Prompt for the image generation"}], "image_weight": ["FLOAT", {"default": 0.1, "min": 0.0, "max": 0.98, "step": 0.01, "tooltip": "Weight of the image; the closer to 1.0, the less the image will be modified."}], "model": [["photon-1", "photon-flash-1"]], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "control_after_generate": true, "tooltip": "Seed to determine if node should re-run; actual results are nondeterministic regardless of seed."}]}, "optional": {}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["image", "prompt", "image_weight", "model", "seed"], "optional": [], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "LumaImageModifyNode", "display_name": "Luma Image to Image", "description": "Modifies images synchronously based on prompt and aspect ratio.", "python_module": "comfy_api_nodes.nodes_luma", "category": "api node/image/Luma", "output_node": false, "api_node": true}, "LumaVideoNode": {"input": {"required": {"prompt": ["STRING", {"multiline": true, "default": "", "tooltip": "Prompt for the video generation"}], "model": [["ray-2", "ray-flash-2", "ray-1-6"]], "aspect_ratio": [["1:1", "16:9", "9:16", "4:3", "3:4", "21:9", "9:21"], {"default": "16:9"}], "resolution": [["540p", "720p", "1080p", "4k"], {"default": "540p"}], "duration": [["5s", "9s"]], "loop": ["BOOLEAN", {"default": false}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "control_after_generate": true, "tooltip": "Seed to determine if node should re-run; actual results are nondeterministic regardless of seed."}]}, "optional": {"luma_concepts": ["LUMA_CONCEPTS", {"tooltip": "Optional Camera Concepts to dictate camera motion via the Luma Concepts node."}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["prompt", "model", "aspect_ratio", "resolution", "duration", "loop", "seed"], "optional": ["luma_concepts"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["VIDEO"], "output_is_list": [false], "output_name": ["VIDEO"], "name": "LumaVideoNode", "display_name": "Luma Text to Video", "description": "Generates videos synchronously based on prompt and output_size.", "python_module": "comfy_api_nodes.nodes_luma", "category": "api node/video/Luma", "output_node": false, "api_node": true}, "LumaImageToVideoNode": {"input": {"required": {"prompt": ["STRING", {"multiline": true, "default": "", "tooltip": "Prompt for the video generation"}], "model": [["ray-2", "ray-flash-2", "ray-1-6"]], "resolution": [["540p", "720p", "1080p", "4k"], {"default": "540p"}], "duration": [["5s", "9s"]], "loop": ["BOOLEAN", {"default": false}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "control_after_generate": true, "tooltip": "Seed to determine if node should re-run; actual results are nondeterministic regardless of seed."}]}, "optional": {"first_image": ["IMAGE", {"tooltip": "First frame of generated video."}], "last_image": ["IMAGE", {"tooltip": "Last frame of generated video."}], "luma_concepts": ["LUMA_CONCEPTS", {"tooltip": "Optional Camera Concepts to dictate camera motion via the Luma Concepts node."}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["prompt", "model", "resolution", "duration", "loop", "seed"], "optional": ["first_image", "last_image", "luma_concepts"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["VIDEO"], "output_is_list": [false], "output_name": ["VIDEO"], "name": "LumaImageToVideoNode", "display_name": "Luma Image to Video", "description": "Generates videos synchronously based on prompt, input images, and output_size.", "python_module": "comfy_api_nodes.nodes_luma", "category": "api node/video/Luma", "output_node": false, "api_node": true}, "LumaReferenceNode": {"input": {"required": {"image": ["IMAGE", {"tooltip": "Image to use as reference."}], "weight": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01, "tooltip": "Weight of image reference."}]}, "optional": {"luma_ref": ["LUMA_REF"]}}, "input_order": {"required": ["image", "weight"], "optional": ["luma_ref"]}, "output": ["LUMA_REF"], "output_is_list": [false], "output_name": ["luma_ref"], "name": "LumaReferenceNode", "display_name": "Luma Reference", "description": "Holds an image and weight for use with Luma Generate Image node.", "python_module": "comfy_api_nodes.nodes_luma", "category": "api node/image/Luma", "output_node": false}, "LumaConceptsNode": {"input": {"required": {"concept1": [["None", "truck_left", "pan_right", "pedestal_down", "low_angle", "pedestal_up", "selfie", "pan_left", "roll_right", "zoom_in", "over_the_shoulder", "orbit_right", "orbit_left", "static", "tiny_planet", "high_angle", "bolt_cam", "dolly_zoom", "overhead", "zoom_out", "handheld", "roll_left", "pov", "aerial_drone", "push_in", "crane_down", "truck_right", "tilt_down", "elevator_doors", "tilt_up", "ground_level", "pull_out", "aerial", "crane_up", "eye_level"]], "concept2": [["None", "truck_left", "pan_right", "pedestal_down", "low_angle", "pedestal_up", "selfie", "pan_left", "roll_right", "zoom_in", "over_the_shoulder", "orbit_right", "orbit_left", "static", "tiny_planet", "high_angle", "bolt_cam", "dolly_zoom", "overhead", "zoom_out", "handheld", "roll_left", "pov", "aerial_drone", "push_in", "crane_down", "truck_right", "tilt_down", "elevator_doors", "tilt_up", "ground_level", "pull_out", "aerial", "crane_up", "eye_level"]], "concept3": [["None", "truck_left", "pan_right", "pedestal_down", "low_angle", "pedestal_up", "selfie", "pan_left", "roll_right", "zoom_in", "over_the_shoulder", "orbit_right", "orbit_left", "static", "tiny_planet", "high_angle", "bolt_cam", "dolly_zoom", "overhead", "zoom_out", "handheld", "roll_left", "pov", "aerial_drone", "push_in", "crane_down", "truck_right", "tilt_down", "elevator_doors", "tilt_up", "ground_level", "pull_out", "aerial", "crane_up", "eye_level"]], "concept4": [["None", "truck_left", "pan_right", "pedestal_down", "low_angle", "pedestal_up", "selfie", "pan_left", "roll_right", "zoom_in", "over_the_shoulder", "orbit_right", "orbit_left", "static", "tiny_planet", "high_angle", "bolt_cam", "dolly_zoom", "overhead", "zoom_out", "handheld", "roll_left", "pov", "aerial_drone", "push_in", "crane_down", "truck_right", "tilt_down", "elevator_doors", "tilt_up", "ground_level", "pull_out", "aerial", "crane_up", "eye_level"]]}, "optional": {"luma_concepts": ["LUMA_CONCEPTS", {"tooltip": "Optional Camera Concepts to add to the ones chosen here."}]}}, "input_order": {"required": ["concept1", "concept2", "concept3", "concept4"], "optional": ["luma_concepts"]}, "output": ["LUMA_CONCEPTS"], "output_is_list": [false], "output_name": ["luma_concepts"], "name": "LumaConceptsNode", "display_name": "Luma Concepts", "description": "Holds one or more Camera Concepts for use with Luma Text to Video and Luma Image to Video nodes.", "python_module": "comfy_api_nodes.nodes_luma", "category": "api node/video/Luma", "output_node": false}, "RecraftTextToImageNode": {"input": {"required": {"prompt": ["STRING", {"multiline": true, "default": "", "tooltip": "Prompt for the image generation."}], "size": [["1024x1024", "1365x1024", "1024x1365", "1536x1024", "1024x1536", "1820x1024", "1024x1820", "1024x2048", "2048x1024", "1434x1024", "1024x1434", "1024x1280", "1280x1024", "1024x1707", "1707x1024"], {"default": "1024x1024", "tooltip": "The size of the generated image."}], "n": ["INT", {"default": 1, "min": 1, "max": 6, "tooltip": "The number of images to generate."}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "control_after_generate": true, "tooltip": "Seed to determine if node should re-run; actual results are nondeterministic regardless of seed."}]}, "optional": {"recraft_style": ["RECRAFT_V3_STYLE"], "negative_prompt": ["STRING", {"default": "", "forceInput": true, "tooltip": "An optional text description of undesired elements on an image."}], "recraft_controls": ["RECRAFT_CONTROLS", {"tooltip": "Optional additional controls over the generation via the Recraft Controls node."}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["prompt", "size", "n", "seed"], "optional": ["recraft_style", "negative_prompt", "recraft_controls"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "RecraftTextToImageNode", "display_name": "Recraft Text to Image", "description": "Generates images synchronously based on prompt and resolution.", "python_module": "comfy_api_nodes.nodes_recraft", "category": "api node/image/Recraft", "output_node": false, "api_node": true}, "RecraftImageToImageNode": {"input": {"required": {"image": ["IMAGE"], "prompt": ["STRING", {"multiline": true, "default": "", "tooltip": "Prompt for the image generation."}], "n": ["INT", {"default": 1, "min": 1, "max": 6, "tooltip": "The number of images to generate."}], "strength": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 1.0, "step": 0.01, "tooltip": "Defines the difference with the original image, should lie in [0, 1], where 0 means almost identical, and 1 means miserable similarity."}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "control_after_generate": true, "tooltip": "Seed to determine if node should re-run; actual results are nondeterministic regardless of seed."}]}, "optional": {"recraft_style": ["RECRAFT_V3_STYLE"], "negative_prompt": ["STRING", {"default": "", "forceInput": true, "tooltip": "An optional text description of undesired elements on an image."}], "recraft_controls": ["RECRAFT_CONTROLS", {"tooltip": "Optional additional controls over the generation via the Recraft Controls node."}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG"}}, "input_order": {"required": ["image", "prompt", "n", "strength", "seed"], "optional": ["recraft_style", "negative_prompt", "recraft_controls"], "hidden": ["auth_token", "comfy_api_key"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "RecraftImageToImageNode", "display_name": "Recraft Image to Image", "description": "Modify image based on prompt and strength.", "python_module": "comfy_api_nodes.nodes_recraft", "category": "api node/image/Recraft", "output_node": false, "api_node": true}, "RecraftImageInpaintingNode": {"input": {"required": {"image": ["IMAGE"], "mask": ["MASK"], "prompt": ["STRING", {"multiline": true, "default": "", "tooltip": "Prompt for the image generation."}], "n": ["INT", {"default": 1, "min": 1, "max": 6, "tooltip": "The number of images to generate."}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "control_after_generate": true, "tooltip": "Seed to determine if node should re-run; actual results are nondeterministic regardless of seed."}]}, "optional": {"recraft_style": ["RECRAFT_V3_STYLE"], "negative_prompt": ["STRING", {"default": "", "forceInput": true, "tooltip": "An optional text description of undesired elements on an image."}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG"}}, "input_order": {"required": ["image", "mask", "prompt", "n", "seed"], "optional": ["recraft_style", "negative_prompt"], "hidden": ["auth_token", "comfy_api_key"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "RecraftImageInpaintingNode", "display_name": "Recraft Image Inpainting", "description": "Modify image based on prompt and mask.", "python_module": "comfy_api_nodes.nodes_recraft", "category": "api node/image/Recraft", "output_node": false, "api_node": true}, "RecraftTextToVectorNode": {"input": {"required": {"prompt": ["STRING", {"multiline": true, "default": "", "tooltip": "Prompt for the image generation."}], "substyle": [["None", "bold_stroke", "chemistry", "colored_stencil", "contour_pop_art", "cosmics", "cutout", "depressive", "editorial", "emotional_flat", "engraving", "infographical", "line_art", "line_circuit", "linocut", "marker_outline", "mosaic", "naivector", "roundish_flat", "seamless", "segmented_colors", "sharp_contrast", "thin", "vector_photo", "vivid_shapes"]], "size": [["1024x1024", "1365x1024", "1024x1365", "1536x1024", "1024x1536", "1820x1024", "1024x1820", "1024x2048", "2048x1024", "1434x1024", "1024x1434", "1024x1280", "1280x1024", "1024x1707", "1707x1024"], {"default": "1024x1024", "tooltip": "The size of the generated image."}], "n": ["INT", {"default": 1, "min": 1, "max": 6, "tooltip": "The number of images to generate."}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "control_after_generate": true, "tooltip": "Seed to determine if node should re-run; actual results are nondeterministic regardless of seed."}]}, "optional": {"negative_prompt": ["STRING", {"default": "", "forceInput": true, "tooltip": "An optional text description of undesired elements on an image."}], "recraft_controls": ["RECRAFT_CONTROLS", {"tooltip": "Optional additional controls over the generation via the Recraft Controls node."}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["prompt", "substyle", "size", "n", "seed"], "optional": ["negative_prompt", "recraft_controls"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["SVG"], "output_is_list": [false], "output_name": ["SVG"], "name": "RecraftTextToVectorNode", "display_name": "Recraft Text to Vector", "description": "Generates SVG synchronously based on prompt and resolution.", "python_module": "comfy_api_nodes.nodes_recraft", "category": "api node/image/Recraft", "output_node": false, "api_node": true}, "RecraftVectorizeImageNode": {"input": {"required": {"image": ["IMAGE"]}, "optional": {}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG"}}, "input_order": {"required": ["image"], "optional": [], "hidden": ["auth_token", "comfy_api_key"]}, "output": ["SVG"], "output_is_list": [false], "output_name": ["SVG"], "name": "RecraftVectorizeImageNode", "display_name": "Recraft Vectorize Image", "description": "Generates SVG synchronously from an input image.", "python_module": "comfy_api_nodes.nodes_recraft", "category": "api node/image/Recraft", "output_node": false, "api_node": true}, "RecraftRemoveBackgroundNode": {"input": {"required": {"image": ["IMAGE"]}, "optional": {}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG"}}, "input_order": {"required": ["image"], "optional": [], "hidden": ["auth_token", "comfy_api_key"]}, "output": ["IMAGE", "MASK"], "output_is_list": [false, false], "output_name": ["IMAGE", "MASK"], "name": "RecraftRemoveBackgroundNode", "display_name": "Recraft Remove Background", "description": "Remove background from image, and return processed image and mask.", "python_module": "comfy_api_nodes.nodes_recraft", "category": "api node/image/Recraft", "output_node": false, "api_node": true}, "RecraftReplaceBackgroundNode": {"input": {"required": {"image": ["IMAGE"], "prompt": ["STRING", {"multiline": true, "default": "", "tooltip": "Prompt for the image generation."}], "n": ["INT", {"default": 1, "min": 1, "max": 6, "tooltip": "The number of images to generate."}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "control_after_generate": true, "tooltip": "Seed to determine if node should re-run; actual results are nondeterministic regardless of seed."}]}, "optional": {"recraft_style": ["RECRAFT_V3_STYLE"], "negative_prompt": ["STRING", {"default": "", "forceInput": true, "tooltip": "An optional text description of undesired elements on an image."}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG"}}, "input_order": {"required": ["image", "prompt", "n", "seed"], "optional": ["recraft_style", "negative_prompt"], "hidden": ["auth_token", "comfy_api_key"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "RecraftReplaceBackgroundNode", "display_name": "Recraft Replace Background", "description": "Replace background on image, based on provided prompt.", "python_module": "comfy_api_nodes.nodes_recraft", "category": "api node/image/Recraft", "output_node": false, "api_node": true}, "RecraftCrispUpscaleNode": {"input": {"required": {"image": ["IMAGE"]}, "optional": {}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG"}}, "input_order": {"required": ["image"], "optional": [], "hidden": ["auth_token", "comfy_api_key"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "RecraftCrispUpscaleNode", "display_name": "Recraft Crisp Upscale Image", "description": "Upscale image synchronously.\nEnhances a given raster image using \u2018crisp upscale\u2019 tool, increasing image resolution, making the image sharper and cleaner.", "python_module": "comfy_api_nodes.nodes_recraft", "category": "api node/image/Recraft", "output_node": false, "api_node": true}, "RecraftCreativeUpscaleNode": {"input": {"required": {"image": ["IMAGE"]}, "optional": {}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG"}}, "input_order": {"required": ["image"], "optional": [], "hidden": ["auth_token", "comfy_api_key"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "RecraftCreativeUpscaleNode", "display_name": "Recraft Creative Upscale Image", "description": "Upscale image synchronously.\nEnhances a given raster image using \u2018creative upscale\u2019 tool, boosting resolution with a focus on refining small details and faces.", "python_module": "comfy_api_nodes.nodes_recraft", "category": "api node/image/Recraft", "output_node": false, "api_node": true}, "RecraftStyleV3RealisticImage": {"input": {"required": {"substyle": [["None", "b_and_w", "enterprise", "evening_light", "faded_nostalgia", "forest_life", "hard_flash", "hdr", "motion_blur", "mystic_naturalism", "natural_light", "natural_tones", "organic_calm", "real_life_glow", "retro_realism", "retro_snapshot", "studio_portrait", "urban_drama", "village_realism", "warm_folk"]]}}, "input_order": {"required": ["substyle"]}, "output": ["RECRAFT_V3_STYLE"], "output_is_list": [false], "output_name": ["recraft_style"], "name": "RecraftStyleV3RealisticImage", "display_name": "Recraft Style - Realistic Image", "description": "Select realistic_image style and optional substyle.", "python_module": "comfy_api_nodes.nodes_recraft", "category": "api node/image/Recraft", "output_node": false}, "RecraftStyleV3DigitalIllustration": {"input": {"required": {"substyle": [["None", "2d_art_poster", "2d_art_poster_2", "antiquarian", "bold_fantasy", "child_book", "child_books", "cover", "crosshatch", "digital_engraving", "engraving_color", "expressionism", "freehand_details", "grain", "grain_20", "graphic_intensity", "hand_drawn", "hand_drawn_outline", "handmade_3d", "hard_comics", "infantile_sketch", "long_shadow", "modern_folk", "multicolor", "neon_calm", "noir", "nostalgic_pastel", "outline_details", "pastel_gradient", "pastel_sketch", "pixel_art", "plastic", "pop_art", "pop_renaissance", "seamless", "street_art", "tablet_sketch", "urban_glow", "urban_sketching", "vanilla_dreams", "young_adult_book", "young_adult_book_2"]]}}, "input_order": {"required": ["substyle"]}, "output": ["RECRAFT_V3_STYLE"], "output_is_list": [false], "output_name": ["recraft_style"], "name": "RecraftStyleV3DigitalIllustration", "display_name": "Recraft Style - Digital Illustration", "description": "Select realistic_image style and optional substyle.", "python_module": "comfy_api_nodes.nodes_recraft", "category": "api node/image/Recraft", "output_node": false}, "RecraftStyleV3LogoRaster": {"input": {"required": {"substyle": [["emblem_graffiti", "emblem_pop_art", "emblem_punk", "emblem_stamp", "emblem_vintage"]]}}, "input_order": {"required": ["substyle"]}, "output": ["RECRAFT_V3_STYLE"], "output_is_list": [false], "output_name": ["recraft_style"], "name": "RecraftStyleV3LogoRaster", "display_name": "Recraft Style - Logo Raster", "description": "Select realistic_image style and optional substyle.", "python_module": "comfy_api_nodes.nodes_recraft", "category": "api node/image/Recraft", "output_node": false}, "RecraftStyleV3InfiniteStyleLibrary": {"input": {"required": {"style_id": ["STRING", {"default": "", "tooltip": "UUID of style from Infinite Style Library."}]}}, "input_order": {"required": ["style_id"]}, "output": ["RECRAFT_V3_STYLE"], "output_is_list": [false], "output_name": ["recraft_style"], "name": "RecraftStyleV3InfiniteStyleLibrary", "display_name": "Recraft Style - Infinite Style Library", "description": "Select style based on preexisting UUID from Recraft's Infinite Style Library.", "python_module": "comfy_api_nodes.nodes_recraft", "category": "api node/image/Recraft", "output_node": false}, "RecraftColorRGB": {"input": {"required": {"r": ["INT", {"default": 0, "min": 0, "max": 255, "tooltip": "Red value of color."}], "g": ["INT", {"default": 0, "min": 0, "max": 255, "tooltip": "Green value of color."}], "b": ["INT", {"default": 0, "min": 0, "max": 255, "tooltip": "Blue value of color."}]}, "optional": {"recraft_color": ["RECRAFT_COLOR"]}}, "input_order": {"required": ["r", "g", "b"], "optional": ["recraft_color"]}, "output": ["RECRAFT_COLOR"], "output_is_list": [false], "output_name": ["recraft_color"], "name": "RecraftColorRGB", "display_name": "Recraft Color RGB", "description": "Create Recraft Color by choosing specific RGB values.", "python_module": "comfy_api_nodes.nodes_recraft", "category": "api node/image/Recraft", "output_node": false}, "RecraftControls": {"input": {"required": {}, "optional": {"colors": ["RECRAFT_COLOR"], "background_color": ["RECRAFT_COLOR"]}}, "input_order": {"required": [], "optional": ["colors", "background_color"]}, "output": ["RECRAFT_CONTROLS"], "output_is_list": [false], "output_name": ["recraft_controls"], "name": "RecraftControls", "display_name": "Recraft Controls", "description": "Create Recraft Controls for customizing Recraft generation.", "python_module": "comfy_api_nodes.nodes_recraft", "category": "api node/image/Recraft", "output_node": false}, "PixverseTextToVideoNode": {"input": {"required": {"prompt": ["STRING", {"multiline": true, "default": "", "tooltip": "Prompt for the video generation"}], "aspect_ratio": [["16:9", "4:3", "1:1", "3:4", "9:16"]], "quality": [["360p", "540p", "720p", "1080p"], {"default": "540p"}], "duration_seconds": [[5, 8]], "motion_mode": [["normal", "fast"]], "seed": ["INT", {"default": 0, "min": 0, "max": 2147483647, "control_after_generate": true, "tooltip": "Seed for video generation."}]}, "optional": {"negative_prompt": ["STRING", {"default": "", "forceInput": true, "tooltip": "An optional text description of undesired elements on an image."}], "pixverse_template": ["PIXVERSE_TEMPLATE", {"tooltip": "An optional template to influence style of generation, created by the PixVerse Template node."}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["prompt", "aspect_ratio", "quality", "duration_seconds", "motion_mode", "seed"], "optional": ["negative_prompt", "pixverse_template"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["VIDEO"], "output_is_list": [false], "output_name": ["VIDEO"], "name": "PixverseTextToVideoNode", "display_name": "PixVerse Text to Video", "description": "Generates videos based on prompt and output_size.", "python_module": "comfy_api_nodes.nodes_pixverse", "category": "api node/video/PixVerse", "output_node": false, "api_node": true}, "PixverseImageToVideoNode": {"input": {"required": {"image": ["IMAGE"], "prompt": ["STRING", {"multiline": true, "default": "", "tooltip": "Prompt for the video generation"}], "quality": [["360p", "540p", "720p", "1080p"], {"default": "540p"}], "duration_seconds": [[5, 8]], "motion_mode": [["normal", "fast"]], "seed": ["INT", {"default": 0, "min": 0, "max": 2147483647, "control_after_generate": true, "tooltip": "Seed for video generation."}]}, "optional": {"negative_prompt": ["STRING", {"default": "", "forceInput": true, "tooltip": "An optional text description of undesired elements on an image."}], "pixverse_template": ["PIXVERSE_TEMPLATE", {"tooltip": "An optional template to influence style of generation, created by the PixVerse Template node."}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["image", "prompt", "quality", "duration_seconds", "motion_mode", "seed"], "optional": ["negative_prompt", "pixverse_template"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["VIDEO"], "output_is_list": [false], "output_name": ["VIDEO"], "name": "PixverseImageToVideoNode", "display_name": "PixVerse Image to Video", "description": "Generates videos based on prompt and output_size.", "python_module": "comfy_api_nodes.nodes_pixverse", "category": "api node/video/PixVerse", "output_node": false, "api_node": true}, "PixverseTransitionVideoNode": {"input": {"required": {"first_frame": ["IMAGE"], "last_frame": ["IMAGE"], "prompt": ["STRING", {"multiline": true, "default": "", "tooltip": "Prompt for the video generation"}], "quality": [["360p", "540p", "720p", "1080p"], {"default": "540p"}], "duration_seconds": [[5, 8]], "motion_mode": [["normal", "fast"]], "seed": ["INT", {"default": 0, "min": 0, "max": 2147483647, "control_after_generate": true, "tooltip": "Seed for video generation."}]}, "optional": {"negative_prompt": ["STRING", {"default": "", "forceInput": true, "tooltip": "An optional text description of undesired elements on an image."}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["first_frame", "last_frame", "prompt", "quality", "duration_seconds", "motion_mode", "seed"], "optional": ["negative_prompt"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["VIDEO"], "output_is_list": [false], "output_name": ["VIDEO"], "name": "PixverseTransitionVideoNode", "display_name": "PixVerse Transition Video", "description": "Generates videos based on prompt and output_size.", "python_module": "comfy_api_nodes.nodes_pixverse", "category": "api node/video/PixVerse", "output_node": false, "api_node": true}, "PixverseTemplateNode": {"input": {"required": {"template": [["Microwave", "Suit Swagger", "Anything, Robot", "Subject 3 Fever", "kiss kiss"]]}}, "input_order": {"required": ["template"]}, "output": ["PIXVERSE_TEMPLATE"], "output_is_list": [false], "output_name": ["pixverse_template"], "name": "PixverseTemplateNode", "display_name": "PixVerse Template", "description": "", "python_module": "comfy_api_nodes.nodes_pixverse", "category": "api node/video/PixVerse", "output_node": false}, "StabilityStableImageUltraNode": {"input": {"required": {"prompt": ["STRING", {"tooltip": "What you wish to see in the output image. A strong, descriptive prompt that clearly defineselements, colors, and subjects will lead to better results. To control the weight of a given word use the format `(word:weight)`,where `word` is the word you'd like to control the weight of and `weight`is a value between 0 and 1. For example: `The sky was a crisp (blue:0.3) and (green:0.8)`would convey a sky that was blue and green, but more green than blue.", "default": "", "multiline": true}], "aspect_ratio": ["COMBO", {"tooltip": "Aspect ratio of generated image.", "default": "1:1", "multiselect": false, "options": ["1:1", "16:9", "9:16", "3:2", "2:3", "5:4", "4:5", "21:9", "9:21"]}], "style_preset": ["COMBO", {"tooltip": "Optional desired style of generated image.", "multiselect": false, "options": ["None", "3d-model", "analog-film", "anime", "cinematic", "comic-book", "digital-art", "enhance", "fantasy-art", "isometric", "line-art", "low-poly", "modeling-compound", "neon-punk", "origami", "photographic", "pixel-art", "tile-texture"]}], "seed": ["INT", {"tooltip": "The random seed used for creating the noise.", "default": 0, "min": 0, "max": 4294967294, "step": 1, "control_after_generate": true, "display": "number"}]}, "optional": {"image": ["IMAGE", {}], "negative_prompt": ["STRING", {"tooltip": "A blurb of text describing what you do not wish to see in the output image. This is an advanced feature.", "default": "", "forceInput": true, "multiline": false}], "image_denoise": ["FLOAT", {"tooltip": "Denoise of input image; 0.0 yields image identical to input, 1.0 is as if no image was provided at all.", "default": 0.5, "min": 0.0, "max": 1.0, "step": 0.01}]}, "hidden": {"auth_token_comfy_org": ["AUTH_TOKEN_COMFY_ORG"], "api_key_comfy_org": ["API_KEY_COMFY_ORG"], "unique_id": ["UNIQUE_ID"]}}, "input_order": {"required": ["prompt", "aspect_ratio", "style_preset", "seed"], "optional": ["image", "negative_prompt", "image_denoise"], "hidden": ["auth_token_comfy_org", "api_key_comfy_org", "unique_id"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "output_tooltips": [null], "name": "StabilityStableImageUltraNode", "display_name": "Stability AI Stable Image Ultra", "description": "Generates images synchronously based on prompt and resolution.", "python_module": "comfy_api_nodes.nodes_stability", "category": "api node/image/Stability AI", "output_node": false, "deprecated": false, "experimental": false, "api_node": true}, "StabilityStableImageSD_3_5Node": {"input": {"required": {"prompt": ["STRING", {"tooltip": "What you wish to see in the output image. A strong, descriptive prompt that clearly defines elements, colors, and subjects will lead to better results.", "default": "", "multiline": true}], "model": ["COMBO", {"multiselect": false, "options": ["sd3.5-large", "sd3.5-medium"]}], "aspect_ratio": ["COMBO", {"tooltip": "Aspect ratio of generated image.", "default": "1:1", "multiselect": false, "options": ["1:1", "16:9", "9:16", "3:2", "2:3", "5:4", "4:5", "21:9", "9:21"]}], "style_preset": ["COMBO", {"tooltip": "Optional desired style of generated image.", "multiselect": false, "options": ["None", "3d-model", "analog-film", "anime", "cinematic", "comic-book", "digital-art", "enhance", "fantasy-art", "isometric", "line-art", "low-poly", "modeling-compound", "neon-punk", "origami", "photographic", "pixel-art", "tile-texture"]}], "cfg_scale": ["FLOAT", {"tooltip": "How strictly the diffusion process adheres to the prompt text (higher values keep your image closer to your prompt)", "default": 4.0, "min": 1.0, "max": 10.0, "step": 0.1}], "seed": ["INT", {"tooltip": "The random seed used for creating the noise.", "default": 0, "min": 0, "max": 4294967294, "step": 1, "control_after_generate": true, "display": "number"}]}, "optional": {"image": ["IMAGE", {}], "negative_prompt": ["STRING", {"tooltip": "Keywords of what you do not wish to see in the output image. This is an advanced feature.", "default": "", "forceInput": true, "multiline": false}], "image_denoise": ["FLOAT", {"tooltip": "Denoise of input image; 0.0 yields image identical to input, 1.0 is as if no image was provided at all.", "default": 0.5, "min": 0.0, "max": 1.0, "step": 0.01}]}, "hidden": {"auth_token_comfy_org": ["AUTH_TOKEN_COMFY_ORG"], "api_key_comfy_org": ["API_KEY_COMFY_ORG"], "unique_id": ["UNIQUE_ID"]}}, "input_order": {"required": ["prompt", "model", "aspect_ratio", "style_preset", "cfg_scale", "seed"], "optional": ["image", "negative_prompt", "image_denoise"], "hidden": ["auth_token_comfy_org", "api_key_comfy_org", "unique_id"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "output_tooltips": [null], "name": "StabilityStableImageSD_3_5Node", "display_name": "Stability AI Stable Diffusion 3.5 Image", "description": "Generates images synchronously based on prompt and resolution.", "python_module": "comfy_api_nodes.nodes_stability", "category": "api node/image/Stability AI", "output_node": false, "deprecated": false, "experimental": false, "api_node": true}, "StabilityUpscaleConservativeNode": {"input": {"required": {"image": ["IMAGE", {}], "prompt": ["STRING", {"tooltip": "What you wish to see in the output image. A strong, descriptive prompt that clearly defines elements, colors, and subjects will lead to better results.", "default": "", "multiline": true}], "creativity": ["FLOAT", {"tooltip": "Controls the likelihood of creating additional details not heavily conditioned by the init image.", "default": 0.35, "min": 0.2, "max": 0.5, "step": 0.01}], "seed": ["INT", {"tooltip": "The random seed used for creating the noise.", "default": 0, "min": 0, "max": 4294967294, "step": 1, "control_after_generate": true, "display": "number"}]}, "optional": {"negative_prompt": ["STRING", {"tooltip": "Keywords of what you do not wish to see in the output image. This is an advanced feature.", "default": "", "forceInput": true, "multiline": false}]}, "hidden": {"auth_token_comfy_org": ["AUTH_TOKEN_COMFY_ORG"], "api_key_comfy_org": ["API_KEY_COMFY_ORG"], "unique_id": ["UNIQUE_ID"]}}, "input_order": {"required": ["image", "prompt", "creativity", "seed"], "optional": ["negative_prompt"], "hidden": ["auth_token_comfy_org", "api_key_comfy_org", "unique_id"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "output_tooltips": [null], "name": "StabilityUpscaleConservativeNode", "display_name": "Stability AI Upscale Conservative", "description": "Upscale image with minimal alterations to 4K resolution.", "python_module": "comfy_api_nodes.nodes_stability", "category": "api node/image/Stability AI", "output_node": false, "deprecated": false, "experimental": false, "api_node": true}, "StabilityUpscaleCreativeNode": {"input": {"required": {"image": ["IMAGE", {}], "prompt": ["STRING", {"tooltip": "What you wish to see in the output image. A strong, descriptive prompt that clearly defines elements, colors, and subjects will lead to better results.", "default": "", "multiline": true}], "creativity": ["FLOAT", {"tooltip": "Controls the likelihood of creating additional details not heavily conditioned by the init image.", "default": 0.3, "min": 0.1, "max": 0.5, "step": 0.01}], "style_preset": ["COMBO", {"tooltip": "Optional desired style of generated image.", "multiselect": false, "options": ["None", "3d-model", "analog-film", "anime", "cinematic", "comic-book", "digital-art", "enhance", "fantasy-art", "isometric", "line-art", "low-poly", "modeling-compound", "neon-punk", "origami", "photographic", "pixel-art", "tile-texture"]}], "seed": ["INT", {"tooltip": "The random seed used for creating the noise.", "default": 0, "min": 0, "max": 4294967294, "step": 1, "control_after_generate": true, "display": "number"}]}, "optional": {"negative_prompt": ["STRING", {"tooltip": "Keywords of what you do not wish to see in the output image. This is an advanced feature.", "default": "", "forceInput": true, "multiline": false}]}, "hidden": {"auth_token_comfy_org": ["AUTH_TOKEN_COMFY_ORG"], "api_key_comfy_org": ["API_KEY_COMFY_ORG"], "unique_id": ["UNIQUE_ID"]}}, "input_order": {"required": ["image", "prompt", "creativity", "style_preset", "seed"], "optional": ["negative_prompt"], "hidden": ["auth_token_comfy_org", "api_key_comfy_org", "unique_id"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "output_tooltips": [null], "name": "StabilityUpscaleCreativeNode", "display_name": "Stability AI Upscale Creative", "description": "Upscale image with minimal alterations to 4K resolution.", "python_module": "comfy_api_nodes.nodes_stability", "category": "api node/image/Stability AI", "output_node": false, "deprecated": false, "experimental": false, "api_node": true}, "StabilityUpscaleFastNode": {"input": {"required": {"image": ["IMAGE", {}]}, "hidden": {"auth_token_comfy_org": ["AUTH_TOKEN_COMFY_ORG"], "api_key_comfy_org": ["API_KEY_COMFY_ORG"], "unique_id": ["UNIQUE_ID"]}}, "input_order": {"required": ["image"], "hidden": ["auth_token_comfy_org", "api_key_comfy_org", "unique_id"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "output_tooltips": [null], "name": "StabilityUpscaleFastNode", "display_name": "Stability AI Upscale Fast", "description": "Quickly upscales an image via Stability API call to 4x its original size; intended for upscaling low-quality/compressed images.", "python_module": "comfy_api_nodes.nodes_stability", "category": "api node/image/Stability AI", "output_node": false, "deprecated": false, "experimental": false, "api_node": true}, "PikaImageToVideoNode2_2": {"input": {"required": {"image": ["IMAGE", {"tooltip": "The image to convert to video"}], "prompt_text": ["STRING", {"default": null, "multiline": true}], "negative_prompt": ["STRING", {"default": null, "multiline": true}], "seed": ["INT", {"default": null, "min": 0, "max": 4294967295, "control_after_generate": true}], "resolution": ["COMBO", {"options": ["1080p", "720p"], "default": "1080p"}], "duration": ["COMBO", {"options": [5, 10], "default": 5}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["image", "prompt_text", "negative_prompt", "seed", "resolution", "duration"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["VIDEO"], "output_is_list": [false], "output_name": ["VIDEO"], "name": "PikaImageToVideoNode2_2", "display_name": "Pika Image to Video", "description": "Sends an image and prompt to the Pika API v2.2 to generate a video.", "python_module": "comfy_api_nodes.nodes_pika", "category": "api node/video/Pika", "output_node": false, "api_node": true}, "PikaTextToVideoNode2_2": {"input": {"required": {"prompt_text": ["STRING", {"multiline": true}], "negative_prompt": ["STRING", {"default": null, "multiline": true}], "seed": ["INT", {"default": null, "min": 0, "max": 4294967295, "control_after_generate": true}], "resolution": ["COMBO", {"options": ["1080p", "720p"], "default": "1080p"}], "duration": ["COMBO", {"options": [5, 10], "default": 5}], "aspect_ratio": ["FLOAT", {"default": 1.7777777777777777, "tooltip": "Aspect ratio (width / height)", "min": 0.4, "max": 2.5, "step": 0.001}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["prompt_text", "negative_prompt", "seed", "resolution", "duration", "aspect_ratio"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["VIDEO"], "output_is_list": [false], "output_name": ["VIDEO"], "name": "PikaTextToVideoNode2_2", "display_name": "Pika Text to Video", "description": "Sends a text prompt to the Pika API v2.2 to generate a video.", "python_module": "comfy_api_nodes.nodes_pika", "category": "api node/video/Pika", "output_node": false, "api_node": true}, "PikaScenesV2_2": {"input": {"required": {"prompt_text": ["STRING", {"default": null, "multiline": true}], "negative_prompt": ["STRING", {"default": null, "multiline": true}], "seed": ["INT", {"default": null, "min": 0, "max": 4294967295, "control_after_generate": true}], "resolution": ["COMBO", {"options": ["1080p", "720p"], "default": "1080p"}], "duration": ["COMBO", {"options": [5, 10], "default": 5}], "ingredients_mode": ["COMBO", {"options": ["creative", "precise"], "default": "creative"}], "aspect_ratio": ["FLOAT", {"default": 1.7777777777777777, "tooltip": "Aspect ratio (width / height)", "step": 0.001, "min": 0.4, "max": 2.5}]}, "optional": {"image_ingredient_1": ["IMAGE", {"tooltip": "Image that will be used as ingredient to create a video."}], "image_ingredient_2": ["IMAGE", {"tooltip": "Image that will be used as ingredient to create a video."}], "image_ingredient_3": ["IMAGE", {"tooltip": "Image that will be used as ingredient to create a video."}], "image_ingredient_4": ["IMAGE", {"tooltip": "Image that will be used as ingredient to create a video."}], "image_ingredient_5": ["IMAGE", {"tooltip": "Image that will be used as ingredient to create a video."}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["prompt_text", "negative_prompt", "seed", "resolution", "duration", "ingredients_mode", "aspect_ratio"], "optional": ["image_ingredient_1", "image_ingredient_2", "image_ingredient_3", "image_ingredient_4", "image_ingredient_5"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["VIDEO"], "output_is_list": [false], "output_name": ["VIDEO"], "name": "PikaScenesV2_2", "display_name": "Pika Scenes (Video Image Composition)", "description": "Combine your images to create a video with the objects in them. Upload multiple images as ingredients and generate a high-quality video that incorporates all of them.", "python_module": "comfy_api_nodes.nodes_pika", "category": "api node/video/Pika", "output_node": false, "api_node": true}, "Pikadditions": {"input": {"required": {"video": ["VIDEO", {"tooltip": "The video to add an image to."}], "image": ["IMAGE", {"tooltip": "The image to add to the video."}], "prompt_text": ["STRING", {"default": null, "multiline": true}], "negative_prompt": ["STRING", {"default": null, "multiline": true}], "seed": ["INT", {"default": null, "min": 0, "max": 4294967295, "control_after_generate": true}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["video", "image", "prompt_text", "negative_prompt", "seed"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["VIDEO"], "output_is_list": [false], "output_name": ["VIDEO"], "name": "Pikadditions", "display_name": "Pikadditions (Video Object Insertion)", "description": "Add any object or image into your video. Upload a video and specify what you'd like to add to create a seamlessly integrated result.", "python_module": "comfy_api_nodes.nodes_pika", "category": "api node/video/Pika", "output_node": false, "api_node": true}, "Pikaswaps": {"input": {"required": {"video": ["VIDEO", {"tooltip": "The video to swap an object in."}], "image": ["IMAGE", {"tooltip": "The image used to replace the masked object in the video."}], "mask": ["MASK", {"tooltip": "Use the mask to define areas in the video to replace"}], "prompt_text": ["STRING", {"default": null, "multiline": true}], "negative_prompt": ["STRING", {"default": null, "multiline": true}], "seed": ["INT", {"default": null, "min": 0, "max": 4294967295, "control_after_generate": true}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["video", "image", "mask", "prompt_text", "negative_prompt", "seed"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["VIDEO"], "output_is_list": [false], "output_name": ["VIDEO"], "name": "Pikaswaps", "display_name": "Pika Swaps (Video Object Replacement)", "description": "Swap out any object or region of your video with a new image or object. Define areas to replace either with a mask or coordinates.", "python_module": "comfy_api_nodes.nodes_pika", "category": "api node/video/Pika", "output_node": false, "api_node": true}, "Pikaffects": {"input": {"required": {"image": ["IMAGE", {"tooltip": "The reference image to apply the Pikaffect to."}], "pikaffect": ["COMBO", {"options": ["Cake-ify", "Crumble", "Crush", "Decapitate", "Deflate", "Dissolve", "Explode", "Eye-pop", "Inflate", "Levitate", "Melt", "Peel", "Poke", "Squish", "Ta-da", "Tear"], "default": "Cake-ify"}], "prompt_text": ["STRING", {"default": null, "multiline": true}], "negative_prompt": ["STRING", {"default": null, "multiline": true}], "seed": ["INT", {"default": null, "min": 0, "max": 4294967295, "control_after_generate": true}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["image", "pikaffect", "prompt_text", "negative_prompt", "seed"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["VIDEO"], "output_is_list": [false], "output_name": ["VIDEO"], "name": "Pikaffects", "display_name": "Pikaffects (Video Effects)", "description": "Generate a video with a specific Pikaffect. Supported Pikaffects: Cake-ify, Crumble, Crush, Decapitate, Deflate, Dissolve, Explode, Eye-pop, Inflate, Levitate, Melt, Peel, Poke, Squish, Ta-da, Tear", "python_module": "comfy_api_nodes.nodes_pika", "category": "api node/video/Pika", "output_node": false, "api_node": true}, "PikaStartEndFrameNode2_2": {"input": {"required": {"image_start": ["IMAGE", {"tooltip": "The first image to combine."}], "image_end": ["IMAGE", {"tooltip": "The last image to combine."}], "prompt_text": ["STRING", {"multiline": true}], "negative_prompt": ["STRING", {"default": null, "multiline": true}], "seed": ["INT", {"default": null, "min": 0, "max": 4294967295, "control_after_generate": true}], "resolution": ["COMBO", {"options": ["1080p", "720p"], "default": "1080p"}], "duration": ["COMBO", {"options": [5, 10], "default": null}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["image_start", "image_end", "prompt_text", "negative_prompt", "seed", "resolution", "duration"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["VIDEO"], "output_is_list": [false], "output_name": ["VIDEO"], "name": "PikaStartEndFrameNode2_2", "display_name": "Pika Start and End Frame to Video", "description": "Generate a video by combining your first and last frame. Upload two images to define the start and end points, and let the AI create a smooth transition between them.", "python_module": "comfy_api_nodes.nodes_pika", "category": "api node/video/Pika", "output_node": false, "api_node": true}, "RunwayFirstLastFrameNode": {"input": {"required": {"prompt": ["STRING", {"tooltip": "Text prompt for the generation", "default": "", "multiline": true}], "start_frame": ["IMAGE", {"tooltip": "Start frame to be used for the video"}], "end_frame": ["IMAGE", {"tooltip": "End frame to be used for the video. Supported for gen3a_turbo only."}], "duration": ["COMBO", {"multiselect": false, "options": [5, 10]}], "ratio": ["COMBO", {"multiselect": false, "options": ["768:1280", "1280:768"]}], "seed": ["INT", {"tooltip": "Random seed for generation", "default": 0, "min": 0, "max": 4294967295, "step": 1, "control_after_generate": true, "display": "number"}]}, "hidden": {"auth_token_comfy_org": ["AUTH_TOKEN_COMFY_ORG"], "api_key_comfy_org": ["API_KEY_COMFY_ORG"], "unique_id": ["UNIQUE_ID"]}}, "input_order": {"required": ["prompt", "start_frame", "end_frame", "duration", "ratio", "seed"], "hidden": ["auth_token_comfy_org", "api_key_comfy_org", "unique_id"]}, "output": ["VIDEO"], "output_is_list": [false], "output_name": ["VIDEO"], "output_tooltips": [null], "name": "RunwayFirstLastFrameNode", "display_name": "Runway First-Last-Frame to Video", "description": "Upload first and last keyframes, draft a prompt, and generate a video. More complex transitions, such as cases where the Last frame is completely different from the First frame, may benefit from the longer 10s duration. This would give the generation more time to smoothly transition between the two inputs. Before diving in, review these best practices to ensure that your input selections will set your generation up for success: https://help.runwayml.com/hc/en-us/articles/34170748696595-Creating-with-Keyframes-on-Gen-3.", "python_module": "comfy_api_nodes.nodes_runway", "category": "api node/video/Runway", "output_node": false, "deprecated": false, "experimental": false, "api_node": true}, "RunwayImageToVideoNodeGen3a": {"input": {"required": {"prompt": ["STRING", {"tooltip": "Text prompt for the generation", "default": "", "multiline": true}], "start_frame": ["IMAGE", {"tooltip": "Start frame to be used for the video"}], "duration": ["COMBO", {"multiselect": false, "options": [5, 10]}], "ratio": ["COMBO", {"multiselect": false, "options": ["768:1280", "1280:768"]}], "seed": ["INT", {"tooltip": "Random seed for generation", "default": 0, "min": 0, "max": 4294967295, "step": 1, "control_after_generate": true, "display": "number"}]}, "hidden": {"auth_token_comfy_org": ["AUTH_TOKEN_COMFY_ORG"], "api_key_comfy_org": ["API_KEY_COMFY_ORG"], "unique_id": ["UNIQUE_ID"]}}, "input_order": {"required": ["prompt", "start_frame", "duration", "ratio", "seed"], "hidden": ["auth_token_comfy_org", "api_key_comfy_org", "unique_id"]}, "output": ["VIDEO"], "output_is_list": [false], "output_name": ["VIDEO"], "output_tooltips": [null], "name": "RunwayImageToVideoNodeGen3a", "display_name": "Runway Image to Video (Gen3a Turbo)", "description": "Generate a video from a single starting frame using Gen3a Turbo model. Before diving in, review these best practices to ensure that your input selections will set your generation up for success: https://help.runwayml.com/hc/en-us/articles/33927968552339-Creating-with-Act-One-on-Gen-3-Alpha-and-Turbo.", "python_module": "comfy_api_nodes.nodes_runway", "category": "api node/video/Runway", "output_node": false, "deprecated": false, "experimental": false, "api_node": true}, "RunwayImageToVideoNodeGen4": {"input": {"required": {"prompt": ["STRING", {"tooltip": "Text prompt for the generation", "default": "", "multiline": true}], "start_frame": ["IMAGE", {"tooltip": "Start frame to be used for the video"}], "duration": ["COMBO", {"multiselect": false, "options": [5, 10]}], "ratio": ["COMBO", {"multiselect": false, "options": ["1280:720", "720:1280", "1104:832", "832:1104", "960:960", "1584:672"]}], "seed": ["INT", {"tooltip": "Random seed for generation", "default": 0, "min": 0, "max": 4294967295, "step": 1, "control_after_generate": true, "display": "number"}]}, "hidden": {"auth_token_comfy_org": ["AUTH_TOKEN_COMFY_ORG"], "api_key_comfy_org": ["API_KEY_COMFY_ORG"], "unique_id": ["UNIQUE_ID"]}}, "input_order": {"required": ["prompt", "start_frame", "duration", "ratio", "seed"], "hidden": ["auth_token_comfy_org", "api_key_comfy_org", "unique_id"]}, "output": ["VIDEO"], "output_is_list": [false], "output_name": ["VIDEO"], "output_tooltips": [null], "name": "RunwayImageToVideoNodeGen4", "display_name": "Runway Image to Video (Gen4 Turbo)", "description": "Generate a video from a single starting frame using Gen4 Turbo model. Before diving in, review these best practices to ensure that your input selections will set your generation up for success: https://help.runwayml.com/hc/en-us/articles/37327109429011-Creating-with-Gen-4-Video.", "python_module": "comfy_api_nodes.nodes_runway", "category": "api node/video/Runway", "output_node": false, "deprecated": false, "experimental": false, "api_node": true}, "RunwayTextToImageNode": {"input": {"required": {"prompt": ["STRING", {"tooltip": "Text prompt for the generation", "default": "", "multiline": true}], "ratio": ["COMBO", {"multiselect": false, "options": ["1920:1080", "1080:1920", "1024:1024", "1360:768", "1080:1080", "1168:880", "1440:1080", "1080:1440", "1808:768", "2112:912"]}]}, "optional": {"reference_image": ["IMAGE", {"tooltip": "Optional reference image to guide the generation"}]}, "hidden": {"auth_token_comfy_org": ["AUTH_TOKEN_COMFY_ORG"], "api_key_comfy_org": ["API_KEY_COMFY_ORG"], "unique_id": ["UNIQUE_ID"]}}, "input_order": {"required": ["prompt", "ratio"], "optional": ["reference_image"], "hidden": ["auth_token_comfy_org", "api_key_comfy_org", "unique_id"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "output_tooltips": [null], "name": "RunwayTextToImageNode", "display_name": "Runway Text to Image", "description": "Generate an image from a text prompt using Runway's Gen 4 model. You can also include reference image to guide the generation.", "python_module": "comfy_api_nodes.nodes_runway", "category": "api node/image/Runway", "output_node": false, "deprecated": false, "experimental": false, "api_node": true}, "TripoTextToModelNode": {"input": {"required": {"prompt": ["STRING", {"multiline": true}]}, "optional": {"negative_prompt": ["STRING", {"multiline": true}], "model_version": ["COMBO", {"options": ["v2.5-20250123", "v2.0-20240919", "v1.4-20240625"], "default": "v2.5-20250123"}], "style": ["COMBO", {"options": ["person:person2cartoon", "animal:venom", "object:clay", "object:steampunk", "object:christmas", "object:barbie", "gold", "ancient_bronze", "None"], "default": "None"}], "texture": ["BOOLEAN", {"default": true}], "pbr": ["BOOLEAN", {"default": true}], "image_seed": ["INT", {"default": 42}], "model_seed": ["INT", {"default": 42}], "texture_seed": ["INT", {"default": 42}], "texture_quality": [["standard", "detailed"], {"default": "standard"}], "face_limit": ["INT", {"min": -1, "max": 500000, "default": -1}], "quad": ["BOOLEAN", {"default": false}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["prompt"], "optional": ["negative_prompt", "model_version", "style", "texture", "pbr", "image_seed", "model_seed", "texture_seed", "texture_quality", "face_limit", "quad"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["STRING", "MODEL_TASK_ID"], "output_is_list": [false, false], "output_name": ["model_file", "model task_id"], "name": "TripoTextToModelNode", "display_name": "Tripo: Text to Model", "description": "", "python_module": "comfy_api_nodes.nodes_tripo", "category": "api node/3d/Tripo", "output_node": true, "api_node": true}, "TripoImageToModelNode": {"input": {"required": {"image": ["IMAGE"]}, "optional": {"model_version": ["COMBO", {"options": ["v2.5-20250123", "v2.0-20240919", "v1.4-20240625"], "default": null, "tooltip": "The model version to use for generation"}], "style": ["COMBO", {"options": ["person:person2cartoon", "animal:venom", "object:clay", "object:steampunk", "object:christmas", "object:barbie", "gold", "ancient_bronze", "None"], "default": "None"}], "texture": ["BOOLEAN", {"default": true}], "pbr": ["BOOLEAN", {"default": true}], "model_seed": ["INT", {"default": 42}], "orientation": ["COMBO", {"options": ["align_image", "default"], "default": "default"}], "texture_seed": ["INT", {"default": 42}], "texture_quality": [["standard", "detailed"], {"default": "standard"}], "texture_alignment": [["original_image", "geometry"], {"default": "original_image"}], "face_limit": ["INT", {"min": -1, "max": 500000, "default": -1}], "quad": ["BOOLEAN", {"default": false}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["image"], "optional": ["model_version", "style", "texture", "pbr", "model_seed", "orientation", "texture_seed", "texture_quality", "texture_alignment", "face_limit", "quad"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["STRING", "MODEL_TASK_ID"], "output_is_list": [false, false], "output_name": ["model_file", "model task_id"], "name": "TripoImageToModelNode", "display_name": "Tripo: Image to Model", "description": "", "python_module": "comfy_api_nodes.nodes_tripo", "category": "api node/3d/Tripo", "output_node": true, "api_node": true}, "TripoMultiviewToModelNode": {"input": {"required": {"image": ["IMAGE"]}, "optional": {"image_left": ["IMAGE"], "image_back": ["IMAGE"], "image_right": ["IMAGE"], "model_version": ["COMBO", {"options": ["v2.5-20250123", "v2.0-20240919", "v1.4-20240625"], "default": null, "tooltip": "The model version to use for generation"}], "orientation": ["COMBO", {"options": ["align_image", "default"], "default": "default"}], "texture": ["BOOLEAN", {"default": true}], "pbr": ["BOOLEAN", {"default": true}], "model_seed": ["INT", {"default": 42}], "texture_seed": ["INT", {"default": 42}], "texture_quality": [["standard", "detailed"], {"default": "standard"}], "texture_alignment": [["original_image", "geometry"], {"default": "original_image"}], "face_limit": ["INT", {"min": -1, "max": 500000, "default": -1}], "quad": ["BOOLEAN", {"default": false}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["image"], "optional": ["image_left", "image_back", "image_right", "model_version", "orientation", "texture", "pbr", "model_seed", "texture_seed", "texture_quality", "texture_alignment", "face_limit", "quad"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["STRING", "MODEL_TASK_ID"], "output_is_list": [false, false], "output_name": ["model_file", "model task_id"], "name": "TripoMultiviewToModelNode", "display_name": "Tripo: Multiview to Model", "description": "", "python_module": "comfy_api_nodes.nodes_tripo", "category": "api node/3d/Tripo", "output_node": true, "api_node": true}, "TripoTextureNode": {"input": {"required": {"model_task_id": ["MODEL_TASK_ID"]}, "optional": {"texture": ["BOOLEAN", {"default": true}], "pbr": ["BOOLEAN", {"default": true}], "texture_seed": ["INT", {"default": 42}], "texture_quality": [["standard", "detailed"], {"default": "standard"}], "texture_alignment": [["original_image", "geometry"], {"default": "original_image"}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["model_task_id"], "optional": ["texture", "pbr", "texture_seed", "texture_quality", "texture_alignment"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["STRING", "MODEL_TASK_ID"], "output_is_list": [false, false], "output_name": ["model_file", "model task_id"], "name": "TripoTextureNode", "display_name": "Tripo: Texture model", "description": "", "python_module": "comfy_api_nodes.nodes_tripo", "category": "api node/3d/Tripo", "output_node": true, "api_node": true}, "TripoRefineNode": {"input": {"required": {"model_task_id": ["MODEL_TASK_ID", {"tooltip": "Must be a v1.4 Tripo model"}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["model_task_id"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["STRING", "MODEL_TASK_ID"], "output_is_list": [false, false], "output_name": ["model_file", "model task_id"], "name": "TripoRefineNode", "display_name": "Tripo: Refine Draft model", "description": "Refine a draft model created by v1.4 Tripo models only.", "python_module": "comfy_api_nodes.nodes_tripo", "category": "api node/3d/Tripo", "output_node": true, "api_node": true}, "TripoRigNode": {"input": {"required": {"original_model_task_id": ["MODEL_TASK_ID"]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["original_model_task_id"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["STRING", "RIG_TASK_ID"], "output_is_list": [false, false], "output_name": ["model_file", "rig task_id"], "name": "TripoRigNode", "display_name": "Tripo: Rig model", "description": "", "python_module": "comfy_api_nodes.nodes_tripo", "category": "api node/3d/Tripo", "output_node": true, "api_node": true}, "TripoRetargetNode": {"input": {"required": {"original_model_task_id": ["RIG_TASK_ID"], "animation": [["preset:idle", "preset:walk", "preset:climb", "preset:jump", "preset:slash", "preset:shoot", "preset:hurt", "preset:fall", "preset:turn"]]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["original_model_task_id", "animation"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["STRING", "RETARGET_TASK_ID"], "output_is_list": [false, false], "output_name": ["model_file", "retarget task_id"], "name": "TripoRetargetNode", "display_name": "Tripo: Retarget rigged model", "description": "", "python_module": "comfy_api_nodes.nodes_tripo", "category": "api node/3d/Tripo", "output_node": true, "api_node": true}, "TripoConversionNode": {"input": {"required": {"original_model_task_id": ["MODEL_TASK_ID,RIG_TASK_ID,RETARGET_TASK_ID"], "format": [["GLTF", "USDZ", "FBX", "OBJ", "STL", "3MF"]]}, "optional": {"quad": ["BOOLEAN", {"default": false}], "face_limit": ["INT", {"min": -1, "max": 500000, "default": -1}], "texture_size": ["INT", {"min": 128, "max": 4096, "default": 4096}], "texture_format": [["BMP", "DPX", "HDR", "JPEG", "OPEN_EXR", "PNG", "TARGA", "TIFF", "WEBP"], {"default": "JPEG"}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["original_model_task_id", "format"], "optional": ["quad", "face_limit", "texture_size", "texture_format"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": [], "output_is_list": [], "output_name": [], "name": "TripoConversionNode", "display_name": "Tripo: Convert model", "description": "", "python_module": "comfy_api_nodes.nodes_tripo", "category": "api node/3d/Tripo", "output_node": true, "api_node": true}, "MoonvalleyImg2VideoNode": {"input": {"required": {"prompt": ["STRING", {"default": null, "multiline": true}], "negative_prompt": ["STRING", {"default": "<synthetic> <scene cut> gopro, bright, contrast, static, overexposed, vignette, artifacts, still, noise, texture, scanlines, videogame, 360 camera, VR, transition, flare, saturation, distorted, warped, wide angle, saturated, vibrant, glowing, cross dissolve, cheesy, ugly hands, mutated hands, mutant, disfigured, extra fingers, blown out, horrible, blurry, worst quality, bad, dissolve, melt, fade in, fade out, wobbly, weird, low quality, plastic, stock footage, video camera, boring", "tooltip": "Negative prompt text", "multiline": true}], "resolution": ["COMBO", {"options": ["16:9 (1920 x 1080)", "9:16 (1080 x 1920)", "1:1 (1152 x 1152)", "4:3 (1440 x 1080)", "3:4 (1080 x 1440)", "21:9 (2560 x 1080)"], "default": "16:9 (1920 x 1080)", "tooltip": "Resolution of the output video"}], "prompt_adherence": ["FLOAT", {"default": 10.0, "tooltip": "Guidance scale for generation control", "step": 1, "min": 1, "max": 20}], "seed": ["INT", {"default": 9, "tooltip": "Random seed value", "min": 0, "max": 4294967295, "step": 1, "display": "number"}], "steps": ["INT", {"default": 100, "tooltip": "Number of denoising steps", "min": 1, "max": 100}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}, "optional": {"image": ["IMAGE", {"default": null, "tooltip": "The reference image used to generate the video"}]}}, "input_order": {"required": ["prompt", "negative_prompt", "resolution", "prompt_adherence", "seed", "steps"], "hidden": ["auth_token", "comfy_api_key", "unique_id"], "optional": ["image"]}, "output": ["VIDEO"], "output_is_list": [false], "output_name": ["video"], "name": "MoonvalleyImg2VideoNode", "display_name": "Moonvalley Marey Image to Video", "description": "Moonvalley Marey Image to Video Node", "python_module": "comfy_api_nodes.nodes_moonvalley", "category": "api node/video/Moonvalley Marey", "output_node": false, "api_node": true}, "MoonvalleyTxt2VideoNode": {"input": {"required": {"prompt": ["STRING", {"default": null, "multiline": true}], "negative_prompt": ["STRING", {"default": "<synthetic> <scene cut> gopro, bright, contrast, static, overexposed, vignette, artifacts, still, noise, texture, scanlines, videogame, 360 camera, VR, transition, flare, saturation, distorted, warped, wide angle, saturated, vibrant, glowing, cross dissolve, cheesy, ugly hands, mutated hands, mutant, disfigured, extra fingers, blown out, horrible, blurry, worst quality, bad, dissolve, melt, fade in, fade out, wobbly, weird, low quality, plastic, stock footage, video camera, boring", "tooltip": "Negative prompt text", "multiline": true}], "resolution": ["COMBO", {"options": ["16:9 (1920 x 1080)", "9:16 (1080 x 1920)", "1:1 (1152 x 1152)", "4:3 (1440 x 1080)", "3:4 (1080 x 1440)", "21:9 (2560 x 1080)"], "default": "16:9 (1920 x 1080)", "tooltip": "Resolution of the output video"}], "prompt_adherence": ["FLOAT", {"default": 10.0, "tooltip": "Guidance scale for generation control", "step": 1, "min": 1, "max": 20}], "seed": ["INT", {"default": 9, "tooltip": "Random seed value", "min": 0, "max": 4294967295, "step": 1, "display": "number"}], "steps": ["INT", {"default": 100, "tooltip": "Number of denoising steps", "min": 1, "max": 100}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}, "optional": {}}, "input_order": {"required": ["prompt", "negative_prompt", "resolution", "prompt_adherence", "seed", "steps"], "hidden": ["auth_token", "comfy_api_key", "unique_id"], "optional": []}, "output": ["VIDEO"], "output_is_list": [false], "output_name": ["video"], "name": "MoonvalleyTxt2VideoNode", "display_name": "Moonvalley Marey Text to Video", "description": "", "python_module": "comfy_api_nodes.nodes_moonvalley", "category": "api node/video/Moonvalley Marey", "output_node": false, "api_node": true}, "MoonvalleyVideo2VideoNode": {"input": {"required": {"prompt": ["STRING", {"tooltip": "Describes the video to generate", "multiline": true}], "negative_prompt": ["STRING", {"default": "<synthetic> <scene cut> gopro, bright, contrast, static, overexposed, vignette, artifacts, still, noise, texture, scanlines, videogame, 360 camera, VR, transition, flare, saturation, distorted, warped, wide angle, saturated, vibrant, glowing, cross dissolve, cheesy, ugly hands, mutated hands, mutant, disfigured, extra fingers, blown out, horrible, blurry, worst quality, bad, dissolve, melt, fade in, fade out, wobbly, weird, low quality, plastic, stock footage, video camera, boring", "tooltip": "Negative prompt text", "multiline": true}], "seed": ["INT", {"default": 9, "tooltip": "Random seed value", "min": 0, "max": 4294967295, "step": 1, "display": "number", "control_after_generate": false}], "prompt_adherence": ["FLOAT", {"default": 10.0, "tooltip": "Guidance scale for generation control", "step": 1, "min": 1, "max": 20}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}, "optional": {"video": ["VIDEO", {"default": "", "multiline": false, "tooltip": "The reference video used to generate the output video. Must be at least 5 seconds long. Videos longer than 5s will be automatically trimmed. Only MP4 format supported."}], "control_type": [["Motion Transfer", "Pose Transfer"], {"default": "Motion Transfer"}], "motion_intensity": ["INT", {"default": 100, "step": 1, "min": 0, "max": 100, "tooltip": "Only used if control_type is 'Motion Transfer'"}], "image": ["IMAGE", {"default": null, "tooltip": "The reference image used to generate the video"}]}}, "input_order": {"required": ["prompt", "negative_prompt", "seed", "prompt_adherence"], "hidden": ["auth_token", "comfy_api_key", "unique_id"], "optional": ["video", "control_type", "motion_intensity", "image"]}, "output": ["VIDEO"], "output_is_list": [false], "output_name": ["video"], "name": "MoonvalleyVideo2VideoNode", "display_name": "Moonvalley Marey Video to Video", "description": "", "python_module": "comfy_api_nodes.nodes_moonvalley", "category": "api node/video/Moonvalley Marey", "output_node": false, "api_node": true}, "Rodin3D_Regular": {"input": {"required": {"Images": ["IMAGE", {"forceInput": true}]}, "optional": {"Seed": ["INT", {"default": 0, "min": 0, "max": 65535, "display": "number"}], "Material_Type": ["COMBO", {"options": ["PBR", "Shaded"], "default": "PBR"}], "Polygon_count": ["COMBO", {"options": ["4K-Quad", "8K-Quad", "18K-Quad", "50K-Quad", "200K-Triangle"], "default": "18K-Quad"}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG"}}, "input_order": {"required": ["Images"], "optional": ["Seed", "Material_Type", "Polygon_count"], "hidden": ["auth_token", "comfy_api_key"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["3D Model Path"], "name": "Rodin3D_Regular", "display_name": "Rodin 3D Generate - Regular Generate", "description": "Generate 3D Assets using Rodin API", "python_module": "comfy_api_nodes.nodes_rodin", "category": "api node/3d/Rodin", "output_node": false, "api_node": true}, "Rodin3D_Detail": {"input": {"required": {"Images": ["IMAGE", {"forceInput": true}]}, "optional": {"Seed": ["INT", {"default": 0, "min": 0, "max": 65535, "display": "number"}], "Material_Type": ["COMBO", {"options": ["PBR", "Shaded"], "default": "PBR"}], "Polygon_count": ["COMBO", {"options": ["4K-Quad", "8K-Quad", "18K-Quad", "50K-Quad", "200K-Triangle"], "default": "18K-Quad"}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG"}}, "input_order": {"required": ["Images"], "optional": ["Seed", "Material_Type", "Polygon_count"], "hidden": ["auth_token", "comfy_api_key"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["3D Model Path"], "name": "Rodin3D_Detail", "display_name": "Rodin 3D Generate - Detail Generate", "description": "Generate 3D Assets using Rodin API", "python_module": "comfy_api_nodes.nodes_rodin", "category": "api node/3d/Rodin", "output_node": false, "api_node": true}, "Rodin3D_Smooth": {"input": {"required": {"Images": ["IMAGE", {"forceInput": true}]}, "optional": {"Seed": ["INT", {"default": 0, "min": 0, "max": 65535, "display": "number"}], "Material_Type": ["COMBO", {"options": ["PBR", "Shaded"], "default": "PBR"}], "Polygon_count": ["COMBO", {"options": ["4K-Quad", "8K-Quad", "18K-Quad", "50K-Quad", "200K-Triangle"], "default": "18K-Quad"}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG"}}, "input_order": {"required": ["Images"], "optional": ["Seed", "Material_Type", "Polygon_count"], "hidden": ["auth_token", "comfy_api_key"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["3D Model Path"], "name": "Rodin3D_Smooth", "display_name": "Rodin 3D Generate - Smooth Generate", "description": "Generate 3D Assets using Rodin API", "python_module": "comfy_api_nodes.nodes_rodin", "category": "api node/3d/Rodin", "output_node": false, "api_node": true}, "Rodin3D_Sketch": {"input": {"required": {"Images": ["IMAGE", {"forceInput": true}]}, "optional": {"Seed": ["INT", {"default": 0, "min": 0, "max": 65535, "display": "number"}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG"}}, "input_order": {"required": ["Images"], "optional": ["Seed"], "hidden": ["auth_token", "comfy_api_key"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["3D Model Path"], "name": "Rodin3D_Sketch", "display_name": "Rodin 3D Generate - Sketch Generate", "description": "Generate 3D Assets using Rodin API", "python_module": "comfy_api_nodes.nodes_rodin", "category": "api node/3d/Rodin", "output_node": false, "api_node": true}, "GeminiNode": {"input": {"required": {"prompt": ["STRING", {"multiline": true, "default": "", "tooltip": "Text inputs to the model, used to generate a response. You can include detailed instructions, questions, or context for the model."}], "model": ["COMBO", {"tooltip": "The Gemini model to use for generating responses.", "options": ["gemini-2.5-pro-preview-05-06", "gemini-2.5-flash-preview-04-17", "gemini-2.5-pro", "gemini-2.5-flash"], "default": "gemini-2.5-pro"}], "seed": ["INT", {"default": 42, "min": 0, "max": 18446744073709551615, "control_after_generate": true, "tooltip": "When seed is fixed to a specific value, the model makes a best effort to provide the same response for repeated requests. Deterministic output isn't guaranteed. Also, changing the model or parameter settings, such as the temperature, can cause variations in the response even when you use the same seed value. By default, a random seed value is used."}]}, "optional": {"images": ["IMAGE", {"default": null, "tooltip": "Optional image(s) to use as context for the model. To include multiple images, you can use the Batch Images node."}], "audio": ["AUDIO", {"tooltip": "Optional audio to use as context for the model.", "default": null}], "video": ["VIDEO", {"tooltip": "Optional video to use as context for the model.", "default": null}], "files": ["GEMINI_INPUT_FILES", {"default": null, "tooltip": "Optional file(s) to use as context for the model. Accepts inputs from the Gemini Generate Content Input Files node."}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["prompt", "model", "seed"], "optional": ["images", "audio", "video", "files"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["STRING"], "name": "GeminiNode", "display_name": "Google Gemini", "description": "Generate text responses with Google's Gemini AI model. You can provide multiple types of inputs (text, images, audio, video) as context for generating more relevant and meaningful responses.", "python_module": "comfy_api_nodes.nodes_gemini", "category": "api node/text/Gemini", "output_node": false, "api_node": true}, "GeminiImageNode": {"input": {"required": {"prompt": ["STRING", {"multiline": true, "default": "", "tooltip": "Text prompt for generation"}], "model": ["COMBO", {"tooltip": "The Gemini model to use for generating responses.", "options": ["gemini-2.5-flash-image-preview"], "default": "gemini-2.5-flash-image-preview"}], "seed": ["INT", {"default": 42, "min": 0, "max": 18446744073709551615, "control_after_generate": true, "tooltip": "When seed is fixed to a specific value, the model makes a best effort to provide the same response for repeated requests. Deterministic output isn't guaranteed. Also, changing the model or parameter settings, such as the temperature, can cause variations in the response even when you use the same seed value. By default, a random seed value is used."}]}, "optional": {"images": ["IMAGE", {"default": null, "tooltip": "Optional image(s) to use as context for the model. To include multiple images, you can use the Batch Images node."}], "files": ["GEMINI_INPUT_FILES", {"default": null, "tooltip": "Optional file(s) to use as context for the model. Accepts inputs from the Gemini Generate Content Input Files node."}]}, "hidden": {"auth_token": "AUTH_TOKEN_COMFY_ORG", "comfy_api_key": "API_KEY_COMFY_ORG", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["prompt", "model", "seed"], "optional": ["images", "files"], "hidden": ["auth_token", "comfy_api_key", "unique_id"]}, "output": ["IMAGE", "STRING"], "output_is_list": [false, false], "output_name": ["IMAGE", "STRING"], "name": "GeminiImageNode", "display_name": "Google Gemini Image", "description": "Edit images synchronously via Google API.", "python_module": "comfy_api_nodes.nodes_gemini", "category": "api node/image/Gemini", "output_node": false, "api_node": true}, "GeminiInputFiles": {"input": {"required": {"file": ["COMBO", {"tooltip": "Input files to include as context for the model. Only accepts text (.txt) and PDF (.pdf) files for now.", "options": [], "default": null}]}, "optional": {"GEMINI_INPUT_FILES": ["GEMINI_INPUT_FILES", {"tooltip": "An optional additional file(s) to batch together with the file loaded from this node. Allows chaining of input files so that a single message can include multiple input files.", "default": null}]}}, "input_order": {"required": ["file"], "optional": ["GEMINI_INPUT_FILES"]}, "output": ["GEMINI_INPUT_FILES"], "output_is_list": [false], "output_name": ["GEMINI_INPUT_FILES"], "name": "GeminiInputFiles", "display_name": "Gemini Input Files", "description": "Loads and prepares input files to include as inputs for Gemini LLM nodes. The files will be read by the Gemini model when generating a response. The contents of the text file count toward the token limit. \ud83d\udec8 TIP: Can be chained together with other Gemini Input File nodes.", "python_module": "comfy_api_nodes.nodes_gemini", "category": "api node/text/Gemini", "output_node": false}, "ViduTextToVideoNode": {"input": {"required": {"model": ["COMBO", {"tooltip": "Model name", "default": "viduq1", "multiselect": false, "options": ["viduq1"]}], "prompt": ["STRING", {"tooltip": "A textual description for video generation", "multiline": true}]}, "optional": {"duration": ["INT", {"tooltip": "Duration of the output video in seconds", "default": 5, "min": 5, "max": 5, "step": 1, "display": "number"}], "seed": ["INT", {"tooltip": "Seed for video generation (0 for random)", "default": 0, "min": 0, "max": 2147483647, "step": 1, "control_after_generate": true, "display": "number"}], "aspect_ratio": ["COMBO", {"tooltip": "The aspect ratio of the output video", "default": "16:9", "multiselect": false, "options": ["16:9", "9:16", "1:1"]}], "resolution": ["COMBO", {"tooltip": "Supported values may vary by model & duration", "default": "1080p", "multiselect": false, "options": ["1080p"]}], "movement_amplitude": ["COMBO", {"tooltip": "The movement amplitude of objects in the frame", "default": "auto", "multiselect": false, "options": ["auto", "small", "medium", "large"]}]}, "hidden": {"auth_token_comfy_org": ["AUTH_TOKEN_COMFY_ORG"], "api_key_comfy_org": ["API_KEY_COMFY_ORG"], "unique_id": ["UNIQUE_ID"]}}, "input_order": {"required": ["model", "prompt"], "optional": ["duration", "seed", "aspect_ratio", "resolution", "movement_amplitude"], "hidden": ["auth_token_comfy_org", "api_key_comfy_org", "unique_id"]}, "output": ["VIDEO"], "output_is_list": [false], "output_name": ["VIDEO"], "output_tooltips": [null], "name": "ViduTextToVideoNode", "display_name": "Vidu Text To Video Generation", "description": "Generate video from text prompt", "python_module": "comfy_api_nodes.nodes_vidu", "category": "api node/video/Vidu", "output_node": false, "deprecated": false, "experimental": false, "api_node": true}, "ViduImageToVideoNode": {"input": {"required": {"model": ["COMBO", {"tooltip": "Model name", "default": "viduq1", "multiselect": false, "options": ["viduq1"]}], "image": ["IMAGE", {"tooltip": "An image to be used as the start frame of the generated video"}]}, "optional": {"prompt": ["STRING", {"tooltip": "A textual description for video generation", "default": "", "multiline": true}], "duration": ["INT", {"tooltip": "Duration of the output video in seconds", "default": 5, "min": 5, "max": 5, "step": 1, "display": "number"}], "seed": ["INT", {"tooltip": "Seed for video generation (0 for random)", "default": 0, "min": 0, "max": 2147483647, "step": 1, "control_after_generate": true, "display": "number"}], "resolution": ["COMBO", {"tooltip": "Supported values may vary by model & duration", "default": "1080p", "multiselect": false, "options": ["1080p"]}], "movement_amplitude": ["COMBO", {"tooltip": "The movement amplitude of objects in the frame", "default": "auto", "multiselect": false, "options": ["auto", "small", "medium", "large"]}]}, "hidden": {"auth_token_comfy_org": ["AUTH_TOKEN_COMFY_ORG"], "api_key_comfy_org": ["API_KEY_COMFY_ORG"], "unique_id": ["UNIQUE_ID"]}}, "input_order": {"required": ["model", "image"], "optional": ["prompt", "duration", "seed", "resolution", "movement_amplitude"], "hidden": ["auth_token_comfy_org", "api_key_comfy_org", "unique_id"]}, "output": ["VIDEO"], "output_is_list": [false], "output_name": ["VIDEO"], "output_tooltips": [null], "name": "ViduImageToVideoNode", "display_name": "Vidu Image To Video Generation", "description": "Generate video from image and optional prompt", "python_module": "comfy_api_nodes.nodes_vidu", "category": "api node/video/Vidu", "output_node": false, "deprecated": false, "experimental": false, "api_node": true}, "ViduReferenceVideoNode": {"input": {"required": {"model": ["COMBO", {"tooltip": "Model name", "default": "viduq1", "multiselect": false, "options": ["viduq1"]}], "images": ["IMAGE", {"tooltip": "Images to use as references to generate a video with consistent subjects (max 7 images)."}], "prompt": ["STRING", {"tooltip": "A textual description for video generation", "multiline": true}]}, "optional": {"duration": ["INT", {"tooltip": "Duration of the output video in seconds", "default": 5, "min": 5, "max": 5, "step": 1, "display": "number"}], "seed": ["INT", {"tooltip": "Seed for video generation (0 for random)", "default": 0, "min": 0, "max": 2147483647, "step": 1, "control_after_generate": true, "display": "number"}], "aspect_ratio": ["COMBO", {"tooltip": "The aspect ratio of the output video", "default": "16:9", "multiselect": false, "options": ["16:9", "9:16", "1:1"]}], "resolution": ["COMBO", {"tooltip": "Supported values may vary by model & duration", "default": "1080p", "multiselect": false, "options": ["1080p"]}], "movement_amplitude": ["COMBO", {"tooltip": "The movement amplitude of objects in the frame", "default": "auto", "multiselect": false, "options": ["auto", "small", "medium", "large"]}]}, "hidden": {"auth_token_comfy_org": ["AUTH_TOKEN_COMFY_ORG"], "api_key_comfy_org": ["API_KEY_COMFY_ORG"], "unique_id": ["UNIQUE_ID"]}}, "input_order": {"required": ["model", "images", "prompt"], "optional": ["duration", "seed", "aspect_ratio", "resolution", "movement_amplitude"], "hidden": ["auth_token_comfy_org", "api_key_comfy_org", "unique_id"]}, "output": ["VIDEO"], "output_is_list": [false], "output_name": ["VIDEO"], "output_tooltips": [null], "name": "ViduReferenceVideoNode", "display_name": "Vidu Reference To Video Generation", "description": "Generate video from multiple images and prompt", "python_module": "comfy_api_nodes.nodes_vidu", "category": "api node/video/Vidu", "output_node": false, "deprecated": false, "experimental": false, "api_node": true}, "ViduStartEndToVideoNode": {"input": {"required": {"model": ["COMBO", {"tooltip": "Model name", "default": "viduq1", "multiselect": false, "options": ["viduq1"]}], "first_frame": ["IMAGE", {"tooltip": "Start frame"}], "end_frame": ["IMAGE", {"tooltip": "End frame"}]}, "optional": {"prompt": ["STRING", {"tooltip": "A textual description for video generation", "multiline": true}], "duration": ["INT", {"tooltip": "Duration of the output video in seconds", "default": 5, "min": 5, "max": 5, "step": 1, "display": "number"}], "seed": ["INT", {"tooltip": "Seed for video generation (0 for random)", "default": 0, "min": 0, "max": 2147483647, "step": 1, "control_after_generate": true, "display": "number"}], "resolution": ["COMBO", {"tooltip": "Supported values may vary by model & duration", "default": "1080p", "multiselect": false, "options": ["1080p"]}], "movement_amplitude": ["COMBO", {"tooltip": "The movement amplitude of objects in the frame", "default": "auto", "multiselect": false, "options": ["auto", "small", "medium", "large"]}]}, "hidden": {"auth_token_comfy_org": ["AUTH_TOKEN_COMFY_ORG"], "api_key_comfy_org": ["API_KEY_COMFY_ORG"], "unique_id": ["UNIQUE_ID"]}}, "input_order": {"required": ["model", "first_frame", "end_frame"], "optional": ["prompt", "duration", "seed", "resolution", "movement_amplitude"], "hidden": ["auth_token_comfy_org", "api_key_comfy_org", "unique_id"]}, "output": ["VIDEO"], "output_is_list": [false], "output_name": ["VIDEO"], "output_tooltips": [null], "name": "ViduStartEndToVideoNode", "display_name": "Vidu Start End To Video Generation", "description": "Generate a video from start and end frames and a prompt", "python_module": "comfy_api_nodes.nodes_vidu", "category": "api node/video/Vidu", "output_node": false, "deprecated": false, "experimental": false, "api_node": true}, "SaveImageWebsocket": {"input": {"required": {"images": ["IMAGE"]}}, "input_order": {"required": ["images"]}, "output": [], "output_is_list": [], "output_name": [], "name": "SaveImageWebsocket", "display_name": "SaveImageWebsocket", "description": "", "python_module": "custom_nodes.websocket_image_save", "category": "api/image", "output_node": true}, "ComfyAgentNode": {"input": {"required": {"enabled": ["BOOLEAN", {"default": true, "label": "Enabled", "label_on": "YES", "label_off": "NO"}], "apikey": ["STRING", {"default": "***"}], "install_models": ["BOOLEAN", {"default": true, "label": "Enabled", "label_on": "ALLOW", "label_off": "DENY"}], "install_nodes": ["BOOLEAN", {"default": true, "label": "Enabled", "label_on": "ALLOW", "label_off": "DENY"}], "install_packages": ["BOOLEAN", {"default": true, "label": "Enabled", "label_on": "ALLOW", "label_off": "DENY"}], "url": ["STRING", {"default": "https://amd.raptor-elver.ts.net"}]}, "optional": {"ollama_url": ["STRING", {"default": "http://localhost:11434/"}], "hf_token": ["STRING", {"default": "***"}], "civitai_token": ["STRING", {"default": "***"}], "github_token": ["STRING", {"default": ""}]}}, "input_order": {"required": ["enabled", "apikey", "install_models", "install_nodes", "install_packages", "url"], "optional": ["ollama_url", "hf_token", "civitai_token", "github_token"]}, "output": [], "output_is_list": [], "output_name": [], "name": "ComfyAgentNode", "display_name": "Comfy Agent (Global)", "description": "", "python_module": "custom_nodes.comfy-agent", "category": "comfy_agent", "output_node": true}, "RequiresAsset": {"input": {"required": {"url": ["STRING", {"multiline": false, "default": ""}], "save_to": [["checkpoints", "clip", "clip_vision", "configs", "controlnet", "diffusers", "diffusers/Falconsai_nsfw_image_detection", "diffusers/CompVis_stable_diffusion_safety_checker", "diffusion_models", "embeddings", "embeddings/SDXL", "gligen", "hypernetworks", "loras", "photomaker", "style_models", "text_encoders", "unet", "upscale_models", "vae", "vae_approx", "Stable-diffusion", "LDSR", "ultralytics", "ultralytics/bbox", "ultralytics/segm", "inpaint", "prompt_expansion", "prompt_expansion/fooocus_expansion", "insightface", "sams", "classifiers", "audio_encoders", "model_patches"], {"default": "checkpoints"}], "filename": ["STRING", {"multiline": false, "default": "sdxl_lightning_4step.safetensors"}]}, "optional": {"token": ["STRING", {"default": "", "multiline": false, "password": true}]}, "hidden": {"node_id": "UNIQUE_ID", "checkpoints": [["3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"]], "clip": [["clip_g.safetensors", "clip_g_hidream.safetensors", "clip_l.safetensors", "clip_l_hidream.safetensors", "llama_3.1_8b_instruct_fp8_scaled.safetensors", "t5_base.safetensors", "t5xxl_fp16.safetensors", "t5xxl_fp8_e4m3fn.safetensors", "t5xxl_fp8_e4m3fn_scaled.safetensors", "umt5_xxl_fp8_e4m3fn_scaled.safetensors"]], "clip_vision": [["clip_vision_h.safetensors"]], "configs": [["anything_v3.yaml", "v1-inference.yaml", "v1-inference_clip_skip_2.yaml", "v1-inference_clip_skip_2_fp16.yaml", "v1-inference_fp16.yaml", "v1-inpainting-inference.yaml", "v2-inference-v.yaml", "v2-inference-v_fp32.yaml", "v2-inference.yaml", "v2-inference_fp32.yaml", "v2-inpainting-inference.yaml"]], "controlnet": [["control_v11p_sd15_scribble_fp16.safetensors", "ttplanetSDXLControlnet_v20Fp16.safetensors"]], "diffusers": [[]], "diffusion_models": [["flux1-krea-dev_fp8_scaled.safetensors", "flux1-schnell.safetensors", "hidream_i1_dev_fp8.safetensors", "hidream_i1_fast_fp8.safetensors"]], "embeddings": [["SDA768.pt", "SDXL/SmoothNoob_Quality.safetensors", "SDXL/Stable_Yogis_PDXL_Positives.safetensors"]], "gligen": [[]], "hypernetworks": [[]], "loras": [["Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "photomaker": [[]], "style_models": [[]], "upscale_models": [["4x-UltraSharpV2.safetensors", "4x_NMKD-Superscale-SP_178000_G.pth", "4x_NickelbackFS_72000_G.pth", "4x_UniversalUpscalerV2-Sharp_101000_G.pth", "4x_foolhardy_Remacri.pth", "RealESRGAN_x2.pth", "RealESRGAN_x4.pth", "RealESRGAN_x4plus.pth", "RealESRGAN_x4plus_anime_6B.pth"]], "vae": [["4x_foolhardy_Remacri.pth", "ae.safetensors", "sdxl_vae.safetensors"]], "vae_approx": [[]], "ultralytics": [["bbox/face_yolov8m.pt", "bbox/hand_yolov8s.pt", "segm/person_yolov8m-seg.pt"]], "sams": [[]]}}, "input_order": {"required": ["url", "save_to", "filename"], "optional": ["token"], "hidden": ["node_id", "checkpoints", "clip", "clip_vision", "configs", "controlnet", "diffusers", "diffusion_models", "embeddings", "gligen", "hypernetworks", "loras", "photomaker", "style_models", "upscale_models", "vae", "vae_approx", "ultralytics", "sams"]}, "output": [], "output_is_list": [], "output_name": [], "name": "RequiresAsset", "display_name": "Requires Asset", "description": "", "python_module": "custom_nodes.comfy-agent", "category": "comfy_agent", "output_node": true}, "RequiresCustomNode": {"input": {"required": {"repo": ["STRING", {"multiline": false, "default": ""}]}, "hidden": {"node_id": "UNIQUE_ID"}}, "input_order": {"required": ["repo"], "hidden": ["node_id"]}, "output": [], "output_is_list": [], "output_name": [], "name": "RequiresCustomNode", "display_name": "Requires Custom Node", "description": "", "python_module": "custom_nodes.comfy-agent", "category": "comfy_agent", "output_node": true}, "RequiresPipPackage": {"input": {"required": {"package": ["STRING", {"multiline": false, "default": ""}]}, "hidden": {"node_id": "UNIQUE_ID"}}, "input_order": {"required": ["package"], "hidden": ["node_id"]}, "output": [], "output_is_list": [], "output_name": [], "name": "RequiresPipPackage", "display_name": "Requires PIP Package", "description": "", "python_module": "custom_nodes.comfy-agent", "category": "comfy_agent", "output_node": true}, "LoraLoader|pysssss": {"input": {"required": {"model": ["MODEL", {"tooltip": "The diffusion model the LoRA will be applied to."}], "clip": ["CLIP", {"tooltip": "The CLIP model the LoRA will be applied to."}], "lora_name": [["Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"tooltip": "The name of the LoRA."}], "strength_model": ["FLOAT", {"default": 1.0, "min": -100.0, "max": 100.0, "step": 0.01, "tooltip": "How strongly to modify the diffusion model. This value can be negative."}], "strength_clip": ["FLOAT", {"default": 1.0, "min": -100.0, "max": 100.0, "step": 0.01, "tooltip": "How strongly to modify the CLIP model. This value can be negative."}]}, "optional": {"prompt": ["STRING", {"hidden": true}]}}, "input_order": {"required": ["model", "clip", "lora_name", "strength_model", "strength_clip"], "optional": ["prompt"]}, "output": ["MODEL", "CLIP", "STRING"], "output_is_list": [false, false, false], "output_name": ["MODEL", "CLIP", "example"], "name": "LoraLoader|pysssss", "display_name": "Lora Loader \ud83d\udc0d", "description": "LoRAs are used to modify diffusion and CLIP models, altering the way in which latents are denoised such as applying styles. Multiple LoRA nodes can be linked together.", "python_module": "custom_nodes.ComfyUI-Custom-Scripts", "category": "loaders", "output_node": false, "output_tooltips": ["The modified diffusion model.", "The modified CLIP model."]}, "CheckpointLoader|pysssss": {"input": {"required": {"ckpt_name": [["3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"], {"tooltip": "The name of the checkpoint (model) to load."}]}, "optional": {"prompt": ["STRING", {"hidden": true}]}}, "input_order": {"required": ["ckpt_name"], "optional": ["prompt"]}, "output": ["MODEL", "CLIP", "VAE", "STRING"], "output_is_list": [false, false, false, false], "output_name": ["MODEL", "CLIP", "VAE", "example"], "name": "CheckpointLoader|pysssss", "display_name": "Checkpoint Loader \ud83d\udc0d", "description": "Loads a diffusion model checkpoint, diffusion models are used to denoise latents.", "python_module": "custom_nodes.ComfyUI-Custom-Scripts", "category": "loaders", "output_node": false, "output_tooltips": ["The model used for denoising latents.", "The CLIP model used for encoding text prompts.", "The VAE model used for encoding and decoding images to and from latent space."]}, "ConstrainImage|pysssss": {"input": {"required": {"images": ["IMAGE"], "max_width": ["INT", {"default": 1024, "min": 0}], "max_height": ["INT", {"default": 1024, "min": 0}], "min_width": ["INT", {"default": 0, "min": 0}], "min_height": ["INT", {"default": 0, "min": 0}], "crop_if_required": [["yes", "no"], {"default": "no"}]}}, "input_order": {"required": ["images", "max_width", "max_height", "min_width", "min_height", "crop_if_required"]}, "output": ["IMAGE"], "output_is_list": [true], "output_name": ["IMAGE"], "name": "ConstrainImage|pysssss", "display_name": "Constrain Image \ud83d\udc0d", "description": "", "python_module": "custom_nodes.ComfyUI-Custom-Scripts", "category": "image", "output_node": false}, "ConstrainImageforVideo|pysssss": {"input": {"required": {"images": ["IMAGE"], "max_width": ["INT", {"default": 1024, "min": 0}], "max_height": ["INT", {"default": 1024, "min": 0}], "min_width": ["INT", {"default": 0, "min": 0}], "min_height": ["INT", {"default": 0, "min": 0}], "crop_if_required": [["yes", "no"], {"default": "no"}]}}, "input_order": {"required": ["images", "max_width", "max_height", "min_width", "min_height", "crop_if_required"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "ConstrainImageforVideo|pysssss", "display_name": "Constrain Image for Video \ud83d\udc0d", "description": "", "python_module": "custom_nodes.ComfyUI-Custom-Scripts", "category": "image", "output_node": false}, "MathExpression|pysssss": {"input": {"required": {"expression": ["STRING", {"multiline": true, "dynamicPrompts": false, "pysssss.autocomplete": {"words": [{"text": "round", "value": "round()", "showValue": false, "hint": "number, dp? = 0", "caretOffset": -1}, {"text": "ceil", "value": "ceil()", "showValue": false, "hint": "number", "caretOffset": -1}, {"text": "floor", "value": "floor()", "showValue": false, "hint": "number", "caretOffset": -1}, {"text": "min", "value": "min()", "showValue": false, "hint": "...numbers", "caretOffset": -1}, {"text": "max", "value": "max()", "showValue": false, "hint": "...numbers", "caretOffset": -1}, {"text": "randomint", "value": "randomint()", "showValue": false, "hint": "min, max", "caretOffset": -1}, {"text": "randomchoice", "value": "randomchoice()", "showValue": false, "hint": "...numbers", "caretOffset": -1}, {"text": "sqrt", "value": "sqrt()", "showValue": false, "hint": "number", "caretOffset": -1}, {"text": "int", "value": "int()", "showValue": false, "hint": "number", "caretOffset": -1}, {"text": "iif", "value": "iif()", "showValue": false, "hint": "value, truepart, falsepart", "caretOffset": -1}], "separator": ""}}]}, "optional": {"a": ["*"], "b": ["*"], "c": ["*"]}, "hidden": {"extra_pnginfo": "EXTRA_PNGINFO", "prompt": "PROMPT"}}, "input_order": {"required": ["expression"], "optional": ["a", "b", "c"], "hidden": ["extra_pnginfo", "prompt"]}, "output": ["INT", "FLOAT"], "output_is_list": [false, false], "output_name": ["INT", "FLOAT"], "name": "MathExpression|pysssss", "display_name": "Math Expression \ud83d\udc0d", "description": "", "python_module": "custom_nodes.ComfyUI-Custom-Scripts", "category": "utils", "output_node": true}, "PlaySound|pysssss": {"input": {"required": {"any": ["*", {}], "mode": [["always", "on empty queue"], {}], "volume": ["FLOAT", {"min": 0, "max": 1, "step": 0.1, "default": 0.5}], "file": ["STRING", {"default": "notify.mp3"}]}}, "input_order": {"required": ["any", "mode", "volume", "file"]}, "output": ["*"], "output_is_list": [true], "output_name": ["*"], "name": "PlaySound|pysssss", "display_name": "PlaySound \ud83d\udc0d", "description": "", "python_module": "custom_nodes.ComfyUI-Custom-Scripts", "category": "utils", "output_node": true}, "Repeater|pysssss": {"input": {"required": {"source": ["*", {}], "repeats": ["INT", {"min": 0, "max": 5000, "default": 2}], "output": [["single", "multi"], {}], "node_mode": [["reuse", "create"], {}]}}, "input_order": {"required": ["source", "repeats", "output", "node_mode"]}, "output": ["*"], "output_is_list": [true], "output_name": ["*"], "name": "Repeater|pysssss", "display_name": "Repeater \ud83d\udc0d", "description": "", "python_module": "custom_nodes.ComfyUI-Custom-Scripts", "category": "utils", "output_node": false}, "ReroutePrimitive|pysssss": {"input": {"required": {"value": ["*"]}}, "input_order": {"required": ["value"]}, "output": ["*"], "output_is_list": [false], "output_name": ["*"], "name": "ReroutePrimitive|pysssss", "display_name": "Reroute Primitive \ud83d\udc0d", "description": "", "python_module": "custom_nodes.ComfyUI-Custom-Scripts", "category": "__hidden__", "output_node": false}, "ShowText|pysssss": {"input": {"required": {"text": ["STRING", {"forceInput": true}]}, "hidden": {"unique_id": "UNIQUE_ID", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["text"], "hidden": ["unique_id", "extra_pnginfo"]}, "output": ["STRING"], "output_is_list": [true], "output_name": ["STRING"], "name": "ShowText|pysssss", "display_name": "Show Text \ud83d\udc0d", "description": "", "python_module": "custom_nodes.ComfyUI-Custom-Scripts", "category": "utils", "output_node": true}, "StringFunction|pysssss": {"input": {"required": {"action": [["append", "replace"], {}], "tidy_tags": [["yes", "no"], {}]}, "optional": {"text_a": ["STRING", {"multiline": true, "dynamicPrompts": false}], "text_b": ["STRING", {"multiline": true, "dynamicPrompts": false}], "text_c": ["STRING", {"multiline": true, "dynamicPrompts": false}]}}, "input_order": {"required": ["action", "tidy_tags"], "optional": ["text_a", "text_b", "text_c"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["STRING"], "name": "StringFunction|pysssss", "display_name": "String Function \ud83d\udc0d", "description": "", "python_module": "custom_nodes.ComfyUI-Custom-Scripts", "category": "utils", "output_node": true}, "SystemNotification|pysssss": {"input": {"required": {"message": ["STRING", {"default": "Your notification has triggered."}], "any": ["*", {}], "mode": [["always", "on empty queue"], {}]}}, "input_order": {"required": ["message", "any", "mode"]}, "output": ["*"], "output_is_list": [true], "output_name": ["*"], "name": "SystemNotification|pysssss", "display_name": "SystemNotification \ud83d\udc0d", "description": "", "python_module": "custom_nodes.ComfyUI-Custom-Scripts", "category": "utils", "output_node": true}, "LoadText|pysssss": {"input": {"required": {"root_dir": [["input", "output", "temp"], {}], "file": [["[none]"], {"pysssss.binding": [{"source": "root_dir", "callback": [{"type": "set", "target": "$this.disabled", "value": true}, {"type": "fetch", "url": "/pysssss/text-file/{$source.value}", "then": [{"type": "set", "target": "$this.options.values", "value": "$result"}, {"type": "validate-combo"}, {"type": "set", "target": "$this.disabled", "value": false}]}]}]}]}}, "input_order": {"required": ["root_dir", "file"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["STRING"], "name": "LoadText|pysssss", "display_name": "Load Text \ud83d\udc0d", "description": "", "python_module": "custom_nodes.ComfyUI-Custom-Scripts", "category": "utils", "output_node": false}, "SaveText|pysssss": {"input": {"required": {"root_dir": [["input", "output", "temp"], {}], "file": ["STRING", {"default": "file.txt"}], "append": [["append", "overwrite", "new only"], {}], "insert": ["BOOLEAN", {"default": true, "label_on": "new line", "label_off": "none", "pysssss.binding": [{"source": "append", "callback": [{"type": "if", "condition": [{"left": "$source.value", "op": "eq", "right": "\"append\""}], "true": [{"type": "set", "target": "$this.disabled", "value": false}], "false": [{"type": "set", "target": "$this.disabled", "value": true}]}]}]}], "text": ["STRING", {"forceInput": true, "multiline": true}]}}, "input_order": {"required": ["root_dir", "file", "append", "insert", "text"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["STRING"], "name": "SaveText|pysssss", "display_name": "Save Text \ud83d\udc0d", "description": "", "python_module": "custom_nodes.ComfyUI-Custom-Scripts", "category": "utils", "output_node": true}, "UltimateSDUpscale": {"input": {"required": {"image": ["IMAGE"], "model": ["MODEL"], "positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "vae": ["VAE"], "upscale_by": ["FLOAT", {"default": 2, "min": 0.05, "max": 4, "step": 0.05}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000, "step": 1}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "denoise": ["FLOAT", {"default": 0.2, "min": 0.0, "max": 1.0, "step": 0.01}], "upscale_model": ["UPSCALE_MODEL"], "mode_type": [["Linear", "Chess", "None"]], "tile_width": ["INT", {"default": 512, "min": 64, "max": 8192, "step": 8}], "tile_height": ["INT", {"default": 512, "min": 64, "max": 8192, "step": 8}], "mask_blur": ["INT", {"default": 8, "min": 0, "max": 64, "step": 1}], "tile_padding": ["INT", {"default": 32, "min": 0, "max": 8192, "step": 8}], "seam_fix_mode": [["None", "Band Pass", "Half Tile", "Half Tile + Intersections"]], "seam_fix_denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "seam_fix_width": ["INT", {"default": 64, "min": 0, "max": 8192, "step": 8}], "seam_fix_mask_blur": ["INT", {"default": 8, "min": 0, "max": 64, "step": 1}], "seam_fix_padding": ["INT", {"default": 16, "min": 0, "max": 8192, "step": 8}], "force_uniform_tiles": ["BOOLEAN", {"default": true}], "tiled_decode": ["BOOLEAN", {"default": false}]}}, "input_order": {"required": ["image", "model", "positive", "negative", "vae", "upscale_by", "seed", "steps", "cfg", "sampler_name", "scheduler", "denoise", "upscale_model", "mode_type", "tile_width", "tile_height", "mask_blur", "tile_padding", "seam_fix_mode", "seam_fix_denoise", "seam_fix_width", "seam_fix_mask_blur", "seam_fix_padding", "force_uniform_tiles", "tiled_decode"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "UltimateSDUpscale", "display_name": "Ultimate SD Upscale", "description": "", "python_module": "custom_nodes.ComfyUI_UltimateSDUpscale", "category": "image/upscaling", "output_node": false}, "UltimateSDUpscaleNoUpscale": {"input": {"required": {"upscaled_image": ["IMAGE"], "model": ["MODEL"], "positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "vae": ["VAE"], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000, "step": 1}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "denoise": ["FLOAT", {"default": 0.2, "min": 0.0, "max": 1.0, "step": 0.01}], "mode_type": [["Linear", "Chess", "None"]], "tile_width": ["INT", {"default": 512, "min": 64, "max": 8192, "step": 8}], "tile_height": ["INT", {"default": 512, "min": 64, "max": 8192, "step": 8}], "mask_blur": ["INT", {"default": 8, "min": 0, "max": 64, "step": 1}], "tile_padding": ["INT", {"default": 32, "min": 0, "max": 8192, "step": 8}], "seam_fix_mode": [["None", "Band Pass", "Half Tile", "Half Tile + Intersections"]], "seam_fix_denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "seam_fix_width": ["INT", {"default": 64, "min": 0, "max": 8192, "step": 8}], "seam_fix_mask_blur": ["INT", {"default": 8, "min": 0, "max": 64, "step": 1}], "seam_fix_padding": ["INT", {"default": 16, "min": 0, "max": 8192, "step": 8}], "force_uniform_tiles": ["BOOLEAN", {"default": true}], "tiled_decode": ["BOOLEAN", {"default": false}]}}, "input_order": {"required": ["upscaled_image", "model", "positive", "negative", "vae", "seed", "steps", "cfg", "sampler_name", "scheduler", "denoise", "mode_type", "tile_width", "tile_height", "mask_blur", "tile_padding", "seam_fix_mode", "seam_fix_denoise", "seam_fix_width", "seam_fix_mask_blur", "seam_fix_padding", "force_uniform_tiles", "tiled_decode"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "UltimateSDUpscaleNoUpscale", "display_name": "Ultimate SD Upscale (No Upscale)", "description": "", "python_module": "custom_nodes.ComfyUI_UltimateSDUpscale", "category": "image/upscaling", "output_node": false}, "UltimateSDUpscaleCustomSample": {"input": {"required": {"image": ["IMAGE"], "model": ["MODEL"], "positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "vae": ["VAE"], "upscale_by": ["FLOAT", {"default": 2, "min": 0.05, "max": 4, "step": 0.05}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000, "step": 1}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "denoise": ["FLOAT", {"default": 0.2, "min": 0.0, "max": 1.0, "step": 0.01}], "mode_type": [["Linear", "Chess", "None"]], "tile_width": ["INT", {"default": 512, "min": 64, "max": 8192, "step": 8}], "tile_height": ["INT", {"default": 512, "min": 64, "max": 8192, "step": 8}], "mask_blur": ["INT", {"default": 8, "min": 0, "max": 64, "step": 1}], "tile_padding": ["INT", {"default": 32, "min": 0, "max": 8192, "step": 8}], "seam_fix_mode": [["None", "Band Pass", "Half Tile", "Half Tile + Intersections"]], "seam_fix_denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "seam_fix_width": ["INT", {"default": 64, "min": 0, "max": 8192, "step": 8}], "seam_fix_mask_blur": ["INT", {"default": 8, "min": 0, "max": 64, "step": 1}], "seam_fix_padding": ["INT", {"default": 16, "min": 0, "max": 8192, "step": 8}], "force_uniform_tiles": ["BOOLEAN", {"default": true}], "tiled_decode": ["BOOLEAN", {"default": false}]}, "optional": {"upscale_model": ["UPSCALE_MODEL"], "custom_sampler": ["SAMPLER"], "custom_sigmas": ["SIGMAS"]}}, "input_order": {"required": ["image", "model", "positive", "negative", "vae", "upscale_by", "seed", "steps", "cfg", "sampler_name", "scheduler", "denoise", "mode_type", "tile_width", "tile_height", "mask_blur", "tile_padding", "seam_fix_mode", "seam_fix_denoise", "seam_fix_width", "seam_fix_mask_blur", "seam_fix_padding", "force_uniform_tiles", "tiled_decode"], "optional": ["upscale_model", "custom_sampler", "custom_sigmas"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "UltimateSDUpscaleCustomSample", "display_name": "Ultimate SD Upscale (Custom Sample)", "description": "", "python_module": "custom_nodes.ComfyUI_UltimateSDUpscale", "category": "image/upscaling", "output_node": false}, "ClassifiyImage": {"input": {"required": {"url": ["STRING", {"multiline": false, "default": ""}]}, "hidden": {"node_id": "UNIQUE_ID"}}, "input_order": {"required": ["url"], "hidden": ["node_id"]}, "output": [], "output_is_list": [], "output_name": [], "name": "ClassifiyImage", "display_name": "Classifiy Image", "description": "", "python_module": "custom_nodes.classifier-agent", "category": "comfy_agent", "output_node": true}, "ClassifiyAudio": {"input": {"required": {"url": ["STRING", {"multiline": false, "default": ""}]}, "hidden": {"node_id": "UNIQUE_ID"}}, "input_order": {"required": ["url"], "hidden": ["node_id"]}, "output": [], "output_is_list": [], "output_name": [], "name": "ClassifiyAudio", "display_name": "Classifiy Audio", "description": "", "python_module": "custom_nodes.classifier-agent", "category": "comfy_agent", "output_node": true}, "UltralyticsDetectorProvider": {"input": {"required": {"model_name": [["bbox/face_yolov8m.pt", "bbox/hand_yolov8s.pt", "segm/person_yolov8m-seg.pt"]]}}, "input_order": {"required": ["model_name"]}, "output": ["BBOX_DETECTOR", "SEGM_DETECTOR"], "output_is_list": [false, false], "output_name": ["BBOX_DETECTOR", "SEGM_DETECTOR"], "name": "UltralyticsDetectorProvider", "display_name": "UltralyticsDetectorProvider", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Subpack", "category": "ImpactPack", "output_node": false}, "easy showLoaderSettingsNames": {"input": {"required": {"pipe": ["PIPE_LINE"]}, "hidden": {"unique_id": "UNIQUE_ID", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["pipe"], "hidden": ["unique_id", "extra_pnginfo"]}, "output": ["STRING", "STRING", "STRING"], "output_is_list": [false, false, false], "output_name": ["ckpt_name", "vae_name", "lora_name"], "name": "easy showLoaderSettingsNames", "display_name": "Show Loader Settings Names", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Util", "output_node": true}, "easy sliderControl": {"input": {"required": {"mode": [["ipadapter layer weights"]], "model_type": [["sdxl", "sd1"]]}, "hidden": {"prompt": "PROMPT", "my_unique_id": "UNIQUE_ID", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["mode", "model_type"], "hidden": ["prompt", "my_unique_id", "extra_pnginfo"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["layer_weights"], "name": "easy sliderControl", "display_name": "Easy Slider Control", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Util", "output_node": false}, "easy ckptNames": {"input": {"required": {"ckpt_name": [["3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"]]}}, "input_order": {"required": ["ckpt_name"]}, "output": ["*"], "output_is_list": [false], "output_name": ["ckpt_name"], "name": "easy ckptNames", "display_name": "Ckpt Names", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Util", "output_node": false}, "easy controlnetNames": {"input": {"required": {"controlnet_name": [["control_v11p_sd15_scribble_fp16.safetensors", "ttplanetSDXLControlnet_v20Fp16.safetensors"]]}}, "input_order": {"required": ["controlnet_name"]}, "output": ["*"], "output_is_list": [false], "output_name": ["controlnet_name"], "name": "easy controlnetNames", "display_name": "ControlNet Names", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Util", "output_node": false}, "easy loraNames": {"input": {"required": {"lora_name": [["Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]]}}, "input_order": {"required": ["lora_name"]}, "output": ["*"], "output_is_list": [false], "output_name": ["lora_name"], "name": "easy loraNames", "display_name": "Lora Names", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Util", "output_node": false}, "easy seed": {"input": {"required": {"seed": ["INT", {"default": 0, "min": 0, "max": 1125899906842624}]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["seed"], "hidden": ["prompt", "extra_pnginfo", "my_unique_id"]}, "output": ["INT"], "output_is_list": [false], "output_name": ["seed"], "name": "easy seed", "display_name": "EasySeed", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Seed", "output_node": false}, "easy seedList": {"input": {"required": {"min_num": ["INT", {"default": 0, "min": 0, "max": 1125899906842624}], "max_num": ["INT", {"default": 1125899906842624, "min": 0}], "method": [["random", "increment", "decrement"], {"default": "random"}], "total": ["INT", {"default": 1, "min": 1, "max": 100000}], "seed": ["INT", {"default": 0, "min": 0, "max": 1125899906842624}]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["min_num", "max_num", "method", "total", "seed"], "hidden": ["prompt", "extra_pnginfo", "my_unique_id"]}, "output": ["INT", "INT"], "output_is_list": [false, false], "output_name": ["seed", "total"], "name": "easy seedList", "display_name": "EasySeedList", "description": "Random number seed that can be used in a for loop, by connecting index and easy indexAny node to realize different seed values in the loop.", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Seed", "output_node": false}, "easy globalSeed": {"input": {"required": {"value": ["INT", {"default": 0, "min": 0, "max": 1125899906842624}], "mode": ["BOOLEAN", {"default": true, "label_on": "control_before_generate", "label_off": "control_after_generate"}], "action": [["fixed", "increment", "decrement", "randomize", "increment for each node", "decrement for each node", "randomize for each node"]], "last_seed": ["STRING", {"default": ""}]}}, "input_order": {"required": ["value", "mode", "action", "last_seed"]}, "output": [], "output_is_list": [], "output_name": [], "name": "easy globalSeed", "display_name": "EasyGlobalSeed", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Seed", "output_node": true}, "easy positive": {"input": {"required": {"positive": ["STRING", {"default": "", "multiline": true, "placeholder": "Positive"}]}}, "input_order": {"required": ["positive"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["positive"], "name": "easy positive", "display_name": "Positive", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Prompt", "output_node": false}, "easy negative": {"input": {"required": {"negative": ["STRING", {"default": "", "multiline": true, "placeholder": "Negative"}]}}, "input_order": {"required": ["negative"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["negative"], "name": "easy negative", "display_name": "Negative", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Prompt", "output_node": false}, "easy wildcards": {"input": {"required": {"text": ["STRING", {"default": "", "multiline": true, "dynamicPrompts": false, "placeholder": "(Support wildcard)"}], "Select to add LoRA": [["Select the LoRA to add to the text", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "Select to add Wildcard": [["Select the Wildcard to add to the text", "__example__"]], "seed": ["INT", {"default": 0, "min": 0, "max": 1125899906842624}], "multiline_mode": ["BOOLEAN", {"default": false}]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["text", "Select to add LoRA", "Select to add Wildcard", "seed", "multiline_mode"], "hidden": ["prompt", "extra_pnginfo", "my_unique_id"]}, "output": ["STRING", "STRING"], "output_is_list": [true, true], "output_name": ["text", "populated_text"], "name": "easy wildcards", "display_name": "Wildcards", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Prompt", "output_node": false}, "easy wildcardsMatrix": {"input": {"required": {"text": ["STRING", {"default": "", "multiline": true, "dynamicPrompts": false, "placeholder": "(Support Lora Block Weight and wildcard)"}], "Select to add LoRA": [["Select the LoRA to add to the text", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "Select to add Wildcard": [["Select the Wildcard to add to the text", "__example__"]], "offset": ["INT", {"default": 0, "min": 0, "step": 1, "control_after_generate": true}]}, "optional": {"output_limit": ["INT", {"default": 1, "min": -1, "step": 1, "tooltip": "Output All Probilities"}]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["text", "Select to add LoRA", "Select to add Wildcard", "offset"], "optional": ["output_limit"], "hidden": ["prompt", "extra_pnginfo", "my_unique_id"]}, "output": ["STRING", "INT", "INT"], "output_is_list": [true, false, true], "output_name": ["populated_text", "total", "factors"], "name": "easy wildcardsMatrix", "display_name": "Wildcards Matrix", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Prompt", "output_node": false}, "easy prompt": {"input": {"required": {"text": ["STRING", {"default": "", "multiline": true, "placeholder": "Prompt"}], "prefix": [["Select the prefix add to the text", "Detailed photo of", "Amateur photo of", "Flicker 2008 photo of", "Fantastic artwork of", "Vintage photograph of", "Unreal 5 render of", "Surrealist painting of", "Professional advertising design of"], {"default": "Select the prefix add to the text"}], "subject": [["\ud83d\udc64Select the subject add to the text", "a man", "a woman", "a young man", "a young woman", "a handsome man", "a beautiful woman", "a monster", "a toy", "a product", "a buddha", "a dog", "a cat"], {"default": "\ud83d\udc64Select the subject add to the text"}], "action": [["\ud83c\udfacSelect the action add to the text", "looking at viewer", "looking away", "looking up", "looking down", "looking back", "open mouth", "half-closed mouth", "closed mouth", "open eyes", "half-closed eyes", "closed eyes", "wink", "standing", "sitting", "lying", "walking", "running", "adjusting hair", "waving", "hand on hip", "crossed arms", "smile", "sad", "angry", "sleepy", "tired", "expressionless"], {"default": "\ud83c\udfacSelect the action add to the text"}], "clothes": [["\ud83d\udc5aSelect the clothes add to the text", "underwear", "clothed", "casual", "dress", "swimsuit", "uniform", "bikini", "one-piece swimsuit", "shirt", "blouse", "sweater", "hoodie", "jeans", "pants", "shorts", "skirt", "vest", "coat", "trenchoat", "jacket", "short dress", "long dress", "off-shoulder", "backless", "hairbow", "hair ribbon", "hair tie", "hairband", "cap", "beanie", "bucket hat", "sun hat", "straw hat", "rice hat", "witch hat", "crown", "chain necklace", "tooth necklace", "choker", "pendant", "bracelet", "watch", "ring", "earring", "anklet", "belt", "scarf", "gloves", "mittens", "socks", "stockings", "tights", "leggings", "boots", "sneakers", "heels", "sandals", "flip-flops", "slippers", "loafers", "mules", "oxfords", "brogues", "derbies", "monk shoes", "chelsea boots", "combat boots", "riding boots", "rain boots", "wedge heels", "platform heels", "stilettos", "block heels", "kitten heels", "moccasins", "espadrilles", "pumps", "flats", "ballet flats", "mary janes", "slingbacks", "peep-toe", "mule sandals", "gladiator sandals", "thong sandals", "slide sandals", "espadrille sandals", "wedge sandals", "platform sandals", "ankle boots", "knee-high boots", "over-the-knee boots", "thigh-high boots", "wellington boots", "chukka boots", "desert boots", "chelsea boots", "hiking boots", "work boots", "snow boots", "rain boots", "riding boots", "cowboy boots", "combat boots", "biker boots", "duck boots", "military boots", "western boots", "ankle strap heels", "block heels", "chunky heels", "cone heels", "kitten heels", "platform heels", "pumps", "slingback heels", "stiletto heels", "wedge heels", "mules", "slingbacks", "slides", "thong sandals", "gladiator sandals", "espadrilles", "wedge sandals", "platform sandals", "ankle boots", "knee-high boots", "over-the-knee boots", "thigh-high boots", "wellington boots", "chukka boots", "desert boots", "chelsea boots", "hiking boots", "work boots", "snow boots", "rain boots", "riding boots", "cowboy boots", "combat boots", "biker boots", "duck boots", "military boots", "western boots", "ankle strap heels", "block heels"], {"default": "\ud83d\udc5aSelect the clothes add to the text"}], "environment": [["\u2600\ufe0fSelect the illumination environment add to the text", "sunshine from window", "neon night, city", "sunset over sea", "golden time", "sci-fi RGB glowing, cyberpunk", "natural lighting", "warm atmosphere, at home, bedroom", "magic lit", "evil, gothic, in a cave", "light and shadow", "shadow from window", "soft studio lighting", "home atmosphere, cozy bedroom illumination", "neon, Wong Kar-wai, warm", "moonlight through curtains", "stormy sky lighting", "underwater glow, deep sea", "foggy forest at dawn", "golden hour in a meadow", "rainbow reflections, neon", "cozy candlelight", "apocalyptic, smoky atmosphere", "red glow, emergency lights", "mystical glow, enchanted forest", "campfire light", "harsh, industrial lighting", "sunrise in the mountains", "evening glow in the desert", "moonlight in a dark alley", "golden glow at a fairground", "midnight in the forest", "purple and pink hues at twilight", "foggy morning, muted light", "candle-lit room, rustic vibe", "fluorescent office lighting", "lightning flash in storm", "night, cozy warm light from fireplace", "ethereal glow, magical forest", "dusky evening on a beach", "afternoon light filtering through trees", "blue neon light, urban street", "red and blue police lights in rain", "aurora borealis glow, arctic landscape", "sunrise through foggy mountains", "golden hour on a city skyline", "mysterious twilight, heavy mist", "early morning rays, forest clearing", "colorful lantern light at festival", "soft glow through stained glass", "harsh spotlight in dark room", "mellow evening glow on a lake", "crystal reflections in a cave", "vibrant autumn lighting in a forest", "gentle snowfall at dusk", "hazy light of a winter morning", "soft, diffused foggy glow", "underwater luminescence", "rain-soaked reflections in city lights", "golden sunlight streaming through trees", "fireflies lighting up a summer night", "glowing embers from a forge", "dim candlelight in a gothic castle", "midnight sky with bright starlight", "warm sunset in a rural village", "flickering light in a haunted house", "desert sunset with mirage-like glow", "golden beams piercing through storm clouds"], {"default": "\u2600\ufe0fSelect the illumination environment add to the text"}], "background": [["\ud83c\udf9e\ufe0fSelect the background add to the text", "cars and people", "a cozy bed and a lamp", "a forest clearing with mist", "a bustling marketplace", "a quiet beach at dusk", "an old, cobblestone street", "a futuristic cityscape", "a tranquil lake with mountains", "a mysterious cave entrance", "bookshelves and plants in the background", "an ancient temple in ruins", "tall skyscrapers and neon signs", "a starry sky over a desert", "a bustling caf\u00e9", "rolling hills and farmland", "a modern living room with a fireplace", "an abandoned warehouse", "a picturesque mountain range", "a starry night sky", "the interior of a futuristic spaceship", "the cluttered workshop of an inventor", "the glowing embers of a bonfire", "a misty lake surrounded by trees", "an ornate palace hall", "a busy street market", "a vast desert landscape", "a peaceful library corner", "bustling train station", "a mystical, enchanted forest", "an underwater reef with colorful fish", "a quiet rural village", "a sandy beach with palm trees", "a vibrant coral reef, teeming with life", "snow-capped mountains in distance", "a stormy ocean, waves crashing", "a rustic barn in open fields", "a futuristic lab with glowing screens", "a dark, abandoned castle", "the ruins of an ancient civilization", "a bustling urban street in rain", "an elegant grand ballroom", "a sprawling field of wildflowers", "a dense jungle with sunlight filtering through", "a dimly lit, vintage bar", "an ice cave with sparkling crystals", "a serene riverbank at sunset", "a narrow alley with graffiti walls", "a peaceful zen garden with koi pond", "a high-tech control room", "a quiet mountain village at dawn", "a lighthouse on a rocky coast", "a rainy street with flickering lights", "a frozen lake with ice formations", "an abandoned theme park", "a small fishing village on a pier", "rolling sand dunes in a desert", "a dense forest with towering redwoods", "a snowy cabin in the mountains", "a mystical cave with bioluminescent plants", "a castle courtyard under moonlight", "a bustling open-air night market", "an old train station with steam", "a tranquil waterfall surrounded by trees", "a vineyard in the countryside", "a quaint medieval village", "a bustling harbor with boats", "a high-tech futuristic mall", "a lush tropical rainforest"], {"default": "\ud83c\udf9e\ufe0fSelect the background add to the text"}], "nsfw": [["\ud83d\udd1eSelect the nsfw add to the text", "nude", "breast", "small breast", "middle breast", "large breast", "nipples", "clothes lift", "pussy juice trail", "pussy juice puddle", "small testicles", "medium testicles", "large testicles", "disembodied penis", "cum on body", "cum inside", "cum outside", "fingering", "handjob", "fellatio", "licking penis", "paizuri", "doggystyle", "cowgirl", "reversed cowgirl", "piledriver", "suspended congress", "full nelson"], {"default": "\ud83d\udd1e\ufe0fSelect the nsfw add to the text"}]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["text", "prefix", "subject", "action", "clothes", "environment", "background", "nsfw"], "hidden": ["prompt", "extra_pnginfo", "my_unique_id"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["prompt"], "name": "easy prompt", "display_name": "Prompt", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Prompt", "output_node": false}, "easy promptList": {"input": {"required": {"prompt_1": ["STRING", {"multiline": true, "default": ""}], "prompt_2": ["STRING", {"multiline": true, "default": ""}], "prompt_3": ["STRING", {"multiline": true, "default": ""}], "prompt_4": ["STRING", {"multiline": true, "default": ""}], "prompt_5": ["STRING", {"multiline": true, "default": ""}]}, "optional": {"optional_prompt_list": ["LIST"]}}, "input_order": {"required": ["prompt_1", "prompt_2", "prompt_3", "prompt_4", "prompt_5"], "optional": ["optional_prompt_list"]}, "output": ["LIST", "STRING"], "output_is_list": [false, true], "output_name": ["prompt_list", "prompt_strings"], "name": "easy promptList", "display_name": "PromptList", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Prompt", "output_node": false}, "easy promptLine": {"input": {"required": {"prompt": ["STRING", {"multiline": true, "default": "text"}], "start_index": ["INT", {"default": 0, "min": 0, "max": 9999}], "max_rows": ["INT", {"default": 1000, "min": 1, "max": 9999}]}, "hidden": {"workflow_prompt": "PROMPT", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["prompt", "start_index", "max_rows"], "hidden": ["workflow_prompt", "my_unique_id"]}, "output": ["STRING", "*"], "output_is_list": [true, true], "output_name": ["STRING", "COMBO"], "name": "easy promptLine", "display_name": "PromptLine", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Prompt", "output_node": false}, "easy promptAwait": {"input": {"required": {"now": ["*"], "prompt": ["STRING", {"multiline": true, "default": "", "placeholder": "Enter a prompt or use voice to enter to text"}], "toolbar": ["EASY_PROMPT_AWAIT_BAR"]}, "optional": {"prev": ["*"]}, "hidden": {"workflow_prompt": "PROMPT", "my_unique_id": "UNIQUE_ID", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["now", "prompt", "toolbar"], "optional": ["prev"], "hidden": ["workflow_prompt", "my_unique_id", "extra_pnginfo"]}, "output": ["*", "STRING", "BOOLEAN", "INT"], "output_is_list": [false, false, false, false], "output_name": ["output", "prompt", "continue", "seed"], "name": "easy promptAwait", "display_name": "PromptAwait", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Prompt", "output_node": false}, "easy promptConcat": {"input": {"required": {}, "optional": {"prompt1": ["STRING", {"multiline": false, "default": "", "forceInput": true}], "prompt2": ["STRING", {"multiline": false, "default": "", "forceInput": true}], "separator": ["STRING", {"multiline": false, "default": ""}]}}, "input_order": {"required": [], "optional": ["prompt1", "prompt2", "separator"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["prompt"], "name": "easy promptConcat", "display_name": "PromptConcat", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Prompt", "output_node": false}, "easy promptReplace": {"input": {"required": {"prompt": ["STRING", {"multiline": true, "default": "", "forceInput": true}]}, "optional": {"find1": ["STRING", {"multiline": false, "default": ""}], "replace1": ["STRING", {"multiline": false, "default": ""}], "find2": ["STRING", {"multiline": false, "default": ""}], "replace2": ["STRING", {"multiline": false, "default": ""}], "find3": ["STRING", {"multiline": false, "default": ""}], "replace3": ["STRING", {"multiline": false, "default": ""}]}}, "input_order": {"required": ["prompt"], "optional": ["find1", "replace1", "find2", "replace2", "find3", "replace3"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["prompt"], "name": "easy promptReplace", "display_name": "PromptReplace", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Prompt", "output_node": false}, "easy stylesSelector": {"input": {"required": {"styles": [["fooocus_styles"], {"default": "fooocus_styles"}]}, "optional": {"positive": ["STRING", {"forceInput": true}], "negative": ["STRING", {"forceInput": true}], "select_styles": ["EASY_PROMPT_STYLES", {}]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["styles"], "optional": ["positive", "negative", "select_styles"], "hidden": ["prompt", "extra_pnginfo", "my_unique_id"]}, "output": ["STRING", "STRING"], "output_is_list": [false, false], "output_name": ["positive", "negative"], "name": "easy stylesSelector", "display_name": "Styles Selector", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Prompt", "output_node": false}, "easy portraitMaster": {"input": {"required": {"shot": [["-", "Head portrait", "Head and shoulders portrait", "Half-length portrait", "Full-length portrait", "Face", "Portrait", "Full body", "Close-up"], {"key": "shot_list"}], "shot_weight": ["FLOAT", {"default": 0, "step": 0.05, "min": 0, "max": 1.95, "display": "slider"}], "gender": [["-", "Man", "Woman"], {"default": "Woman", "key": "gender_list"}], "age": ["INT", {"default": 30, "min": 18, "max": 90, "step": 1, "display": "slider"}], "nationality_1": [["-", "Afghan", "Albanian", "Algerian", "Andorran", "Angolan", "Antiguans Barbudans", "Argentine", "Armenian", "Australian", "Austrian", "Azerbaijani", "Bahamian", "Bahraini", "Bangladeshi", "Barbadian", "Belarusian", "Belgian", "Belizean", "Beninese", "Bhutanese", "Bolivian", "Bosnian Herzegovinian", "Brazilian", "British", "Bruneian", "Bulgarian", "Burkinabe", "Burundian", "Cambodian", "Cameroonian", "Canadian", "Cape Verdian", "Central African", "Chadian", "Chilean", "Chinese", "Colombian", "Comoran", "Congolese", "Costa Rican", "Croatian", "Cuban", "Cypriot", "Czech", "Danish", "Djibouti", "Dominican", "Dutch", "East Timorese", "Ecuadorean", "Egyptian", "Emirian", "Equatorial Guinean", "Eritrean", "Estonian", "Ethiopian", "Fijian", "Filipino", "Finnish", "French", "Gabonese", "Gambian", "Georgian", "German", "Ghanaian", "Greek", "Grenadian", "Guatemalan", "Guinean", "Guyanese", "Haitian", "Herzegovinian", "Honduran", "Hungarian", "Icelander", "Indian", "Indonesian", "Iranian", "Iraqi", "Irish", "Israeli", "Italian", "Ivorian", "Jamaican", "Japanese", "Jordanian", "Kazakhstani", "Kenyan", "Kiribati", "North Korean", "South Korean", "Kuwaiti", "Kyrgyz", "Laotian", "Latvian", "Lebanese", "Liberian", "Libyan", "Liechtensteiner", "Lithuanian", "Luxembourgish", "Macedonian", "Malagasy", "Malawian", "Malaysian", "Maldivan", "Malian", "Maltese", "Marshallese", "Mauritanian", "Mauritian", "Mexican", "Micronesian", "Moldovan", "Monegasque", "Mongolian", "Montenegrin", "Moroccan", "Mosotho", "Motswana", "Mozambican", "Namibian", "Nauruan", "Nepalese", "New Zealander", "Ni-Vanuatu", "Nicaraguan", "Nigerian", "Nigerien", "North Korean", "Northern Irish", "Norwegian", "Omani", "Pakistani", "Palauan", "Palestinian", "Panamanian", "Papua New Guinean", "Paraguayan", "Peruvian", "Polish", "Portuguese", "Qatari", "Romanian", "Russian", "Rwandan", "Saint Lucian", "Salvadoran", "Samoan", "San Marinese", "Sao Tomean", "Saudi", "Scottish", "Senegalese", "Serbian", "Seychellois", "Sierra Leonean", "Singaporean", "Slovakian", "Slovenian", "Solomon Islander", "Somali", "South African", "South Korean", "South Sudanese", "Spanish", "Sri Lankan", "Sudanese", "Surinamer", "Swazi", "Swedish", "Swiss", "Syrian", "Tajikistani", "Tanzanian", "Thai", "Togolese", "Tongan", "Trinidadian Tobagonian", "Tunisian", "Turkish", "Turkmen", "Tuvaluan", "Ugandan", "Ukrainian", "Uruguayan", "Uzbekistani", "Venezuelan", "Vietnamese", "Welsh", "Yemeni", "Zambian", "Zimbabwean"], {"default": "Chinese", "key": "nationality_list"}], "nationality_2": [["-", "Afghan", "Albanian", "Algerian", "Andorran", "Angolan", "Antiguans Barbudans", "Argentine", "Armenian", "Australian", "Austrian", "Azerbaijani", "Bahamian", "Bahraini", "Bangladeshi", "Barbadian", "Belarusian", "Belgian", "Belizean", "Beninese", "Bhutanese", "Bolivian", "Bosnian Herzegovinian", "Brazilian", "British", "Bruneian", "Bulgarian", "Burkinabe", "Burundian", "Cambodian", "Cameroonian", "Canadian", "Cape Verdian", "Central African", "Chadian", "Chilean", "Chinese", "Colombian", "Comoran", "Congolese", "Costa Rican", "Croatian", "Cuban", "Cypriot", "Czech", "Danish", "Djibouti", "Dominican", "Dutch", "East Timorese", "Ecuadorean", "Egyptian", "Emirian", "Equatorial Guinean", "Eritrean", "Estonian", "Ethiopian", "Fijian", "Filipino", "Finnish", "French", "Gabonese", "Gambian", "Georgian", "German", "Ghanaian", "Greek", "Grenadian", "Guatemalan", "Guinean", "Guyanese", "Haitian", "Herzegovinian", "Honduran", "Hungarian", "Icelander", "Indian", "Indonesian", "Iranian", "Iraqi", "Irish", "Israeli", "Italian", "Ivorian", "Jamaican", "Japanese", "Jordanian", "Kazakhstani", "Kenyan", "Kiribati", "North Korean", "South Korean", "Kuwaiti", "Kyrgyz", "Laotian", "Latvian", "Lebanese", "Liberian", "Libyan", "Liechtensteiner", "Lithuanian", "Luxembourgish", "Macedonian", "Malagasy", "Malawian", "Malaysian", "Maldivan", "Malian", "Maltese", "Marshallese", "Mauritanian", "Mauritian", "Mexican", "Micronesian", "Moldovan", "Monegasque", "Mongolian", "Montenegrin", "Moroccan", "Mosotho", "Motswana", "Mozambican", "Namibian", "Nauruan", "Nepalese", "New Zealander", "Ni-Vanuatu", "Nicaraguan", "Nigerian", "Nigerien", "North Korean", "Northern Irish", "Norwegian", "Omani", "Pakistani", "Palauan", "Palestinian", "Panamanian", "Papua New Guinean", "Paraguayan", "Peruvian", "Polish", "Portuguese", "Qatari", "Romanian", "Russian", "Rwandan", "Saint Lucian", "Salvadoran", "Samoan", "San Marinese", "Sao Tomean", "Saudi", "Scottish", "Senegalese", "Serbian", "Seychellois", "Sierra Leonean", "Singaporean", "Slovakian", "Slovenian", "Solomon Islander", "Somali", "South African", "South Korean", "South Sudanese", "Spanish", "Sri Lankan", "Sudanese", "Surinamer", "Swazi", "Swedish", "Swiss", "Syrian", "Tajikistani", "Tanzanian", "Thai", "Togolese", "Tongan", "Trinidadian Tobagonian", "Tunisian", "Turkish", "Turkmen", "Tuvaluan", "Ugandan", "Ukrainian", "Uruguayan", "Uzbekistani", "Venezuelan", "Vietnamese", "Welsh", "Yemeni", "Zambian", "Zimbabwean"], {"key": "nationality_list"}], "nationality_mix": ["FLOAT", {"default": 0, "step": 0.05, "min": 0, "max": 1.95, "display": "slider"}], "body_type": [["-", "Underweight", "Normal weight", "Overweight", "Obese"], {"key": "body_type_list"}], "body_type_weight": ["FLOAT", {"default": 0, "step": 0.05, "min": 0, "max": 1.95, "display": "slider"}], "model_pose": [["-", "Power Pose", "Walking Pose", "The Over-the-Shoulder Look", "S-curve Pose", "Sitting Pose", "Close-Up Beauty Shot Pose", "Leaning Pose", "Arms Up Pose", "Casual Stroll Pose", "Headshot Pose", "Sitting Cross-Legged Pose", "Back Arch Pose", "Hand-on-Hip Pose", "Gazing into the Distance Pose", "Candid Laugh Pose", "Dynamic Action Pose", "Contrapposto Pose", "High Fashion Pose"], {"key": "model_pose_list"}], "eyes_color": [["-", "Brown", "Blue", "Green", "Hazel", "Gray", "Amber", "Red", "Violet"], {"key": "eyes_color_list"}], "facial_expression": [["-", "Happy", "Sad", "Angry", "Surprised", "Fearful", "Disgusted", "Contemptuous", "Excited", "Nervous", "Confused", "Amused", "Content", "Disappointed", "Bored", "Relieved", "In love", "Shy", "Envious", "Proud", "Cautious", "Serious", "Serene", "Peaceful", "Calm"], {"key": "face_expression_list"}], "facial_expression_weight": ["FLOAT", {"default": 0, "step": 0.05, "min": 0, "max": 1.95, "display": "slider"}], "face_shape": [["-", "Oval", "Round", "Square", "Heart-shaped", "Long", "Rectangle", "Triangle", "Inverted Triangle", "Pear-shaped", "Oblong", "Square Round", "Square Oval"], {"key": "face_shape_list"}], "face_shape_weight": ["FLOAT", {"default": 0, "step": 0.05, "min": 0, "max": 1.95, "display": "slider"}], "facial_asymmetry": ["FLOAT", {"default": 0, "step": 0.05, "min": 0, "max": 1.95, "display": "slider"}], "hair_style": [["-", "Asymmetrical cut", "Blunt cut", "Bob cut", "Braided bob", "Buzz cut", "Choppy cut", "Curly bob", "Curtain bangs", "Faux hawk", "Feathered cut", "French bob", "Layered cut", "Long bob", "Mohawk", "Pixie cut", "Shag cut", "Side-swept bangs", "Textured cut", "Undercut", "Wavy bob", "Faux hawk short pixie", "Brave short haircut with shaved sides", "Tapered haricut wuth shaved side", "Stacked bob", "Lemonade braids", "Middle part ponytails", "Stitch braids", "Deep side part", "French braids", "Box braids", "Two dutch braids", "Wavy cut with curtains bangs", "Right side shaved", "Sweeping pixie", "Smooth lob", "Long pixie", "Sideswept pixie", "Italian bob", "Shullet"], {"key": "hair_style_list"}], "hair_color": [["-", "Black", "Brown", "Blonde", "Red", "Auburn", "Chestnut", "Gray", "White", "Salt and pepper"], {"key": "hair_color_list"}], "disheveled": ["FLOAT", {"default": 0, "step": 0.05, "min": 0, "max": 1.95, "display": "slider"}], "beard": [["-", "Stubble Beard", "Goatee", "Full Beard", "Van Dyke Beard", "Soul Patch", "Garibaldi Beard", "Mutton Chops", "Circle Beard", "Corporate Beard", "Balbo Beard", "Ducktail Beard", "Chinstrap Beard", "Anchor Beard", "Chevron Mustache", "Horseshoe Mustache", "Handlebar Mustache", "Imperial Mustache", "Pencil Mustache", "Friendly Mutton Chops", "Zappa Mustache"], {"key": "beard_list"}], "skin_details": ["FLOAT", {"default": 0, "step": 0.05, "min": 0, "max": 1.95, "display": "slider"}], "skin_pores": ["FLOAT", {"default": 0, "step": 0.05, "min": 0, "max": 1.95, "display": "slider"}], "dimples": ["FLOAT", {"default": 0, "step": 0.05, "min": 0, "max": 1.95, "display": "slider"}], "freckles": ["FLOAT", {"default": 0, "step": 0.05, "min": 0, "max": 1.95, "display": "slider"}], "moles": ["FLOAT", {"default": 0, "step": 0.05, "min": 0, "max": 1.95, "display": "slider"}], "skin_imperfections": ["FLOAT", {"default": 0, "step": 0.05, "min": 0, "max": 1.95, "display": "slider"}], "skin_acne": ["FLOAT", {"default": 0, "step": 0.05, "min": 0, "max": 1.95, "display": "slider"}], "tanned_skin": ["FLOAT", {"default": 0, "step": 0.05, "min": 0, "max": 1.95, "display": "slider"}], "eyes_details": ["FLOAT", {"default": 0, "step": 0.05, "min": 0, "max": 1.95, "display": "slider"}], "iris_details": ["FLOAT", {"default": 0, "step": 0.05, "min": 0, "max": 1.95, "display": "slider"}], "circular_iris": ["FLOAT", {"default": 0, "step": 0.05, "min": 0, "max": 1.95, "display": "slider"}], "circular_pupil": ["FLOAT", {"default": 0, "step": 0.05, "min": 0, "max": 1.95, "display": "slider"}], "light_type": [["-", "Natural sunlight", "Soft ambient light", "Harsh sunlight", "Overcast sky", "Sunset glow", "Sunrise warmth", "Twilight hues", "Candlelight", "Incandescent lighting", "Fluorescent lighting", "Moonlight", "Dappled sunlight", "Backlit silhouette", "Spotlight", "Rim lighting", "Firelight", "City streetlights", "Studio lighting", "Lantern light", "Tungsten lighting", "Cloudy day diffused light", "Skylight", "Golden hour light", "Blue hour light", "Flash photography", "Stage lighting", "Neon lights", "Torchlight", "Softbox lighting", "Rim light", "Lightning", "Abstract light patterns"], {"key": "light_type_list"}], "light_direction": [["-", "top", "bottom", "right", "left", "front", "rear", "top-right", "top-left", "bottom-right", "bottom-left"], {"key": "light_direction_list"}], "light_weight": ["FLOAT", {"default": 0, "step": 0.05, "min": 0, "max": 1.95, "display": "slider"}], "photorealism_improvement": [["enable", "disable"]], "prompt_start": ["STRING", {"multiline": true, "default": "raw photo, (realistic:1.5)"}], "prompt_additional": ["STRING", {"multiline": true, "default": ""}], "prompt_end": ["STRING", {"multiline": true, "default": ""}], "negative_prompt": ["STRING", {"multiline": true, "default": ""}]}}, "input_order": {"required": ["shot", "shot_weight", "gender", "age", "nationality_1", "nationality_2", "nationality_mix", "body_type", "body_type_weight", "model_pose", "eyes_color", "facial_expression", "facial_expression_weight", "face_shape", "face_shape_weight", "facial_asymmetry", "hair_style", "hair_color", "disheveled", "beard", "skin_details", "skin_pores", "dimples", "freckles", "moles", "skin_imperfections", "skin_acne", "tanned_skin", "eyes_details", "iris_details", "circular_iris", "circular_pupil", "light_type", "light_direction", "light_weight", "photorealism_improvement", "prompt_start", "prompt_additional", "prompt_end", "negative_prompt"]}, "output": ["STRING", "STRING"], "output_is_list": [false, false], "output_name": ["positive", "negative"], "name": "easy portraitMaster", "display_name": "Portrait Master", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Prompt", "output_node": false}, "easy fullLoader": {"input": {"required": {"ckpt_name": [["3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors", "None"]], "config_name": [["Default", "anything_v3.yaml", "v1-inference.yaml", "v1-inference_clip_skip_2.yaml", "v1-inference_clip_skip_2_fp16.yaml", "v1-inference_fp16.yaml", "v1-inpainting-inference.yaml", "v2-inference-v.yaml", "v2-inference-v_fp32.yaml", "v2-inference.yaml", "v2-inference_fp32.yaml", "v2-inpainting-inference.yaml"], {"default": "Default"}], "vae_name": [["Baked VAE", "4x_foolhardy_Remacri.pth", "ae.safetensors", "sdxl_vae.safetensors"]], "clip_skip": ["INT", {"default": -2, "min": -24, "max": 0, "step": 1}], "lora_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "lora_model_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_clip_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "resolution": [["width x height (custom)", "512 x 512", "512 x 768", "576 x 1024", "768 x 512", "768 x 768", "768 x 1024", "768 x 1280", "768 x 1344", "768 x 1536", "816 x 1920", "832 x 1152", "832 x 1216", "896 x 1152", "896 x 1088", "1024 x 1024", "1024 x 576", "1024 x 768", "1080 x 1920", "1440 x 2560", "1088 x 896", "1216 x 832", "1152 x 832", "1152 x 896", "1280 x 768", "1344 x 768", "1536 x 640", "1536 x 768", "1920 x 816", "1920 x 1080", "2560 x 1440"], {"default": "512 x 512"}], "empty_latent_width": ["INT", {"default": 512, "min": 64, "max": 16384, "step": 8}], "empty_latent_height": ["INT", {"default": 512, "min": 64, "max": 16384, "step": 8}], "positive": ["STRING", {"default": "", "placeholder": "Positive", "multiline": true}], "positive_token_normalization": [["none", "mean", "length", "length+mean"]], "positive_weight_interpretation": [["comfy", "A1111", "comfy++", "compel", "fixed attention"]], "negative": ["STRING", {"default": "", "placeholder": "Negative", "multiline": true}], "negative_token_normalization": [["none", "mean", "length", "length+mean"]], "negative_weight_interpretation": [["comfy", "A1111", "comfy++", "compel", "fixed attention"]], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096, "tooltip": "The number of latent images in the batch."}]}, "optional": {"model_override": ["MODEL"], "clip_override": ["CLIP"], "vae_override": ["VAE"], "optional_lora_stack": ["LORA_STACK"], "optional_controlnet_stack": ["CONTROL_NET_STACK"], "a1111_prompt_style": ["BOOLEAN", {"default": false}]}, "hidden": {"video_length": "INT", "prompt": "PROMPT", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["ckpt_name", "config_name", "vae_name", "clip_skip", "lora_name", "lora_model_strength", "lora_clip_strength", "resolution", "empty_latent_width", "empty_latent_height", "positive", "positive_token_normalization", "positive_weight_interpretation", "negative", "negative_token_normalization", "negative_weight_interpretation", "batch_size"], "optional": ["model_override", "clip_override", "vae_override", "optional_lora_stack", "optional_controlnet_stack", "a1111_prompt_style"], "hidden": ["video_length", "prompt", "my_unique_id"]}, "output": ["PIPE_LINE", "MODEL", "VAE", "CLIP", "CONDITIONING", "CONDITIONING", "LATENT"], "output_is_list": [false, false, false, false, false, false, false], "output_name": ["pipe", "model", "vae", "clip", "positive", "negative", "latent"], "name": "easy fullLoader", "display_name": "EasyLoader (Full)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Loaders", "output_node": false}, "easy a1111Loader": {"input": {"required": {"ckpt_name": [["3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"]], "vae_name": [["Baked VAE", "4x_foolhardy_Remacri.pth", "ae.safetensors", "sdxl_vae.safetensors"]], "clip_skip": ["INT", {"default": -2, "min": -24, "max": 0, "step": 1}], "lora_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "lora_model_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_clip_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "resolution": [["width x height (custom)", "512 x 512", "512 x 768", "576 x 1024", "768 x 512", "768 x 768", "768 x 1024", "768 x 1280", "768 x 1344", "768 x 1536", "816 x 1920", "832 x 1152", "832 x 1216", "896 x 1152", "896 x 1088", "1024 x 1024", "1024 x 576", "1024 x 768", "1080 x 1920", "1440 x 2560", "1088 x 896", "1216 x 832", "1152 x 832", "1152 x 896", "1280 x 768", "1344 x 768", "1536 x 640", "1536 x 768", "1920 x 816", "1920 x 1080", "2560 x 1440"], {"default": "512 x 512"}], "empty_latent_width": ["INT", {"default": 512, "min": 64, "max": 16384, "step": 8}], "empty_latent_height": ["INT", {"default": 512, "min": 64, "max": 16384, "step": 8}], "positive": ["STRING", {"default": "", "placeholder": "Positive", "multiline": true}], "negative": ["STRING", {"default": "", "placeholder": "Negative", "multiline": true}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096, "tooltip": "The number of latent images in the batch."}]}, "optional": {"optional_lora_stack": ["LORA_STACK"], "optional_controlnet_stack": ["CONTROL_NET_STACK"], "a1111_prompt_style": ["BOOLEAN", {"default": false}]}, "hidden": {"prompt": "PROMPT", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["ckpt_name", "vae_name", "clip_skip", "lora_name", "lora_model_strength", "lora_clip_strength", "resolution", "empty_latent_width", "empty_latent_height", "positive", "negative", "batch_size"], "optional": ["optional_lora_stack", "optional_controlnet_stack", "a1111_prompt_style"], "hidden": ["prompt", "my_unique_id"]}, "output": ["PIPE_LINE", "MODEL", "VAE"], "output_is_list": [false, false, false], "output_name": ["pipe", "model", "vae"], "name": "easy a1111Loader", "display_name": "EasyLoader (A1111)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Loaders", "output_node": false}, "easy comfyLoader": {"input": {"required": {"ckpt_name": [["3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"]], "vae_name": [["Baked VAE", "4x_foolhardy_Remacri.pth", "ae.safetensors", "sdxl_vae.safetensors"]], "clip_skip": ["INT", {"default": -2, "min": -24, "max": 0, "step": 1}], "lora_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "lora_model_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_clip_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "resolution": [["width x height (custom)", "512 x 512", "512 x 768", "576 x 1024", "768 x 512", "768 x 768", "768 x 1024", "768 x 1280", "768 x 1344", "768 x 1536", "816 x 1920", "832 x 1152", "832 x 1216", "896 x 1152", "896 x 1088", "1024 x 1024", "1024 x 576", "1024 x 768", "1080 x 1920", "1440 x 2560", "1088 x 896", "1216 x 832", "1152 x 832", "1152 x 896", "1280 x 768", "1344 x 768", "1536 x 640", "1536 x 768", "1920 x 816", "1920 x 1080", "2560 x 1440"], {"default": "512 x 512"}], "empty_latent_width": ["INT", {"default": 512, "min": 64, "max": 16384, "step": 8}], "empty_latent_height": ["INT", {"default": 512, "min": 64, "max": 16384, "step": 8}], "positive": ["STRING", {"default": "", "placeholder": "Positive", "multiline": true}], "negative": ["STRING", {"default": "", "placeholder": "Negative", "multiline": true}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096, "tooltip": "The number of latent images in the batch."}]}, "optional": {"optional_lora_stack": ["LORA_STACK"], "optional_controlnet_stack": ["CONTROL_NET_STACK"]}, "hidden": {"prompt": "PROMPT", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["ckpt_name", "vae_name", "clip_skip", "lora_name", "lora_model_strength", "lora_clip_strength", "resolution", "empty_latent_width", "empty_latent_height", "positive", "negative", "batch_size"], "optional": ["optional_lora_stack", "optional_controlnet_stack"], "hidden": ["prompt", "my_unique_id"]}, "output": ["PIPE_LINE", "MODEL", "VAE"], "output_is_list": [false, false, false], "output_name": ["pipe", "model", "vae"], "name": "easy comfyLoader", "display_name": "EasyLoader (Comfy)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Loaders", "output_node": false}, "easy svdLoader": {"input": {"required": {"ckpt_name": [[]], "vae_name": [["Baked VAE", "4x_foolhardy_Remacri.pth", "ae.safetensors", "sdxl_vae.safetensors"]], "clip_name": [["None", "clip_g.safetensors", "clip_g_hidream.safetensors", "clip_l.safetensors", "clip_l_hidream.safetensors", "llama_3.1_8b_instruct_fp8_scaled.safetensors", "t5_base.safetensors", "t5xxl_fp16.safetensors", "t5xxl_fp8_e4m3fn.safetensors", "t5xxl_fp8_e4m3fn_scaled.safetensors", "umt5_xxl_fp8_e4m3fn_scaled.safetensors"]], "init_image": ["IMAGE"], "resolution": [["width x height (custom)", "512 x 512", "512 x 768", "576 x 1024", "768 x 512", "768 x 768", "768 x 1024", "768 x 1280", "768 x 1344", "768 x 1536", "816 x 1920", "832 x 1152", "832 x 1216", "896 x 1152", "896 x 1088", "1024 x 1024", "1024 x 576", "1024 x 768", "1080 x 1920", "1440 x 2560", "1088 x 896", "1216 x 832", "1152 x 832", "1152 x 896", "1280 x 768", "1344 x 768", "1536 x 640", "1536 x 768", "1920 x 816", "1920 x 1080", "2560 x 1440"], {"default": "1024 x 576"}], "empty_latent_width": ["INT", {"default": 256, "min": 16, "max": 16384, "step": 8}], "empty_latent_height": ["INT", {"default": 256, "min": 16, "max": 16384, "step": 8}], "video_frames": ["INT", {"default": 14, "min": 1, "max": 4096}], "motion_bucket_id": ["INT", {"default": 127, "min": 1, "max": 1023}], "fps": ["INT", {"default": 6, "min": 1, "max": 1024}], "augmentation_level": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 10.0, "step": 0.01}]}, "optional": {"optional_positive": ["STRING", {"default": "", "multiline": true}], "optional_negative": ["STRING", {"default": "", "multiline": true}]}, "hidden": {"prompt": "PROMPT", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["ckpt_name", "vae_name", "clip_name", "init_image", "resolution", "empty_latent_width", "empty_latent_height", "video_frames", "motion_bucket_id", "fps", "augmentation_level"], "optional": ["optional_positive", "optional_negative"], "hidden": ["prompt", "my_unique_id"]}, "output": ["PIPE_LINE", "MODEL", "VAE"], "output_is_list": [false, false, false], "output_name": ["pipe", "model", "vae"], "name": "easy svdLoader", "display_name": "EasyLoader (SVD)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Loaders", "output_node": false}, "easy sv3dLoader": {"input": {"required": {"ckpt_name": [[]], "vae_name": [["Baked VAE", "4x_foolhardy_Remacri.pth", "ae.safetensors", "sdxl_vae.safetensors"]], "init_image": ["IMAGE"], "empty_latent_width": ["INT", {"default": 576, "min": 16, "max": 16384, "step": 8}], "empty_latent_height": ["INT", {"default": 576, "min": 16, "max": 16384, "step": 8}], "batch_size": ["INT", {"default": 21, "min": 1, "max": 4096}], "interp_easing": [["linear", "ease_in", "ease_out", "ease_in_out"], {"default": "linear"}], "easing_mode": [["azimuth", "elevation", "custom"], {"default": "azimuth"}]}, "optional": {"scheduler": ["STRING", {"default": "", "multiline": true}]}, "hidden": {"prompt": "PROMPT", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["ckpt_name", "vae_name", "init_image", "empty_latent_width", "empty_latent_height", "batch_size", "interp_easing", "easing_mode"], "optional": ["scheduler"], "hidden": ["prompt", "my_unique_id"]}, "output": ["PIPE_LINE", "MODEL", "STRING"], "output_is_list": [false, false, false], "output_name": ["pipe", "model", "interp_log"], "name": "easy sv3dLoader", "display_name": "EasyLoader (SV3D)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Loaders", "output_node": false}, "easy zero123Loader": {"input": {"required": {"ckpt_name": [[]], "vae_name": [["Baked VAE", "4x_foolhardy_Remacri.pth", "ae.safetensors", "sdxl_vae.safetensors"]], "init_image": ["IMAGE"], "empty_latent_width": ["INT", {"default": 256, "min": 16, "max": 16384, "step": 8}], "empty_latent_height": ["INT", {"default": 256, "min": 16, "max": 16384, "step": 8}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 64}], "elevation": ["FLOAT", {"default": 0.0, "min": -180.0, "max": 180.0}], "azimuth": ["FLOAT", {"default": 0.0, "min": -180.0, "max": 180.0}]}, "hidden": {"prompt": "PROMPT", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["ckpt_name", "vae_name", "init_image", "empty_latent_width", "empty_latent_height", "batch_size", "elevation", "azimuth"], "hidden": ["prompt", "my_unique_id"]}, "output": ["PIPE_LINE", "MODEL", "VAE"], "output_is_list": [false, false, false], "output_name": ["pipe", "model", "vae"], "name": "easy zero123Loader", "display_name": "EasyLoader (Zero123)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Loaders", "output_node": false}, "easy cascadeLoader": {"input": {"required": {"stage_c": [["flux1-krea-dev_fp8_scaled.safetensors", "flux1-schnell.safetensors", "hidream_i1_dev_fp8.safetensors", "hidream_i1_fast_fp8.safetensors", "3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"]], "stage_b": [["flux1-krea-dev_fp8_scaled.safetensors", "flux1-schnell.safetensors", "hidream_i1_dev_fp8.safetensors", "hidream_i1_fast_fp8.safetensors", "3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"]], "stage_a": [["Baked VAE", "4x_foolhardy_Remacri.pth", "ae.safetensors", "sdxl_vae.safetensors"]], "clip_name": [["None", "clip_g.safetensors", "clip_g_hidream.safetensors", "clip_l.safetensors", "clip_l_hidream.safetensors", "llama_3.1_8b_instruct_fp8_scaled.safetensors", "t5_base.safetensors", "t5xxl_fp16.safetensors", "t5xxl_fp8_e4m3fn.safetensors", "t5xxl_fp8_e4m3fn_scaled.safetensors", "umt5_xxl_fp8_e4m3fn_scaled.safetensors"]], "lora_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "lora_model_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_clip_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "resolution": [["width x height (custom)", "512 x 512", "512 x 768", "576 x 1024", "768 x 512", "768 x 768", "768 x 1024", "768 x 1280", "768 x 1344", "768 x 1536", "816 x 1920", "832 x 1152", "832 x 1216", "896 x 1152", "896 x 1088", "1024 x 1024", "1024 x 576", "1024 x 768", "1080 x 1920", "1440 x 2560", "1088 x 896", "1216 x 832", "1152 x 832", "1152 x 896", "1280 x 768", "1344 x 768", "1536 x 640", "1536 x 768", "1920 x 816", "1920 x 1080", "2560 x 1440"], {"default": "1024 x 1024"}], "empty_latent_width": ["INT", {"default": 1024, "min": 16, "max": 16384, "step": 8}], "empty_latent_height": ["INT", {"default": 1024, "min": 16, "max": 16384, "step": 8}], "compression": ["INT", {"default": 42, "min": 32, "max": 64, "step": 1}], "positive": ["STRING", {"default": "", "placeholder": "Positive", "multiline": true}], "negative": ["STRING", {"default": "", "placeholder": "Negative", "multiline": true}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 64}]}, "optional": {"optional_lora_stack": ["LORA_STACK"]}, "hidden": {"prompt": "PROMPT", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["stage_c", "stage_b", "stage_a", "clip_name", "lora_name", "lora_model_strength", "lora_clip_strength", "resolution", "empty_latent_width", "empty_latent_height", "compression", "positive", "negative", "batch_size"], "optional": ["optional_lora_stack"], "hidden": ["prompt", "my_unique_id"]}, "output": ["PIPE_LINE", "MODEL", "LATENT", "VAE"], "output_is_list": [false, false, false, false], "output_name": ["pipe", "model_c", "latent_c", "vae"], "name": "easy cascadeLoader", "display_name": "EasyCascadeLoader", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Loaders", "output_node": false}, "easy kolorsLoader": {"input": {"required": {"unet_name": [["flux1-krea-dev_fp8_scaled.safetensors", "flux1-schnell.safetensors", "hidream_i1_dev_fp8.safetensors", "hidream_i1_fast_fp8.safetensors"]], "vae_name": [["4x_foolhardy_Remacri.pth", "ae.safetensors", "sdxl_vae.safetensors"]], "chatglm3_name": [[]], "lora_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "lora_model_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_clip_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "resolution": [["width x height (custom)", "512 x 512", "512 x 768", "576 x 1024", "768 x 512", "768 x 768", "768 x 1024", "768 x 1280", "768 x 1344", "768 x 1536", "816 x 1920", "832 x 1152", "832 x 1216", "896 x 1152", "896 x 1088", "1024 x 1024", "1024 x 576", "1024 x 768", "1080 x 1920", "1440 x 2560", "1088 x 896", "1216 x 832", "1152 x 832", "1152 x 896", "1280 x 768", "1344 x 768", "1536 x 640", "1536 x 768", "1920 x 816", "1920 x 1080", "2560 x 1440"], {"default": "1024 x 576"}], "empty_latent_width": ["INT", {"default": 1024, "min": 64, "max": 16384, "step": 8}], "empty_latent_height": ["INT", {"default": 1024, "min": 64, "max": 16384, "step": 8}], "positive": ["STRING", {"default": "", "placeholder": "Positive", "multiline": true}], "negative": ["STRING", {"default": "", "placeholder": "Negative", "multiline": true}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 64}]}, "optional": {"model_override": ["MODEL"], "vae_override": ["VAE"], "optional_lora_stack": ["LORA_STACK"], "auto_clean_gpu": ["BOOLEAN", {"default": false}]}, "hidden": {"prompt": "PROMPT", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["unet_name", "vae_name", "chatglm3_name", "lora_name", "lora_model_strength", "lora_clip_strength", "resolution", "empty_latent_width", "empty_latent_height", "positive", "negative", "batch_size"], "optional": ["model_override", "vae_override", "optional_lora_stack", "auto_clean_gpu"], "hidden": ["prompt", "my_unique_id"]}, "output": ["PIPE_LINE", "MODEL", "VAE"], "output_is_list": [false, false, false], "output_name": ["pipe", "model", "vae"], "name": "easy kolorsLoader", "display_name": "EasyLoader (Kolors)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Loaders", "output_node": false}, "easy fluxLoader": {"input": {"required": {"ckpt_name": [["3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors", "None"]], "vae_name": [["Baked VAE", "4x_foolhardy_Remacri.pth", "ae.safetensors", "sdxl_vae.safetensors"]], "lora_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "lora_model_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_clip_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "resolution": [["width x height (custom)", "512 x 512", "512 x 768", "576 x 1024", "768 x 512", "768 x 768", "768 x 1024", "768 x 1280", "768 x 1344", "768 x 1536", "816 x 1920", "832 x 1152", "832 x 1216", "896 x 1152", "896 x 1088", "1024 x 1024", "1024 x 576", "1024 x 768", "1080 x 1920", "1440 x 2560", "1088 x 896", "1216 x 832", "1152 x 832", "1152 x 896", "1280 x 768", "1344 x 768", "1536 x 640", "1536 x 768", "1920 x 816", "1920 x 1080", "2560 x 1440"], {"default": "1024 x 1024"}], "empty_latent_width": ["INT", {"default": 1024, "min": 64, "max": 16384, "step": 8}], "empty_latent_height": ["INT", {"default": 1024, "min": 64, "max": 16384, "step": 8}], "positive": ["STRING", {"default": "", "placeholder": "Positive", "multiline": true}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 64}]}, "optional": {"model_override": ["MODEL"], "clip_override": ["CLIP"], "vae_override": ["VAE"], "optional_lora_stack": ["LORA_STACK"], "optional_controlnet_stack": ["CONTROL_NET_STACK"]}, "hidden": {"prompt": "PROMPT", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["ckpt_name", "vae_name", "lora_name", "lora_model_strength", "lora_clip_strength", "resolution", "empty_latent_width", "empty_latent_height", "positive", "batch_size"], "optional": ["model_override", "clip_override", "vae_override", "optional_lora_stack", "optional_controlnet_stack"], "hidden": ["prompt", "my_unique_id"]}, "output": ["PIPE_LINE", "MODEL", "VAE"], "output_is_list": [false, false, false], "output_name": ["pipe", "model", "vae"], "name": "easy fluxLoader", "display_name": "EasyLoader (Flux)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Loaders", "output_node": false}, "easy hunyuanDiTLoader": {"input": {"required": {"ckpt_name": [["3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"]], "vae_name": [["Baked VAE", "4x_foolhardy_Remacri.pth", "ae.safetensors", "sdxl_vae.safetensors"]], "lora_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "lora_model_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_clip_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "resolution": [["width x height (custom)", "512 x 512", "512 x 768", "576 x 1024", "768 x 512", "768 x 768", "768 x 1024", "768 x 1280", "768 x 1344", "768 x 1536", "816 x 1920", "832 x 1152", "832 x 1216", "896 x 1152", "896 x 1088", "1024 x 1024", "1024 x 576", "1024 x 768", "1080 x 1920", "1440 x 2560", "1088 x 896", "1216 x 832", "1152 x 832", "1152 x 896", "1280 x 768", "1344 x 768", "1536 x 640", "1536 x 768", "1920 x 816", "1920 x 1080", "2560 x 1440"], {"default": "1024 x 1024"}], "empty_latent_width": ["INT", {"default": 1024, "min": 64, "max": 16384, "step": 8}], "empty_latent_height": ["INT", {"default": 1024, "min": 64, "max": 16384, "step": 8}], "positive": ["STRING", {"default": "", "placeholder": "Positive", "multiline": true}], "negative": ["STRING", {"default": "", "placeholder": "Negative", "multiline": true}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 64}]}, "optional": {"optional_lora_stack": ["LORA_STACK"], "optional_controlnet_stack": ["CONTROL_NET_STACK"]}, "hidden": {"prompt": "PROMPT", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["ckpt_name", "vae_name", "lora_name", "lora_model_strength", "lora_clip_strength", "resolution", "empty_latent_width", "empty_latent_height", "positive", "negative", "batch_size"], "optional": ["optional_lora_stack", "optional_controlnet_stack"], "hidden": ["prompt", "my_unique_id"]}, "output": ["PIPE_LINE", "MODEL", "VAE"], "output_is_list": [false, false, false], "output_name": ["pipe", "model", "vae"], "name": "easy hunyuanDiTLoader", "display_name": "EasyLoader (HunyuanDiT)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Loaders", "output_node": false}, "easy pixArtLoader": {"input": {"required": {"ckpt_name": [["3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"]], "model_name": [["PixArtMS_XL_2", "PixArtMS_Sigma_XL_2", "PixArtMS_Sigma_XL_2_900M", "PixArtMS_Sigma_XL_2_2K", "PixArt_XL_2", "ControlPixArtHalf", "ControlPixArtMSHalf"]], "vae_name": [["4x_foolhardy_Remacri.pth", "ae.safetensors", "sdxl_vae.safetensors"]], "t5_type": [["sd3"]], "clip_name": [["clip_g.safetensors", "clip_g_hidream.safetensors", "clip_l.safetensors", "clip_l_hidream.safetensors", "llama_3.1_8b_instruct_fp8_scaled.safetensors", "t5_base.safetensors", "t5xxl_fp16.safetensors", "t5xxl_fp8_e4m3fn.safetensors", "t5xxl_fp8_e4m3fn_scaled.safetensors", "umt5_xxl_fp8_e4m3fn_scaled.safetensors"]], "padding": ["INT", {"default": 1, "min": 1, "max": 300}], "t5_name": [[]], "device": [["auto", "cpu", "gpu"], {"default": "cpu"}], "dtype": [["default", "auto (comfy)", "FP32", "FP16", "BF16"]], "lora_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "lora_model_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "ratio": [["custom", "0.25", "0.26", "0.27", "0.28", "0.32", "0.33", "0.35", "0.40", "0.42", "0.48", "0.50", "0.52", "0.57", "0.60", "0.68", "0.72", "0.78", "0.82", "0.88", "0.94", "1.00", "1.07", "1.13", "1.21", "1.29", "1.38", "1.46", "1.67", "1.75", "2.00", "2.09", "2.40", "2.50", "2.89", "3.00", "3.11", "3.62", "3.75", "3.88", "4.00"], {"default": "1.00"}], "empty_latent_width": ["INT", {"default": 1024, "min": 64, "max": 16384, "step": 8}], "empty_latent_height": ["INT", {"default": 1024, "min": 64, "max": 16384, "step": 8}], "positive": ["STRING", {"default": "", "placeholder": "Positive", "multiline": true}], "negative": ["STRING", {"default": "", "placeholder": "Negative", "multiline": true}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 64}]}, "optional": {"optional_lora_stack": ["LORA_STACK"]}, "hidden": {"prompt": "PROMPT", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["ckpt_name", "model_name", "vae_name", "t5_type", "clip_name", "padding", "t5_name", "device", "dtype", "lora_name", "lora_model_strength", "ratio", "empty_latent_width", "empty_latent_height", "positive", "negative", "batch_size"], "optional": ["optional_lora_stack"], "hidden": ["prompt", "my_unique_id"]}, "output": ["PIPE_LINE", "MODEL", "VAE"], "output_is_list": [false, false, false], "output_name": ["pipe", "model", "vae"], "name": "easy pixArtLoader", "display_name": "EasyLoader (PixArt)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Loaders", "output_node": false}, "easy mochiLoader": {"input": {"required": {"ckpt_name": [["3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"]], "vae_name": [["Baked VAE", "4x_foolhardy_Remacri.pth", "ae.safetensors", "sdxl_vae.safetensors"], {"default": "mochi_vae.safetensors"}], "positive": ["STRING", {"default": "", "placeholder": "Positive", "multiline": true}], "negative": ["STRING", {"default": "", "placeholder": "Negative", "multiline": true}], "resolution": [["width x height (custom)", "512 x 512", "512 x 768", "576 x 1024", "768 x 512", "768 x 768", "768 x 1024", "768 x 1280", "768 x 1344", "768 x 1536", "816 x 1920", "832 x 1152", "832 x 1216", "896 x 1152", "896 x 1088", "1024 x 1024", "1024 x 576", "1024 x 768", "1080 x 1920", "1440 x 2560", "1088 x 896", "1216 x 832", "1152 x 832", "1152 x 896", "1280 x 768", "1344 x 768", "1536 x 640", "1536 x 768", "1920 x 816", "1920 x 1080", "2560 x 1440"], {"default": "width x height (custom)"}], "empty_latent_width": ["INT", {"default": 848, "min": 64, "max": 16384, "step": 8}], "empty_latent_height": ["INT", {"default": 480, "min": 64, "max": 16384, "step": 8}], "length": ["INT", {"default": 25, "min": 7, "max": 16384, "step": 6}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 4096, "tooltip": "The number of latent images in the batch."}]}, "optional": {"model_override": ["MODEL"], "clip_override": ["CLIP"], "vae_override": ["VAE"]}, "hidden": {"prompt": "PROMPT", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["ckpt_name", "vae_name", "positive", "negative", "resolution", "empty_latent_width", "empty_latent_height", "length", "batch_size"], "optional": ["model_override", "clip_override", "vae_override"], "hidden": ["prompt", "my_unique_id"]}, "output": ["PIPE_LINE", "MODEL", "VAE"], "output_is_list": [false, false, false], "output_name": ["pipe", "model", "vae"], "name": "easy mochiLoader", "display_name": "EasyLoader (Mochi)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Loaders", "output_node": false}, "easy loraSwitcher": {"input": {"required": {"toggle": ["BOOLEAN", {"label_on": "on", "label_off": "off"}], "select": ["INT", {"default": 1, "min": 1, "max": 50}], "num_loras": ["INT", {"default": 1, "min": 1, "max": 50}], "lora_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}]}, "optional": {"optional_lora_stack": ["LORA_STACK"], "lora_1_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_2_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_3_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_4_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_5_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_6_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_7_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_8_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_9_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_10_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_11_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_12_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_13_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_14_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_15_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_16_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_17_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_18_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_19_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_20_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_21_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_22_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_23_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_24_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_25_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_26_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_27_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_28_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_29_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_30_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_31_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_32_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_33_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_34_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_35_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_36_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_37_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_38_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_39_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_40_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_41_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_42_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_43_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_44_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_45_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_46_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_47_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_48_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_49_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_50_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}]}}, "input_order": {"required": ["toggle", "select", "num_loras", "lora_strength"], "optional": ["optional_lora_stack", "lora_1_name", "lora_2_name", "lora_3_name", "lora_4_name", "lora_5_name", "lora_6_name", "lora_7_name", "lora_8_name", "lora_9_name", "lora_10_name", "lora_11_name", "lora_12_name", "lora_13_name", "lora_14_name", "lora_15_name", "lora_16_name", "lora_17_name", "lora_18_name", "lora_19_name", "lora_20_name", "lora_21_name", "lora_22_name", "lora_23_name", "lora_24_name", "lora_25_name", "lora_26_name", "lora_27_name", "lora_28_name", "lora_29_name", "lora_30_name", "lora_31_name", "lora_32_name", "lora_33_name", "lora_34_name", "lora_35_name", "lora_36_name", "lora_37_name", "lora_38_name", "lora_39_name", "lora_40_name", "lora_41_name", "lora_42_name", "lora_43_name", "lora_44_name", "lora_45_name", "lora_46_name", "lora_47_name", "lora_48_name", "lora_49_name", "lora_50_name"]}, "output": ["LORA_STACK", "*"], "output_is_list": [false, false], "output_name": ["lora_stack", "lora_name"], "name": "easy loraSwitcher", "display_name": "EasyLoraSwitcher", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Loaders", "output_node": false}, "easy loraStack": {"input": {"required": {"toggle": ["BOOLEAN", {"label_on": "on", "label_off": "off"}], "mode": [["simple", "advanced"]], "num_loras": ["INT", {"default": 1, "min": 1, "max": 10}]}, "optional": {"optional_lora_stack": ["LORA_STACK"], "lora_1_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_1_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_1_model_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_1_clip_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_2_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_2_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_2_model_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_2_clip_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_3_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_3_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_3_model_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_3_clip_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_4_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_4_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_4_model_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_4_clip_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_5_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_5_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_5_model_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_5_clip_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_6_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_6_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_6_model_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_6_clip_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_7_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_7_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_7_model_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_7_clip_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_8_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_8_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_8_model_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_8_clip_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_9_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_9_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_9_model_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_9_clip_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_10_name": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], {"default": "None"}], "lora_10_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_10_model_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_10_clip_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}]}}, "input_order": {"required": ["toggle", "mode", "num_loras"], "optional": ["optional_lora_stack", "lora_1_name", "lora_1_strength", "lora_1_model_strength", "lora_1_clip_strength", "lora_2_name", "lora_2_strength", "lora_2_model_strength", "lora_2_clip_strength", "lora_3_name", "lora_3_strength", "lora_3_model_strength", "lora_3_clip_strength", "lora_4_name", "lora_4_strength", "lora_4_model_strength", "lora_4_clip_strength", "lora_5_name", "lora_5_strength", "lora_5_model_strength", "lora_5_clip_strength", "lora_6_name", "lora_6_strength", "lora_6_model_strength", "lora_6_clip_strength", "lora_7_name", "lora_7_strength", "lora_7_model_strength", "lora_7_clip_strength", "lora_8_name", "lora_8_strength", "lora_8_model_strength", "lora_8_clip_strength", "lora_9_name", "lora_9_strength", "lora_9_model_strength", "lora_9_clip_strength", "lora_10_name", "lora_10_strength", "lora_10_model_strength", "lora_10_clip_strength"]}, "output": ["LORA_STACK"], "output_is_list": [false], "output_name": ["lora_stack"], "name": "easy loraStack", "display_name": "EasyLoraStack", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Loaders", "output_node": false}, "easy controlnetStack": {"input": {"required": {"toggle": ["BOOLEAN", {"label_on": "enabled", "label_off": "disabled"}], "mode": [["simple", "advanced"]], "num_controlnet": ["INT", {"default": 1, "min": 1, "max": 3}]}, "optional": {"optional_controlnet_stack": ["CONTROL_NET_STACK"], "controlnet_1": [["None", "control_v11p_sd15_scribble_fp16.safetensors", "ttplanetSDXLControlnet_v20Fp16.safetensors"], {"default": "None"}], "controlnet_1_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "start_percent_1": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.001}], "end_percent_1": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}], "scale_soft_weight_1": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}], "image_1": ["IMAGE"], "controlnet_2": [["None", "control_v11p_sd15_scribble_fp16.safetensors", "ttplanetSDXLControlnet_v20Fp16.safetensors"], {"default": "None"}], "controlnet_2_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "start_percent_2": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.001}], "end_percent_2": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}], "scale_soft_weight_2": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}], "image_2": ["IMAGE"], "controlnet_3": [["None", "control_v11p_sd15_scribble_fp16.safetensors", "ttplanetSDXLControlnet_v20Fp16.safetensors"], {"default": "None"}], "controlnet_3_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "start_percent_3": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.001}], "end_percent_3": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}], "scale_soft_weight_3": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}], "image_3": ["IMAGE"]}}, "input_order": {"required": ["toggle", "mode", "num_controlnet"], "optional": ["optional_controlnet_stack", "controlnet_1", "controlnet_1_strength", "start_percent_1", "end_percent_1", "scale_soft_weight_1", "image_1", "controlnet_2", "controlnet_2_strength", "start_percent_2", "end_percent_2", "scale_soft_weight_2", "image_2", "controlnet_3", "controlnet_3_strength", "start_percent_3", "end_percent_3", "scale_soft_weight_3", "image_3"]}, "output": ["CONTROL_NET_STACK"], "output_is_list": [false], "output_name": ["controlnet_stack"], "name": "easy controlnetStack", "display_name": "EasyControlnetStack", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Loaders", "output_node": false}, "easy controlnetLoader": {"input": {"required": {"pipe": ["PIPE_LINE"], "image": ["IMAGE"], "control_net_name": [["control_v11p_sd15_scribble_fp16.safetensors", "ttplanetSDXLControlnet_v20Fp16.safetensors"]]}, "optional": {"control_net": ["CONTROL_NET"], "strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}], "scale_soft_weights": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}]}}, "input_order": {"required": ["pipe", "image", "control_net_name"], "optional": ["control_net", "strength", "scale_soft_weights"]}, "output": ["PIPE_LINE", "CONDITIONING", "CONDITIONING"], "output_is_list": [false, false, false], "output_name": ["pipe", "positive", "negative"], "name": "easy controlnetLoader", "display_name": "EasyControlnet", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Loaders", "output_node": false}, "easy controlnetLoaderADV": {"input": {"required": {"pipe": ["PIPE_LINE"], "image": ["IMAGE"], "control_net_name": [["control_v11p_sd15_scribble_fp16.safetensors", "ttplanetSDXLControlnet_v20Fp16.safetensors"]]}, "optional": {"control_net": ["CONTROL_NET"], "strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}], "start_percent": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.001}], "end_percent": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}], "scale_soft_weights": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}]}}, "input_order": {"required": ["pipe", "image", "control_net_name"], "optional": ["control_net", "strength", "start_percent", "end_percent", "scale_soft_weights"]}, "output": ["PIPE_LINE", "CONDITIONING", "CONDITIONING"], "output_is_list": [false, false, false], "output_name": ["pipe", "positive", "negative"], "name": "easy controlnetLoaderADV", "display_name": "EasyControlnet (Advanced)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Loaders", "output_node": false}, "easy controlnetLoader++": {"input": {"required": {"pipe": ["PIPE_LINE"], "image": ["IMAGE"], "control_net_name": [["control_v11p_sd15_scribble_fp16.safetensors", "ttplanetSDXLControlnet_v20Fp16.safetensors"]]}, "optional": {"control_net": ["CONTROL_NET"], "strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}], "start_percent": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.001}], "end_percent": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}], "scale_soft_weights": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}], "union_type": [["auto", "openpose", "depth", "hed/pidi/scribble/ted", "canny/lineart/anime_lineart/mlsd", "normal", "segment", "tile", "repaint"]]}}, "input_order": {"required": ["pipe", "image", "control_net_name"], "optional": ["control_net", "strength", "start_percent", "end_percent", "scale_soft_weights", "union_type"]}, "output": ["PIPE_LINE", "CONDITIONING", "CONDITIONING"], "output_is_list": [false, false, false], "output_name": ["pipe", "positive", "negative"], "name": "easy controlnetLoader++", "display_name": "EasyControlnet++", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Loaders", "output_node": false}, "easy LLLiteLoader": {"input": {"required": {"model": ["MODEL"], "model_name": [[]], "cond_image": ["IMAGE"], "strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}], "steps": ["INT", {"default": 0, "min": 0, "max": 200, "step": 1}], "start_percent": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 100.0, "step": 0.1}], "end_percent": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 100.0, "step": 0.1}]}}, "input_order": {"required": ["model", "model_name", "cond_image", "strength", "steps", "start_percent", "end_percent"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "easy LLLiteLoader", "display_name": "EasyLLLite", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Loaders", "output_node": false}, "easy loraPromptApply": {"input": {"required": {"model": ["MODEL"], "clip": ["CLIP"], "positive": ["STRING", {"default": "", "forceInput": true}]}, "optional": {"negative": ["STRING", {"default": "", "forceInput": true}]}}, "input_order": {"required": ["model", "clip", "positive"], "optional": ["negative"]}, "output": ["MODEL", "CLIP", "STRING", "STRING"], "output_is_list": [false, false, false, false], "output_name": ["model", "clip", "positive", "negative"], "name": "easy loraPromptApply", "display_name": "Easy Apply LoraPrompt", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Adapter", "output_node": false}, "easy loraStackApply": {"input": {"required": {"lora_stack": ["LORA_STACK"], "model": ["MODEL"]}, "optional": {"optional_clip": ["CLIP"]}}, "input_order": {"required": ["lora_stack", "model"], "optional": ["optional_clip"]}, "output": ["MODEL", "CLIP"], "output_is_list": [false, false], "output_name": ["model", "clip"], "name": "easy loraStackApply", "display_name": "Easy Apply LoraStack", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Adapter", "output_node": false}, "easy controlnetStackApply": {"input": {"required": {"controlnet_stack": ["CONTROL_NET_STACK"], "pipe": ["PIPE_LINE"]}, "optional": {}}, "input_order": {"required": ["controlnet_stack", "pipe"], "optional": []}, "output": ["PIPE_LINE"], "output_is_list": [false], "output_name": ["pipe"], "name": "easy controlnetStackApply", "display_name": "Easy Apply CnetStack", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Adapter", "output_node": false}, "easy ipadapterApply": {"input": {"required": {"model": ["MODEL"], "image": ["IMAGE"], "preset": [["LIGHT - SD1.5 only (low strength)", "STANDARD (medium strength)", "VIT-G (medium strength)", "PLUS (high strength)", "PLUS (kolors genernal)", "REGULAR - FLUX and SD3.5 only (high strength)", "PLUS FACE (portraits)", "FULL FACE - SD1.5 only (portraits stronger)", "COMPOSITION", "FACEID", "FACEID PLUS - SD1.5 only", "FACEID PLUS KOLORS", "FACEID PLUS V2", "FACEID PORTRAIT (style transfer)", "FACEID PORTRAIT UNNORM - SDXL only (strong)"]], "lora_strength": ["FLOAT", {"default": 0.6, "min": 0, "max": 1, "step": 0.01}], "provider": [["CPU", "CUDA", "ROCM", "DirectML", "OpenVINO", "CoreML"], {"default": "CUDA"}], "weight": ["FLOAT", {"default": 1.0, "min": -1, "max": 3, "step": 0.05}], "weight_faceidv2": ["FLOAT", {"default": 1.0, "min": -1, "max": 5.0, "step": 0.05}], "start_at": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.001}], "end_at": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}], "cache_mode": [["insightface only", "clip_vision only", "ipadapter only", "all", "none"], {"default": "all"}], "use_tiled": ["BOOLEAN", {"default": false}]}, "optional": {"attn_mask": ["MASK"], "optional_ipadapter": ["IPADAPTER"]}}, "input_order": {"required": ["model", "image", "preset", "lora_strength", "provider", "weight", "weight_faceidv2", "start_at", "end_at", "cache_mode", "use_tiled"], "optional": ["attn_mask", "optional_ipadapter"]}, "output": ["MODEL", "IMAGE", "MASK", "IPADAPTER"], "output_is_list": [false, false, false, false], "output_name": ["model", "images", "masks", "ipadapter"], "name": "easy ipadapterApply", "display_name": "Easy Apply IPAdapter", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Adapter", "output_node": false}, "easy ipadapterApplyADV": {"input": {"required": {"model": ["MODEL"], "image": ["IMAGE"], "preset": [["LIGHT - SD1.5 only (low strength)", "STANDARD (medium strength)", "VIT-G (medium strength)", "PLUS (high strength)", "PLUS (kolors genernal)", "REGULAR - FLUX and SD3.5 only (high strength)", "PLUS FACE (portraits)", "FULL FACE - SD1.5 only (portraits stronger)", "COMPOSITION", "FACEID", "FACEID PLUS - SD1.5 only", "FACEID PLUS KOLORS", "FACEID PLUS V2", "FACEID PORTRAIT (style transfer)", "FACEID PORTRAIT UNNORM - SDXL only (strong)"]], "lora_strength": ["FLOAT", {"default": 0.6, "min": 0, "max": 1, "step": 0.01}], "provider": [["CPU", "CUDA", "ROCM", "DirectML", "OpenVINO", "CoreML"], {"default": "CUDA"}], "weight": ["FLOAT", {"default": 1.0, "min": -1, "max": 3, "step": 0.05}], "weight_faceidv2": ["FLOAT", {"default": 1.0, "min": -1, "max": 5.0, "step": 0.05}], "weight_type": [["linear", "ease in", "ease out", "ease in-out", "reverse in-out", "weak input", "weak output", "weak middle", "strong middle", "style transfer", "composition", "strong style transfer", "style and composition", "style transfer precise"]], "combine_embeds": [["concat", "add", "subtract", "average", "norm average"]], "start_at": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.001}], "end_at": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}], "embeds_scaling": [["V only", "K+V", "K+V w/ C penalty", "K+mean(V) w/ C penalty"]], "cache_mode": [["insightface only", "clip_vision only", "ipadapter only", "all", "none"], {"default": "all"}], "use_tiled": ["BOOLEAN", {"default": false}], "use_batch": ["BOOLEAN", {"default": false}], "sharpening": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.05}]}, "optional": {"image_negative": ["IMAGE"], "attn_mask": ["MASK"], "clip_vision": ["CLIP_VISION"], "optional_ipadapter": ["IPADAPTER"], "layer_weights": ["STRING", {"default": "", "multiline": true, "placeholder": "Mad Scientist Layer Weights"}]}}, "input_order": {"required": ["model", "image", "preset", "lora_strength", "provider", "weight", "weight_faceidv2", "weight_type", "combine_embeds", "start_at", "end_at", "embeds_scaling", "cache_mode", "use_tiled", "use_batch", "sharpening"], "optional": ["image_negative", "attn_mask", "clip_vision", "optional_ipadapter", "layer_weights"]}, "output": ["MODEL", "IMAGE", "MASK", "IPADAPTER"], "output_is_list": [false, false, false, false], "output_name": ["model", "images", "masks", "ipadapter"], "name": "easy ipadapterApplyADV", "display_name": "Easy Apply IPAdapter (Advanced)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Adapter", "output_node": false}, "easy ipadapterApplyFaceIDKolors": {"input": {"required": {"model": ["MODEL"], "image": ["IMAGE"], "preset": [["FACEID PLUS KOLORS"], {"default": "FACEID PLUS KOLORS"}], "lora_strength": ["FLOAT", {"default": 0.6, "min": 0, "max": 1, "step": 0.01}], "provider": [["CPU", "CUDA", "ROCM", "DirectML", "OpenVINO", "CoreML"], {"default": "CUDA"}], "weight": ["FLOAT", {"default": 0.8, "min": -1, "max": 3, "step": 0.05}], "weight_faceidv2": ["FLOAT", {"default": 1.0, "min": -1, "max": 5.0, "step": 0.05}], "weight_kolors": ["FLOAT", {"default": 0.8, "min": -1, "max": 5.0, "step": 0.05}], "weight_type": [["linear", "ease in", "ease out", "ease in-out", "reverse in-out", "weak input", "weak output", "weak middle", "strong middle", "style transfer", "composition", "strong style transfer", "style and composition", "style transfer precise"]], "combine_embeds": [["concat", "add", "subtract", "average", "norm average"]], "start_at": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.001}], "end_at": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}], "embeds_scaling": [["V only", "K+V", "K+V w/ C penalty", "K+mean(V) w/ C penalty"]], "cache_mode": [["insightface only", "clip_vision only", "ipadapter only", "all", "none"], {"default": "all"}], "use_tiled": ["BOOLEAN", {"default": false}], "use_batch": ["BOOLEAN", {"default": false}], "sharpening": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.05}]}, "optional": {"image_negative": ["IMAGE"], "attn_mask": ["MASK"], "clip_vision": ["CLIP_VISION"], "optional_ipadapter": ["IPADAPTER"]}}, "input_order": {"required": ["model", "image", "preset", "lora_strength", "provider", "weight", "weight_faceidv2", "weight_kolors", "weight_type", "combine_embeds", "start_at", "end_at", "embeds_scaling", "cache_mode", "use_tiled", "use_batch", "sharpening"], "optional": ["image_negative", "attn_mask", "clip_vision", "optional_ipadapter"]}, "output": ["MODEL", "IMAGE", "MASK", "IPADAPTER"], "output_is_list": [false, false, false, false], "output_name": ["model", "images", "masks", "ipadapter"], "name": "easy ipadapterApplyFaceIDKolors", "display_name": "Easy Apply IPAdapter (FaceID Kolors)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Adapter", "output_node": false}, "easy ipadapterApplyEncoder": {"input": {"required": {"model": ["MODEL"], "clip_vision": ["CLIP_VISION"], "image1": ["IMAGE"], "preset": [["LIGHT - SD1.5 only (low strength)", "STANDARD (medium strength)", "VIT-G (medium strength)", "PLUS (high strength)", "PLUS (kolors genernal)", "REGULAR - FLUX and SD3.5 only (high strength)", "PLUS FACE (portraits)", "FULL FACE - SD1.5 only (portraits stronger)", "COMPOSITION"]], "num_embeds": ["INT", {"default": 2, "min": 1, "max": 4}]}, "optional": {"image2": ["IMAGE"], "image3": ["IMAGE"], "image4": ["IMAGE"], "mask1": ["MASK"], "weight1": ["FLOAT", {"default": 1.0, "min": -1, "max": 3, "step": 0.05}], "mask2": ["MASK"], "weight2": ["FLOAT", {"default": 1.0, "min": -1, "max": 3, "step": 0.05}], "mask3": ["MASK"], "weight3": ["FLOAT", {"default": 1.0, "min": -1, "max": 3, "step": 0.05}], "mask4": ["MASK"], "weight4": ["FLOAT", {"default": 1.0, "min": -1, "max": 3, "step": 0.05}], "combine_method": [["concat", "add", "subtract", "average", "norm average", "max", "min"]], "optional_ipadapter": ["IPADAPTER"], "pos_embeds": ["EMBEDS"], "neg_embeds": ["EMBEDS"]}}, "input_order": {"required": ["model", "clip_vision", "image1", "preset", "num_embeds"], "optional": ["image2", "image3", "image4", "mask1", "weight1", "mask2", "weight2", "mask3", "weight3", "mask4", "weight4", "combine_method", "optional_ipadapter", "pos_embeds", "neg_embeds"]}, "output": ["MODEL", "CLIP_VISION", "IPADAPTER", "EMBEDS", "EMBEDS"], "output_is_list": [false, false, false, false, false], "output_name": ["model", "clip_vision", "ipadapter", "pos_embed", "neg_embed"], "name": "easy ipadapterApplyEncoder", "display_name": "Easy Apply IPAdapter (Encoder)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Adapter", "output_node": false}, "easy ipadapterApplyEmbeds": {"input": {"required": {"model": ["MODEL"], "clip_vision": ["CLIP_VISION"], "ipadapter": ["IPADAPTER"], "pos_embed": ["EMBEDS"], "weight": ["FLOAT", {"default": 1.0, "min": -1, "max": 3, "step": 0.05}], "weight_type": [["linear", "ease in", "ease out", "ease in-out", "reverse in-out", "weak input", "weak output", "weak middle", "strong middle", "style transfer", "composition", "strong style transfer", "style and composition", "style transfer precise"]], "start_at": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.001}], "end_at": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}], "embeds_scaling": [["V only", "K+V", "K+V w/ C penalty", "K+mean(V) w/ C penalty"]]}, "optional": {"neg_embed": ["EMBEDS"], "attn_mask": ["MASK"]}}, "input_order": {"required": ["model", "clip_vision", "ipadapter", "pos_embed", "weight", "weight_type", "start_at", "end_at", "embeds_scaling"], "optional": ["neg_embed", "attn_mask"]}, "output": ["MODEL", "IPADAPTER"], "output_is_list": [false, false], "output_name": ["model", "ipadapter"], "name": "easy ipadapterApplyEmbeds", "display_name": "Easy Apply IPAdapter (Embeds)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Adapter", "output_node": false}, "easy ipadapterApplyRegional": {"input": {"required": {"pipe": ["PIPE_LINE"], "image": ["IMAGE"], "positive": ["STRING", {"default": "", "placeholder": "positive", "multiline": true}], "negative": ["STRING", {"default": "", "placeholder": "negative", "multiline": true}], "image_weight": ["FLOAT", {"default": 1.0, "min": -1.0, "max": 3.0, "step": 0.05}], "prompt_weight": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.05}], "weight_type": [["linear", "ease in", "ease out", "ease in-out", "reverse in-out", "weak input", "weak output", "weak middle", "strong middle", "style transfer", "composition", "strong style transfer", "style and composition", "style transfer precise"]], "start_at": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.001}], "end_at": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}]}, "optional": {"mask": ["MASK"], "optional_ipadapter_params": ["IPADAPTER_PARAMS"]}, "hidden": {"prompt": "PROMPT", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["pipe", "image", "positive", "negative", "image_weight", "prompt_weight", "weight_type", "start_at", "end_at"], "optional": ["mask", "optional_ipadapter_params"], "hidden": ["prompt", "my_unique_id"]}, "output": ["PIPE_LINE", "IPADAPTER_PARAMS", "CONDITIONING", "CONDITIONING"], "output_is_list": [false, false, false, false], "output_name": ["pipe", "ipadapter_params", "positive", "negative"], "name": "easy ipadapterApplyRegional", "display_name": "Easy Apply IPAdapter (Regional)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Adapter", "output_node": false}, "easy ipadapterApplyFromParams": {"input": {"required": {"model": ["MODEL"], "preset": [["LIGHT - SD1.5 only (low strength)", "STANDARD (medium strength)", "VIT-G (medium strength)", "PLUS (high strength)", "PLUS (kolors genernal)", "REGULAR - FLUX and SD3.5 only (high strength)", "PLUS FACE (portraits)", "FULL FACE - SD1.5 only (portraits stronger)", "COMPOSITION"]], "ipadapter_params": ["IPADAPTER_PARAMS"], "combine_embeds": [["concat", "add", "subtract", "average", "norm average", "max", "min"]], "embeds_scaling": [["V only", "K+V", "K+V w/ C penalty", "K+mean(V) w/ C penalty"]], "cache_mode": [["insightface only", "clip_vision only", "ipadapter only", "all", "none"], {"default": "insightface only"}]}, "optional": {"optional_ipadapter": ["IPADAPTER"], "image_negative": ["IMAGE"]}}, "input_order": {"required": ["model", "preset", "ipadapter_params", "combine_embeds", "embeds_scaling", "cache_mode"], "optional": ["optional_ipadapter", "image_negative"]}, "output": ["MODEL", "IPADAPTER"], "output_is_list": [false, false], "output_name": ["model", "ipadapter"], "name": "easy ipadapterApplyFromParams", "display_name": "Easy Apply IPAdapter (From Params)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Adapter", "output_node": false}, "easy ipadapterStyleComposition": {"input": {"required": {"model": ["MODEL"], "image_style": ["IMAGE"], "preset": [["LIGHT - SD1.5 only (low strength)", "STANDARD (medium strength)", "VIT-G (medium strength)", "PLUS (high strength)", "PLUS (kolors genernal)", "REGULAR - FLUX and SD3.5 only (high strength)", "PLUS FACE (portraits)", "FULL FACE - SD1.5 only (portraits stronger)", "COMPOSITION"]], "weight_style": ["FLOAT", {"default": 1.0, "min": -1, "max": 5, "step": 0.05}], "weight_composition": ["FLOAT", {"default": 1.0, "min": -1, "max": 5, "step": 0.05}], "expand_style": ["BOOLEAN", {"default": false}], "combine_embeds": [["concat", "add", "subtract", "average", "norm average"], {"default": "average"}], "start_at": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.001}], "end_at": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}], "embeds_scaling": [["V only", "K+V", "K+V w/ C penalty", "K+mean(V) w/ C penalty"]], "cache_mode": [["insightface only", "clip_vision only", "ipadapter only", "all", "none"], {"default": "all"}]}, "optional": {"image_composition": ["IMAGE"], "image_negative": ["IMAGE"], "attn_mask": ["MASK"], "clip_vision": ["CLIP_VISION"], "optional_ipadapter": ["IPADAPTER"]}}, "input_order": {"required": ["model", "image_style", "preset", "weight_style", "weight_composition", "expand_style", "combine_embeds", "start_at", "end_at", "embeds_scaling", "cache_mode"], "optional": ["image_composition", "image_negative", "attn_mask", "clip_vision", "optional_ipadapter"]}, "output": ["MODEL", "IPADAPTER"], "output_is_list": [false, false], "output_name": ["model", "ipadapter"], "name": "easy ipadapterStyleComposition", "display_name": "Easy Apply IPAdapter (StyleComposition)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Adapter", "output_node": false}, "easy instantIDApply": {"input": {"required": {"pipe": ["PIPE_LINE"], "image": ["IMAGE"], "instantid_file": [[]], "insightface": [["CPU", "CUDA", "ROCM"]], "control_net_name": [["control_v11p_sd15_scribble_fp16.safetensors", "ttplanetSDXLControlnet_v20Fp16.safetensors"]], "cn_strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}], "cn_soft_weights": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}], "weight": ["FLOAT", {"default": 0.8, "min": 0.0, "max": 5.0, "step": 0.01}], "start_at": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.001}], "end_at": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}], "noise": ["FLOAT", {"default": 0.35, "min": 0.0, "max": 1.0, "step": 0.05}]}, "optional": {"image_kps": ["IMAGE"], "mask": ["MASK"], "control_net": ["CONTROL_NET"]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["pipe", "image", "instantid_file", "insightface", "control_net_name", "cn_strength", "cn_soft_weights", "weight", "start_at", "end_at", "noise"], "optional": ["image_kps", "mask", "control_net"], "hidden": ["prompt", "extra_pnginfo", "my_unique_id"]}, "output": ["PIPE_LINE", "MODEL", "CONDITIONING", "CONDITIONING"], "output_is_list": [false, false, false, false], "output_name": ["pipe", "model", "positive", "negative"], "name": "easy instantIDApply", "display_name": "Easy Apply InstantID", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Adapter", "output_node": false}, "easy instantIDApplyADV": {"input": {"required": {"pipe": ["PIPE_LINE"], "image": ["IMAGE"], "instantid_file": [[]], "insightface": [["CPU", "CUDA", "ROCM"]], "control_net_name": [["control_v11p_sd15_scribble_fp16.safetensors", "ttplanetSDXLControlnet_v20Fp16.safetensors"]], "cn_strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}], "cn_soft_weights": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}], "weight": ["FLOAT", {"default": 0.8, "min": 0.0, "max": 5.0, "step": 0.01}], "start_at": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.001}], "end_at": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}], "noise": ["FLOAT", {"default": 0.35, "min": 0.0, "max": 1.0, "step": 0.05}]}, "optional": {"image_kps": ["IMAGE"], "mask": ["MASK"], "control_net": ["CONTROL_NET"], "positive": ["CONDITIONING"], "negative": ["CONDITIONING"]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["pipe", "image", "instantid_file", "insightface", "control_net_name", "cn_strength", "cn_soft_weights", "weight", "start_at", "end_at", "noise"], "optional": ["image_kps", "mask", "control_net", "positive", "negative"], "hidden": ["prompt", "extra_pnginfo", "my_unique_id"]}, "output": ["PIPE_LINE", "MODEL", "CONDITIONING", "CONDITIONING"], "output_is_list": [false, false, false, false], "output_name": ["pipe", "model", "positive", "negative"], "name": "easy instantIDApplyADV", "display_name": "Easy Apply InstantID (Advanced)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Adapter", "output_node": false}, "easy pulIDApply": {"input": {"required": {"model": ["MODEL"], "pulid_file": [[]], "insightface": [["CPU", "CUDA", "ROCM"]], "image": ["IMAGE"], "method": [["fidelity", "style", "neutral"]], "weight": ["FLOAT", {"default": 1.0, "min": -1.0, "max": 5.0, "step": 0.05}], "start_at": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.001}], "end_at": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}]}, "optional": {"attn_mask": ["MASK"]}}, "input_order": {"required": ["model", "pulid_file", "insightface", "image", "method", "weight", "start_at", "end_at"], "optional": ["attn_mask"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["model"], "name": "easy pulIDApply", "display_name": "Easy Apply PuLID", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Adapter", "output_node": false}, "easy pulIDApplyADV": {"input": {"required": {"model": ["MODEL"], "pulid_file": [[]], "insightface": [["CPU", "CUDA", "ROCM"]], "image": ["IMAGE"], "weight": ["FLOAT", {"default": 1.0, "min": -1.0, "max": 5.0, "step": 0.05}], "projection": [["ortho_v2", "ortho", "none"], {"default": "ortho_v2"}], "fidelity": ["INT", {"default": 8, "min": 0, "max": 32, "step": 1}], "noise": ["FLOAT", {"default": 0.0, "min": -1.0, "max": 1.0, "step": 0.1}], "start_at": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.001}], "end_at": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}]}, "optional": {"attn_mask": ["MASK"]}}, "input_order": {"required": ["model", "pulid_file", "insightface", "image", "weight", "projection", "fidelity", "noise", "start_at", "end_at"], "optional": ["attn_mask"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["model"], "name": "easy pulIDApplyADV", "display_name": "Easy Apply PuLID (Advanced)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Adapter", "output_node": false}, "easy styleAlignedBatchAlign": {"input": {"required": {"model": ["MODEL"], "share_norm": [["both", "group", "layer", "disabled"]], "share_attn": [["q+k", "q+k+v", "disabled"]], "scale": ["FLOAT", {"default": 1, "min": 0, "max": 1.0, "step": 0.1}]}}, "input_order": {"required": ["model", "share_norm", "share_attn", "scale"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "easy styleAlignedBatchAlign", "display_name": "Easy Apply StyleAlign", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Adapter", "output_node": false}, "easy icLightApply": {"input": {"required": {"mode": [["Foreground", "Foreground&Background"]], "model": ["MODEL"], "image": ["IMAGE"], "vae": ["VAE"], "lighting": [["None", "Left Light", "Right Light", "Top Light", "Bottom Light", "Circle Light"], {"default": "None"}], "source": [["Use Background Image", "Use Flipped Background Image", "Left Light", "Right Light", "Top Light", "Bottom Light", "Ambient"], {"default": "Use Background Image"}], "remove_bg": ["BOOLEAN", {"default": true}]}}, "input_order": {"required": ["mode", "model", "image", "vae", "lighting", "source", "remove_bg"]}, "output": ["MODEL", "IMAGE"], "output_is_list": [false, false], "output_name": ["model", "lighting_image"], "name": "easy icLightApply", "display_name": "Easy Apply ICLight", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Adapter", "output_node": false}, "easy applyFooocusInpaint": {"input": {"required": {"model": ["MODEL"], "latent": ["LATENT"], "head": [["fooocus_inpaint_head"]], "patch": [["inpaint_v26 (1.32GB)", "inpaint_v25 (2.58GB)", "inpaint (1.32GB)"]]}}, "input_order": {"required": ["model", "latent", "head", "patch"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["model"], "name": "easy applyFooocusInpaint", "display_name": "Easy Apply Fooocus Inpaint", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Inpaint", "output_node": false}, "easy applyBrushNet": {"input": {"required": {"pipe": ["PIPE_LINE"], "image": ["IMAGE"], "mask": ["MASK"], "brushnet": [[]], "dtype": [["float16", "bfloat16", "float32", "float64"]], "scale": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0}], "start_at": ["INT", {"default": 0, "min": 0, "max": 10000}], "end_at": ["INT", {"default": 10000, "min": 0, "max": 10000}]}}, "input_order": {"required": ["pipe", "image", "mask", "brushnet", "dtype", "scale", "start_at", "end_at"]}, "output": ["PIPE_LINE"], "output_is_list": [false], "output_name": ["pipe"], "name": "easy applyBrushNet", "display_name": "Easy Apply BrushNet", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Inpaint", "output_node": false}, "easy applyPowerPaint": {"input": {"required": {"pipe": ["PIPE_LINE"], "image": ["IMAGE"], "mask": ["MASK"], "powerpaint_model": [[]], "powerpaint_clip": [[]], "dtype": [["float16", "bfloat16", "float32", "float64"]], "fitting": ["FLOAT", {"default": 1.0, "min": 0.3, "max": 1.0}], "function": [["text guided", "shape guided", "object removal", "context aware", "image outpainting"]], "scale": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0}], "start_at": ["INT", {"default": 0, "min": 0, "max": 10000}], "end_at": ["INT", {"default": 10000, "min": 0, "max": 10000}], "save_memory": [["none", "auto", "max"]]}}, "input_order": {"required": ["pipe", "image", "mask", "powerpaint_model", "powerpaint_clip", "dtype", "fitting", "function", "scale", "start_at", "end_at", "save_memory"]}, "output": ["PIPE_LINE"], "output_is_list": [false], "output_name": ["pipe"], "name": "easy applyPowerPaint", "display_name": "Easy Apply PowerPaint", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Inpaint", "output_node": false}, "easy applyInpaint": {"input": {"required": {"pipe": ["PIPE_LINE"], "image": ["IMAGE"], "mask": ["MASK"], "inpaint_mode": [["normal", "fooocus_inpaint", "brushnet_random", "brushnet_segmentation", "powerpaint"]], "encode": [["none", "vae_encode_inpaint", "inpaint_model_conditioning", "different_diffusion"], {"default": "none"}], "grow_mask_by": ["INT", {"default": 6, "min": 0, "max": 64, "step": 1}], "dtype": [["float16", "bfloat16", "float32", "float64"]], "fitting": ["FLOAT", {"default": 1.0, "min": 0.3, "max": 1.0}], "function": [["text guided", "shape guided", "object removal", "context aware", "image outpainting"]], "scale": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0}], "start_at": ["INT", {"default": 0, "min": 0, "max": 10000}], "end_at": ["INT", {"default": 10000, "min": 0, "max": 10000}]}, "optional": {"noise_mask": ["BOOLEAN", {"default": true}]}}, "input_order": {"required": ["pipe", "image", "mask", "inpaint_mode", "encode", "grow_mask_by", "dtype", "fitting", "function", "scale", "start_at", "end_at"], "optional": ["noise_mask"]}, "output": ["PIPE_LINE"], "output_is_list": [false], "output_name": ["pipe"], "name": "easy applyInpaint", "display_name": "Easy Apply Inpaint", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Inpaint", "output_node": false}, "easy preSampling": {"input": {"required": {"pipe": ["PIPE_LINE"], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "align_your_steps", "gits"]], "denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "seed": ["INT", {"default": 0, "min": 0, "max": 1125899906842624}]}, "optional": {"image_to_latent": ["IMAGE"], "latent": ["LATENT"]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["pipe", "steps", "cfg", "sampler_name", "scheduler", "denoise", "seed"], "optional": ["image_to_latent", "latent"], "hidden": ["prompt", "extra_pnginfo", "my_unique_id"]}, "output": ["PIPE_LINE"], "output_is_list": [false], "output_name": ["pipe"], "name": "easy preSampling", "display_name": "PreSampling", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/PreSampling", "output_node": false}, "easy preSamplingAdvanced": {"input": {"required": {"pipe": ["PIPE_LINE"], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "align_your_steps", "gits"]], "start_at_step": ["INT", {"default": 0, "min": 0, "max": 10000}], "end_at_step": ["INT", {"default": 10000, "min": 0, "max": 10000}], "add_noise": [["enable (CPU)", "enable (GPU=A1111)", "disable"], {"default": "enable (CPU)"}], "seed": ["INT", {"default": 0, "min": 0, "max": 1125899906842624}], "return_with_leftover_noise": [["disable", "enable"]]}, "optional": {"image_to_latent": ["IMAGE"], "latent": ["LATENT"]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["pipe", "steps", "cfg", "sampler_name", "scheduler", "start_at_step", "end_at_step", "add_noise", "seed", "return_with_leftover_noise"], "optional": ["image_to_latent", "latent"], "hidden": ["prompt", "extra_pnginfo", "my_unique_id"]}, "output": ["PIPE_LINE"], "output_is_list": [false], "output_name": ["pipe"], "name": "easy preSamplingAdvanced", "display_name": "PreSampling (Advanced)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/PreSampling", "output_node": false}, "easy preSamplingNoiseIn": {"input": {"required": {"pipe": ["PIPE_LINE"], "factor": ["FLOAT", {"default": 0.1, "min": 0.0, "max": 1.0, "step": 0.01, "round": 0.01}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "align_your_steps", "gits"]], "denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "seed": ["INT", {"default": 0, "min": 0, "max": 1125899906842624}]}, "optional": {"optional_noise_seed": ["INT", {"forceInput": true}], "optional_latent": ["LATENT"]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["pipe", "factor", "steps", "cfg", "sampler_name", "scheduler", "denoise", "seed"], "optional": ["optional_noise_seed", "optional_latent"], "hidden": ["prompt", "extra_pnginfo", "my_unique_id"]}, "output": ["PIPE_LINE"], "output_is_list": [false], "output_name": ["pipe"], "name": "easy preSamplingNoiseIn", "display_name": "PreSampling (NoiseIn)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/PreSampling", "output_node": false}, "easy preSamplingCustom": {"input": {"required": {"pipe": ["PIPE_LINE"], "guider": [["CFG", "DualCFG", "Basic", "IP2P+CFG", "IP2P+DualCFG", "IP2P+Basic"], {"default": "Basic"}], "cfg": ["FLOAT", {"default": 3.5, "min": 0.0, "max": 100.0}], "cfg_negative": ["FLOAT", {"default": 1.5, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2", "inversed_euler"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "karrasADV", "exponentialADV", "polyExponential", "sdturbo", "vp", "alignYourSteps", "gits"]], "coeff": ["FLOAT", {"default": 1.2, "min": 0.8, "max": 1.5, "step": 0.05}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "sigma_max": ["FLOAT", {"default": 14.614642, "min": 0.0, "max": 1000.0, "step": 0.01, "round": false}], "sigma_min": ["FLOAT", {"default": 0.0291675, "min": 0.0, "max": 1000.0, "step": 0.01, "round": false}], "rho": ["FLOAT", {"default": 7.0, "min": 0.0, "max": 100.0, "step": 0.01, "round": false}], "beta_d": ["FLOAT", {"default": 19.9, "min": 0.0, "max": 1000.0, "step": 0.01, "round": false}], "beta_min": ["FLOAT", {"default": 0.1, "min": 0.0, "max": 1000.0, "step": 0.01, "round": false}], "eps_s": ["FLOAT", {"default": 0.001, "min": 0.0, "max": 1.0, "step": 0.0001, "round": false}], "flip_sigmas": ["BOOLEAN", {"default": false}], "denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "add_noise": [["enable (CPU)", "enable (GPU=A1111)", "disable"], {"default": "enable (CPU)"}], "seed": ["INT", {"default": 0, "min": 0, "max": 1125899906842624}]}, "optional": {"image_to_latent": ["IMAGE"], "latent": ["LATENT"], "optional_sampler": ["SAMPLER"], "optional_sigmas": ["SIGMAS"]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["pipe", "guider", "cfg", "cfg_negative", "sampler_name", "scheduler", "coeff", "steps", "sigma_max", "sigma_min", "rho", "beta_d", "beta_min", "eps_s", "flip_sigmas", "denoise", "add_noise", "seed"], "optional": ["image_to_latent", "latent", "optional_sampler", "optional_sigmas"], "hidden": ["prompt", "extra_pnginfo", "my_unique_id"]}, "output": ["PIPE_LINE"], "output_is_list": [false], "output_name": ["pipe"], "name": "easy preSamplingCustom", "display_name": "PreSampling (Custom)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/PreSampling", "output_node": false}, "easy preSamplingSdTurbo": {"input": {"required": {"pipe": ["PIPE_LINE"], "steps": ["INT", {"default": 1, "min": 1, "max": 10}], "cfg": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "eta": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01, "round": false}], "s_noise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01, "round": false}], "upscale_ratio": ["FLOAT", {"default": 2.0, "min": 0.0, "max": 16.0, "step": 0.01, "round": false}], "start_step": ["INT", {"default": 5, "min": 0, "max": 1000, "step": 1}], "end_step": ["INT", {"default": 15, "min": 0, "max": 1000, "step": 1}], "upscale_n_step": ["INT", {"default": 3, "min": 0, "max": 1000, "step": 1}], "unsharp_kernel_size": ["INT", {"default": 3, "min": 1, "max": 21, "step": 1}], "unsharp_sigma": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 10.0, "step": 0.01, "round": false}], "unsharp_strength": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 10.0, "step": 0.01, "round": false}], "seed": ["INT", {"default": 0, "min": 0, "max": 1125899906842624}]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["pipe", "steps", "cfg", "sampler_name", "eta", "s_noise", "upscale_ratio", "start_step", "end_step", "upscale_n_step", "unsharp_kernel_size", "unsharp_sigma", "unsharp_strength", "seed"], "hidden": ["prompt", "extra_pnginfo", "my_unique_id"]}, "output": ["PIPE_LINE"], "output_is_list": [false], "output_name": ["pipe"], "name": "easy preSamplingSdTurbo", "display_name": "PreSampling (SDTurbo)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/PreSampling", "output_node": false}, "easy preSamplingDynamicCFG": {"input": {"required": {"pipe": ["PIPE_LINE"], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0}], "cfg_mode": [["Constant", "Linear Down", "Cosine Down", "Half Cosine Down", "Linear Up", "Cosine Up", "Half Cosine Up", "Power Up", "Power Down", "Linear Repeating", "Cosine Repeating", "Sawtooth"]], "cfg_scale_min": ["FLOAT", {"default": 3.5, "min": 0.0, "max": 100.0, "step": 0.5}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "align_your_steps", "gits"]], "denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "seed": ["INT", {"default": 0, "min": 0, "max": 1125899906842624}]}, "optional": {"image_to_latent": ["IMAGE"], "latent": ["LATENT"]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["pipe", "steps", "cfg", "cfg_mode", "cfg_scale_min", "sampler_name", "scheduler", "denoise", "seed"], "optional": ["image_to_latent", "latent"], "hidden": ["prompt", "extra_pnginfo", "my_unique_id"]}, "output": ["PIPE_LINE"], "output_is_list": [false], "output_name": ["pipe"], "name": "easy preSamplingDynamicCFG", "display_name": "PreSampling (DynamicCFG)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/PreSampling", "output_node": false}, "easy preSamplingCascade": {"input": {"required": {"pipe": ["PIPE_LINE"], "encode_vae_name": [["None", "4x_foolhardy_Remacri.pth", "ae.safetensors", "sdxl_vae.safetensors"]], "decode_vae_name": [["None", "4x_foolhardy_Remacri.pth", "ae.safetensors", "sdxl_vae.safetensors"]], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "cfg": ["FLOAT", {"default": 4.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"], {"default": "euler_ancestral"}], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"], {"default": "simple"}], "denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "seed": ["INT", {"default": 0, "min": 0, "max": 1125899906842624}]}, "optional": {"image_to_latent_c": ["IMAGE"], "latent_c": ["LATENT"]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["pipe", "encode_vae_name", "decode_vae_name", "steps", "cfg", "sampler_name", "scheduler", "denoise", "seed"], "optional": ["image_to_latent_c", "latent_c"], "hidden": ["prompt", "extra_pnginfo", "my_unique_id"]}, "output": ["PIPE_LINE"], "output_is_list": [false], "output_name": ["pipe"], "name": "easy preSamplingCascade", "display_name": "PreSampling (Cascade)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/PreSampling", "output_node": false}, "easy preSamplingLayerDiffusion": {"input": {"required": {"pipe": ["PIPE_LINE"], "method": [["Attention Injection", "Conv Injection", "Everything", "Foreground", "Background"]], "weight": ["FLOAT", {"default": 1.0, "min": -1, "max": 3, "step": 0.05}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"], {"default": "euler"}], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "align_your_steps", "gits"], {"default": "normal"}], "denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "seed": ["INT", {"default": 0, "min": 0, "max": 1125899906842624}]}, "optional": {"image": ["IMAGE"], "blended_image": ["IMAGE"], "mask": ["MASK"]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["pipe", "method", "weight", "steps", "cfg", "sampler_name", "scheduler", "denoise", "seed"], "optional": ["image", "blended_image", "mask"], "hidden": ["prompt", "extra_pnginfo", "my_unique_id"]}, "output": ["PIPE_LINE"], "output_is_list": [false], "output_name": ["pipe"], "name": "easy preSamplingLayerDiffusion", "display_name": "PreSampling (LayerDiffuse)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/PreSampling", "output_node": false}, "easy preSamplingLayerDiffusionADDTL": {"input": {"required": {"pipe": ["PIPE_LINE"], "foreground_prompt": ["STRING", {"default": "", "placeholder": "Foreground Additional Prompt", "multiline": true}], "background_prompt": ["STRING", {"default": "", "placeholder": "Background Additional Prompt", "multiline": true}], "blended_prompt": ["STRING", {"default": "", "placeholder": "Blended Additional Prompt", "multiline": true}]}, "optional": {"optional_fg_cond": ["CONDITIONING"], "optional_bg_cond": ["CONDITIONING"], "optional_blended_cond": ["CONDITIONING"]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["pipe", "foreground_prompt", "background_prompt", "blended_prompt"], "optional": ["optional_fg_cond", "optional_bg_cond", "optional_blended_cond"], "hidden": ["prompt", "extra_pnginfo", "my_unique_id"]}, "output": ["PIPE_LINE"], "output_is_list": [false], "output_name": ["pipe"], "name": "easy preSamplingLayerDiffusionADDTL", "display_name": "PreSampling (LayerDiffuse ADDTL)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/PreSampling", "output_node": false}, "dynamicThresholdingFull": {"input": {"required": {"model": ["MODEL"], "mimic_scale": ["FLOAT", {"default": 7.0, "min": 0.0, "max": 100.0, "step": 0.5}], "threshold_percentile": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "mimic_mode": [["Constant", "Linear Down", "Cosine Down", "Half Cosine Down", "Linear Up", "Cosine Up", "Half Cosine Up", "Power Up", "Power Down", "Linear Repeating", "Cosine Repeating", "Sawtooth"]], "mimic_scale_min": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 100.0, "step": 0.5}], "cfg_mode": [["Constant", "Linear Down", "Cosine Down", "Half Cosine Down", "Linear Up", "Cosine Up", "Half Cosine Up", "Power Up", "Power Down", "Linear Repeating", "Cosine Repeating", "Sawtooth"]], "cfg_scale_min": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 100.0, "step": 0.5}], "sched_val": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 100.0, "step": 0.01}], "separate_feature_channels": [["enable", "disable"]], "scaling_startpoint": [["MEAN", "ZERO"]], "variability_measure": [["AD", "STD"]], "interpolate_phi": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["model", "mimic_scale", "threshold_percentile", "mimic_mode", "mimic_scale_min", "cfg_mode", "cfg_scale_min", "sched_val", "separate_feature_channels", "scaling_startpoint", "variability_measure", "interpolate_phi"]}, "output": ["MODEL"], "output_is_list": [false], "output_name": ["MODEL"], "name": "dynamicThresholdingFull", "display_name": "DynamicThresholdingFull", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/PreSampling", "output_node": false}, "easy fullkSampler": {"input": {"required": {"pipe": ["PIPE_LINE"], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "cfg": ["FLOAT", {"default": 8, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "align_your_steps", "gits"]], "denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "image_output": [["Hide", "Preview", "Save", "Hide&Save", "Sender", "Sender&Save", "None"]], "link_id": ["INT", {"default": 0, "min": 0, "max": 9223372036854775807, "step": 1}], "save_prefix": ["STRING", {"default": "ComfyUI"}]}, "optional": {"seed": ["INT", {"default": 0, "min": 0, "max": 1125899906842624}], "model": ["MODEL"], "positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "latent": ["LATENT"], "vae": ["VAE"], "clip": ["CLIP"], "xyPlot": ["XYPLOT"], "image": ["IMAGE"]}, "hidden": {"tile_size": "INT", "prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "my_unique_id": "UNIQUE_ID", "embeddingsList": [["SDA768.pt", "SDXL/SmoothNoob_Quality.safetensors", "SDXL/Stable_Yogis_PDXL_Positives.safetensors"]]}}, "input_order": {"required": ["pipe", "steps", "cfg", "sampler_name", "scheduler", "denoise", "image_output", "link_id", "save_prefix"], "optional": ["seed", "model", "positive", "negative", "latent", "vae", "clip", "xyPlot", "image"], "hidden": ["tile_size", "prompt", "extra_pnginfo", "my_unique_id", "embeddingsList"]}, "output": ["PIPE_LINE", "IMAGE", "MODEL", "CONDITIONING", "CONDITIONING", "LATENT", "VAE", "CLIP", "INT"], "output_is_list": [false, false, false, false, false, false, false, false, false], "output_name": ["pipe", "image", "model", "positive", "negative", "latent", "vae", "clip", "seed"], "name": "easy fullkSampler", "display_name": "EasyKSampler (Full)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Sampler", "output_node": true}, "easy kSampler": {"input": {"required": {"pipe": ["PIPE_LINE"], "image_output": [["Hide", "Preview", "Save", "Hide&Save", "Sender", "Sender&Save", "None"], {"default": "Preview"}], "link_id": ["INT", {"default": 0, "min": 0, "max": 9223372036854775807, "step": 1}], "save_prefix": ["STRING", {"default": "ComfyUI"}]}, "optional": {"model": ["MODEL"]}, "hidden": {"tile_size": "INT", "prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "my_unique_id": "UNIQUE_ID", "embeddingsList": [["SDA768.pt", "SDXL/SmoothNoob_Quality.safetensors", "SDXL/Stable_Yogis_PDXL_Positives.safetensors"]]}}, "input_order": {"required": ["pipe", "image_output", "link_id", "save_prefix"], "optional": ["model"], "hidden": ["tile_size", "prompt", "extra_pnginfo", "my_unique_id", "embeddingsList"]}, "output": ["PIPE_LINE", "IMAGE"], "output_is_list": [false, false], "output_name": ["pipe", "image"], "name": "easy kSampler", "display_name": "EasyKSampler", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Sampler", "output_node": true}, "easy kSamplerCustom": {"input": {"required": {"pipe": ["PIPE_LINE"], "image_output": [["Hide", "Preview", "Save", "Hide&Save", "Sender", "Sender&Save", "None"], {"default": "None"}], "link_id": ["INT", {"default": 0, "min": 0, "max": 9223372036854775807, "step": 1}], "save_prefix": ["STRING", {"default": "ComfyUI"}]}, "optional": {"model": ["MODEL"]}, "hidden": {"tile_size": "INT", "prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "my_unique_id": "UNIQUE_ID", "embeddingsList": [["SDA768.pt", "SDXL/SmoothNoob_Quality.safetensors", "SDXL/Stable_Yogis_PDXL_Positives.safetensors"]]}}, "input_order": {"required": ["pipe", "image_output", "link_id", "save_prefix"], "optional": ["model"], "hidden": ["tile_size", "prompt", "extra_pnginfo", "my_unique_id", "embeddingsList"]}, "output": ["PIPE_LINE", "LATENT", "LATENT", "IMAGE"], "output_is_list": [false, false, false, false], "output_name": ["pipe", "output", "denoised_output", "image"], "name": "easy kSamplerCustom", "display_name": "EasyKSampler (Custom)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Sampler", "output_node": true}, "easy kSamplerTiled": {"input": {"required": {"pipe": ["PIPE_LINE"], "tile_size": ["INT", {"default": 512, "min": 320, "max": 4096, "step": 64}], "image_output": [["Hide", "Preview", "Save", "Hide&Save", "Sender", "Sender&Save", "None"], {"default": "Preview"}], "link_id": ["INT", {"default": 0, "min": 0, "max": 9223372036854775807, "step": 1}], "save_prefix": ["STRING", {"default": "ComfyUI"}]}, "optional": {"model": ["MODEL"]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "my_unique_id": "UNIQUE_ID", "embeddingsList": [["SDA768.pt", "SDXL/SmoothNoob_Quality.safetensors", "SDXL/Stable_Yogis_PDXL_Positives.safetensors"]]}}, "input_order": {"required": ["pipe", "tile_size", "image_output", "link_id", "save_prefix"], "optional": ["model"], "hidden": ["prompt", "extra_pnginfo", "my_unique_id", "embeddingsList"]}, "output": ["PIPE_LINE", "IMAGE"], "output_is_list": [false, false], "output_name": ["pipe", "image"], "name": "easy kSamplerTiled", "display_name": "EasyKSampler (Tiled Decode)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Sampler", "output_node": true}, "easy kSamplerLayerDiffusion": {"input": {"required": {"pipe": ["PIPE_LINE"], "image_output": [["Hide", "Preview", "Save", "Hide&Save", "Sender", "Sender&Save"], {"default": "Preview"}], "link_id": ["INT", {"default": 0, "min": 0, "max": 9223372036854775807, "step": 1}], "save_prefix": ["STRING", {"default": "ComfyUI"}]}, "optional": {"model": ["MODEL"]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "my_unique_id": "UNIQUE_ID", "embeddingsList": [["SDA768.pt", "SDXL/SmoothNoob_Quality.safetensors", "SDXL/Stable_Yogis_PDXL_Positives.safetensors"]]}}, "input_order": {"required": ["pipe", "image_output", "link_id", "save_prefix"], "optional": ["model"], "hidden": ["prompt", "extra_pnginfo", "my_unique_id", "embeddingsList"]}, "output": ["PIPE_LINE", "IMAGE", "IMAGE", "MASK"], "output_is_list": [false, false, false, true], "output_name": ["pipe", "final_image", "original_image", "alpha"], "name": "easy kSamplerLayerDiffusion", "display_name": "EasyKSampler (LayerDiffuse)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Sampler", "output_node": true}, "easy kSamplerInpainting": {"input": {"required": {"pipe": ["PIPE_LINE"], "grow_mask_by": ["INT", {"default": 6, "min": 0, "max": 64, "step": 1}], "image_output": [["Hide", "Preview", "Save", "Hide&Save", "Sender", "Sender&Save"], {"default": "Preview"}], "link_id": ["INT", {"default": 0, "min": 0, "max": 9223372036854775807, "step": 1}], "save_prefix": ["STRING", {"default": "ComfyUI"}], "additional": [["None", "InpaintModelCond", "Differential Diffusion", "Fooocus Inpaint", "Fooocus Inpaint + DD", "Brushnet Random", "Brushnet Random + DD", "Brushnet Segmentation", "Brushnet Segmentation + DD"], {"default": "None"}]}, "optional": {"model": ["MODEL"], "mask": ["MASK"]}, "hidden": {"tile_size": "INT", "prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "my_unique_id": "UNIQUE_ID", "embeddingsList": [["SDA768.pt", "SDXL/SmoothNoob_Quality.safetensors", "SDXL/Stable_Yogis_PDXL_Positives.safetensors"]]}}, "input_order": {"required": ["pipe", "grow_mask_by", "image_output", "link_id", "save_prefix", "additional"], "optional": ["model", "mask"], "hidden": ["tile_size", "prompt", "extra_pnginfo", "my_unique_id", "embeddingsList"]}, "output": ["PIPE_LINE", "IMAGE", "VAE"], "output_is_list": [false, false, false], "output_name": ["pipe", "image", "vae"], "name": "easy kSamplerInpainting", "display_name": "EasyKSampler (Inpainting)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Sampler", "output_node": true}, "easy kSamplerDownscaleUnet": {"input": {"required": {"pipe": ["PIPE_LINE"], "downscale_mode": [["None", "Auto", "Custom"], {"default": "Auto"}], "block_number": ["INT", {"default": 3, "min": 1, "max": 32, "step": 1}], "downscale_factor": ["FLOAT", {"default": 2.0, "min": 0.1, "max": 9.0, "step": 0.001}], "start_percent": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.001}], "end_percent": ["FLOAT", {"default": 0.35, "min": 0.0, "max": 1.0, "step": 0.001}], "downscale_after_skip": ["BOOLEAN", {"default": true}], "downscale_method": [["bicubic", "nearest-exact", "bilinear", "area", "bislerp"]], "upscale_method": [["bicubic", "nearest-exact", "bilinear", "area", "bislerp"]], "image_output": [["Hide", "Preview", "Save", "Hide&Save", "Sender", "Sender&Save"], {"default": "Preview"}], "link_id": ["INT", {"default": 0, "min": 0, "max": 9223372036854775807, "step": 1}], "save_prefix": ["STRING", {"default": "ComfyUI"}]}, "optional": {"model": ["MODEL"]}, "hidden": {"tile_size": "INT", "prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "my_unique_id": "UNIQUE_ID", "embeddingsList": [["SDA768.pt", "SDXL/SmoothNoob_Quality.safetensors", "SDXL/Stable_Yogis_PDXL_Positives.safetensors"]]}}, "input_order": {"required": ["pipe", "downscale_mode", "block_number", "downscale_factor", "start_percent", "end_percent", "downscale_after_skip", "downscale_method", "upscale_method", "image_output", "link_id", "save_prefix"], "optional": ["model"], "hidden": ["tile_size", "prompt", "extra_pnginfo", "my_unique_id", "embeddingsList"]}, "output": ["PIPE_LINE", "IMAGE"], "output_is_list": [false, false], "output_name": ["pipe", "image"], "name": "easy kSamplerDownscaleUnet", "display_name": "EasyKsampler (Downscale Unet)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Sampler", "output_node": true}, "easy kSamplerSDTurbo": {"input": {"required": {"pipe": ["PIPE_LINE"], "image_output": [["Hide", "Preview", "Save", "Hide&Save", "Sender", "Sender&Save"], {"default": "Preview"}], "link_id": ["INT", {"default": 0, "min": 0, "max": 9223372036854775807, "step": 1}], "save_prefix": ["STRING", {"default": "ComfyUI"}]}, "optional": {"model": ["MODEL"]}, "hidden": {"tile_size": "INT", "prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "my_unique_id": "UNIQUE_ID", "embeddingsList": [["SDA768.pt", "SDXL/SmoothNoob_Quality.safetensors", "SDXL/Stable_Yogis_PDXL_Positives.safetensors"]]}}, "input_order": {"required": ["pipe", "image_output", "link_id", "save_prefix"], "optional": ["model"], "hidden": ["tile_size", "prompt", "extra_pnginfo", "my_unique_id", "embeddingsList"]}, "output": ["PIPE_LINE", "IMAGE"], "output_is_list": [false, false], "output_name": ["pipe", "image"], "name": "easy kSamplerSDTurbo", "display_name": "EasyKSampler (SDTurbo)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Sampler", "output_node": true}, "easy fullCascadeKSampler": {"input": {"required": {"pipe": ["PIPE_LINE"], "encode_vae_name": [["None", "4x_foolhardy_Remacri.pth", "ae.safetensors", "sdxl_vae.safetensors"]], "decode_vae_name": [["None", "4x_foolhardy_Remacri.pth", "ae.safetensors", "sdxl_vae.safetensors"]], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "cfg": ["FLOAT", {"default": 4.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"], {"default": "euler_ancestral"}], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"], {"default": "simple"}], "denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "image_output": [["Hide", "Preview", "Save", "Hide&Save", "Sender", "Sender&Save"]], "link_id": ["INT", {"default": 0, "min": 0, "max": 9223372036854775807, "step": 1}], "save_prefix": ["STRING", {"default": "ComfyUI"}], "seed": ["INT", {"default": 0, "min": 0, "max": 1125899906842624}]}, "optional": {"image_to_latent_c": ["IMAGE"], "latent_c": ["LATENT"], "model_c": ["MODEL"]}, "hidden": {"tile_size": "INT", "prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "my_unique_id": "UNIQUE_ID", "embeddingsList": [["SDA768.pt", "SDXL/SmoothNoob_Quality.safetensors", "SDXL/Stable_Yogis_PDXL_Positives.safetensors"]]}}, "input_order": {"required": ["pipe", "encode_vae_name", "decode_vae_name", "steps", "cfg", "sampler_name", "scheduler", "denoise", "image_output", "link_id", "save_prefix", "seed"], "optional": ["image_to_latent_c", "latent_c", "model_c"], "hidden": ["tile_size", "prompt", "extra_pnginfo", "my_unique_id", "embeddingsList"]}, "output": ["PIPE_LINE", "MODEL", "LATENT"], "output_is_list": [false, false, false], "output_name": ["pipe", "model_b", "latent_b"], "name": "easy fullCascadeKSampler", "display_name": "EasyCascadeKsampler (Full)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Sampler", "output_node": true}, "easy cascadeKSampler": {"input": {"required": {"pipe": ["PIPE_LINE"], "image_output": [["Hide", "Preview", "Save", "Hide&Save", "Sender", "Sender&Save"], {"default": "Preview"}], "link_id": ["INT", {"default": 0, "min": 0, "max": 9223372036854775807, "step": 1}], "save_prefix": ["STRING", {"default": "ComfyUI"}]}, "optional": {"model_c": ["MODEL"]}, "hidden": {"tile_size": "INT", "prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "my_unique_id": "UNIQUE_ID", "embeddingsList": [["SDA768.pt", "SDXL/SmoothNoob_Quality.safetensors", "SDXL/Stable_Yogis_PDXL_Positives.safetensors"]]}}, "input_order": {"required": ["pipe", "image_output", "link_id", "save_prefix"], "optional": ["model_c"], "hidden": ["tile_size", "prompt", "extra_pnginfo", "my_unique_id", "embeddingsList"]}, "output": ["PIPE_LINE", "IMAGE"], "output_is_list": [false, false], "output_name": ["pipe", "image"], "name": "easy cascadeKSampler", "display_name": "EasyCascadeKsampler", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Sampler", "output_node": true}, "easy unSampler": {"input": {"required": {"steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "end_at_step": ["INT", {"default": 0, "min": 0, "max": 10000}], "cfg": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "normalize": [["disable", "enable"]]}, "optional": {"pipe": ["PIPE_LINE"], "optional_model": ["MODEL"], "optional_positive": ["CONDITIONING"], "optional_negative": ["CONDITIONING"], "optional_latent": ["LATENT"]}}, "input_order": {"required": ["steps", "end_at_step", "cfg", "sampler_name", "scheduler", "normalize"], "optional": ["pipe", "optional_model", "optional_positive", "optional_negative", "optional_latent"]}, "output": ["PIPE_LINE", "LATENT"], "output_is_list": [false, false], "output_name": ["pipe", "latent"], "name": "easy unSampler", "display_name": "EasyUnSampler", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Sampler", "output_node": false}, "easy hiresFix": {"input": {"required": {"model_name": [["4x-UltraSharpV2.safetensors", "4x_NMKD-Superscale-SP_178000_G.pth", "4x_NickelbackFS_72000_G.pth", "4x_UniversalUpscalerV2-Sharp_101000_G.pth", "4x_foolhardy_Remacri.pth", "RealESRGAN_x2.pth", "RealESRGAN_x4.pth", "RealESRGAN_x4plus.pth", "RealESRGAN_x4plus_anime_6B.pth"]], "rescale_after_model": [[false, true], {"default": true}], "rescale_method": [["nearest-exact", "bilinear", "area", "bicubic", "lanczos", "bislerp"]], "rescale": [["by percentage", "to Width/Height", "to longer side - maintain aspect"]], "percent": ["INT", {"default": 50, "min": 0, "max": 1000, "step": 1}], "width": ["INT", {"default": 1024, "min": 64, "max": 16384, "step": 8}], "height": ["INT", {"default": 1024, "min": 64, "max": 16384, "step": 8}], "longer_side": ["INT", {"default": 1024, "min": 64, "max": 16384, "step": 8}], "crop": [["disabled", "center"]], "image_output": [["Hide", "Preview", "Save", "Hide&Save", "Sender", "Sender&Save"], {"default": "Preview"}], "link_id": ["INT", {"default": 0, "min": 0, "max": 9223372036854775807, "step": 1}], "save_prefix": ["STRING", {"default": "ComfyUI"}]}, "optional": {"pipe": ["PIPE_LINE"], "image": ["IMAGE"], "vae": ["VAE"]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["model_name", "rescale_after_model", "rescale_method", "rescale", "percent", "width", "height", "longer_side", "crop", "image_output", "link_id", "save_prefix"], "optional": ["pipe", "image", "vae"], "hidden": ["prompt", "extra_pnginfo", "my_unique_id"]}, "output": ["PIPE_LINE", "IMAGE", "LATENT"], "output_is_list": [false, false, false], "output_name": ["pipe", "image", "latent"], "name": "easy hiresFix", "display_name": "HiresFix", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Fix", "output_node": true}, "easy preDetailerFix": {"input": {"required": {"pipe": ["PIPE_LINE"], "guide_size": ["FLOAT", {"default": 256, "min": 64, "max": 16384, "step": 8}], "guide_size_for": ["BOOLEAN", {"default": true, "label_on": "bbox", "label_off": "crop_region"}], "max_size": ["FLOAT", {"default": 768, "min": 64, "max": 16384, "step": 8}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "align_your_steps"]], "denoise": ["FLOAT", {"default": 0.5, "min": 0.0001, "max": 1.0, "step": 0.01}], "feather": ["INT", {"default": 5, "min": 0, "max": 100, "step": 1}], "noise_mask": ["BOOLEAN", {"default": true, "label_on": "enabled", "label_off": "disabled"}], "force_inpaint": ["BOOLEAN", {"default": true, "label_on": "enabled", "label_off": "disabled"}], "drop_size": ["INT", {"min": 1, "max": 16384, "step": 1, "default": 10}], "wildcard": ["STRING", {"multiline": true, "dynamicPrompts": false}], "cycle": ["INT", {"default": 1, "min": 1, "max": 10, "step": 1}]}, "optional": {"bbox_segm_pipe": ["PIPE_LINE"], "sam_pipe": ["PIPE_LINE"], "optional_image": ["IMAGE"]}}, "input_order": {"required": ["pipe", "guide_size", "guide_size_for", "max_size", "seed", "steps", "cfg", "sampler_name", "scheduler", "denoise", "feather", "noise_mask", "force_inpaint", "drop_size", "wildcard", "cycle"], "optional": ["bbox_segm_pipe", "sam_pipe", "optional_image"]}, "output": ["PIPE_LINE"], "output_is_list": [false], "output_name": ["pipe"], "name": "easy preDetailerFix", "display_name": "PreDetailerFix", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Fix", "output_node": false}, "easy preMaskDetailerFix": {"input": {"required": {"pipe": ["PIPE_LINE"], "mask": ["MASK"], "guide_size": ["FLOAT", {"default": 384, "min": 64, "max": 16384, "step": 8}], "guide_size_for": ["BOOLEAN", {"default": true, "label_on": "bbox", "label_off": "crop_region"}], "max_size": ["FLOAT", {"default": 1024, "min": 64, "max": 16384, "step": 8}], "mask_mode": ["BOOLEAN", {"default": true, "label_on": "masked only", "label_off": "whole"}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "denoise": ["FLOAT", {"default": 0.5, "min": 0.0001, "max": 1.0, "step": 0.01}], "feather": ["INT", {"default": 5, "min": 0, "max": 100, "step": 1}], "crop_factor": ["FLOAT", {"default": 3.0, "min": 1.0, "max": 10, "step": 0.1}], "drop_size": ["INT", {"min": 1, "max": 16384, "step": 1, "default": 10}], "refiner_ratio": ["FLOAT", {"default": 0.2, "min": 0.0, "max": 1.0}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 100}], "cycle": ["INT", {"default": 1, "min": 1, "max": 10, "step": 1}]}, "optional": {"optional_image": ["IMAGE"], "inpaint_model": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}], "noise_mask_feather": ["INT", {"default": 20, "min": 0, "max": 100, "step": 1}]}}, "input_order": {"required": ["pipe", "mask", "guide_size", "guide_size_for", "max_size", "mask_mode", "seed", "steps", "cfg", "sampler_name", "scheduler", "denoise", "feather", "crop_factor", "drop_size", "refiner_ratio", "batch_size", "cycle"], "optional": ["optional_image", "inpaint_model", "noise_mask_feather"]}, "output": ["PIPE_LINE"], "output_is_list": [false], "output_name": ["pipe"], "name": "easy preMaskDetailerFix", "display_name": "preMaskDetailerFix", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Fix", "output_node": false}, "easy ultralyticsDetectorPipe": {"input": {"required": {"model_name": [["bbox/face_yolov8m.pt", "bbox/hand_yolov8s.pt", "segm/person_yolov8m-seg.pt"]], "bbox_threshold": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 1.0, "step": 0.01}], "bbox_dilation": ["INT", {"default": 10, "min": -512, "max": 512, "step": 1}], "bbox_crop_factor": ["FLOAT", {"default": 3.0, "min": 1.0, "max": 10, "step": 0.1}]}}, "input_order": {"required": ["model_name", "bbox_threshold", "bbox_dilation", "bbox_crop_factor"]}, "output": ["PIPE_LINE"], "output_is_list": [false], "output_name": ["bbox_segm_pipe"], "name": "easy ultralyticsDetectorPipe", "display_name": "UltralyticsDetector (Pipe)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Fix", "output_node": false}, "easy samLoaderPipe": {"input": {"required": {"model_name": [[]], "device_mode": [["AUTO", "Prefer GPU", "CPU"], {"default": "AUTO"}], "sam_detection_hint": [["center-1", "horizontal-2", "vertical-2", "rect-4", "diamond-4", "mask-area", "mask-points", "mask-point-bbox", "none"]], "sam_dilation": ["INT", {"default": 0, "min": -512, "max": 512, "step": 1}], "sam_threshold": ["FLOAT", {"default": 0.93, "min": 0.0, "max": 1.0, "step": 0.01}], "sam_bbox_expansion": ["INT", {"default": 0, "min": 0, "max": 1000, "step": 1}], "sam_mask_hint_threshold": ["FLOAT", {"default": 0.7, "min": 0.0, "max": 1.0, "step": 0.01}], "sam_mask_hint_use_negative": [["False", "Small", "Outter"]]}}, "input_order": {"required": ["model_name", "device_mode", "sam_detection_hint", "sam_dilation", "sam_threshold", "sam_bbox_expansion", "sam_mask_hint_threshold", "sam_mask_hint_use_negative"]}, "output": ["PIPE_LINE"], "output_is_list": [false], "output_name": ["sam_pipe"], "name": "easy samLoaderPipe", "display_name": "SAMLoader (Pipe)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Fix", "output_node": false}, "easy detailerFix": {"input": {"required": {"pipe": ["PIPE_LINE"], "image_output": [["Hide", "Preview", "Save", "Hide&Save", "Sender", "Sender&Save"], {"default": "Preview"}], "link_id": ["INT", {"default": 0, "min": 0, "max": 9223372036854775807, "step": 1}], "save_prefix": ["STRING", {"default": "ComfyUI"}]}, "optional": {"model": ["MODEL"]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["pipe", "image_output", "link_id", "save_prefix"], "optional": ["model"], "hidden": ["prompt", "extra_pnginfo", "my_unique_id"]}, "output": ["PIPE_LINE", "IMAGE", "IMAGE", "IMAGE"], "output_is_list": [false, false, true, true], "output_name": ["pipe", "image", "cropped_refined", "cropped_enhanced_alpha"], "name": "easy detailerFix", "display_name": "DetailerFix", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Fix", "output_node": true}, "easy pipeIn": {"input": {"required": {}, "optional": {"pipe": ["PIPE_LINE"], "model": ["MODEL"], "pos": ["CONDITIONING"], "neg": ["CONDITIONING"], "latent": ["LATENT"], "vae": ["VAE"], "clip": ["CLIP"], "image": ["IMAGE"], "xyPlot": ["XYPLOT"]}, "hidden": {"my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": [], "optional": ["pipe", "model", "pos", "neg", "latent", "vae", "clip", "image", "xyPlot"], "hidden": ["my_unique_id"]}, "output": ["PIPE_LINE"], "output_is_list": [false], "output_name": ["pipe"], "name": "easy pipeIn", "display_name": "Pipe In", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Pipe", "output_node": false}, "easy pipeOut": {"input": {"required": {"pipe": ["PIPE_LINE"]}, "hidden": {"my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["pipe"], "hidden": ["my_unique_id"]}, "output": ["PIPE_LINE", "MODEL", "CONDITIONING", "CONDITIONING", "LATENT", "VAE", "CLIP", "IMAGE", "INT"], "output_is_list": [false, false, false, false, false, false, false, false, false], "output_name": ["pipe", "model", "pos", "neg", "latent", "vae", "clip", "image", "seed"], "name": "easy pipeOut", "display_name": "Pipe Out", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Pipe", "output_node": false}, "easy pipeEdit": {"input": {"required": {"clip_skip": ["INT", {"default": -1, "min": -24, "max": 0, "step": 1}], "optional_positive": ["STRING", {"default": "", "multiline": true}], "positive_token_normalization": [["none", "mean", "length", "length+mean"]], "positive_weight_interpretation": [["comfy", "A1111", "comfy++", "compel", "fixed attention"]], "optional_negative": ["STRING", {"default": "", "multiline": true}], "negative_token_normalization": [["none", "mean", "length", "length+mean"]], "negative_weight_interpretation": [["comfy", "A1111", "comfy++", "compel", "fixed attention"]], "a1111_prompt_style": ["BOOLEAN", {"default": false}], "conditioning_mode": [["replace", "concat", "combine", "average", "timestep"], {"default": "replace"}], "average_strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "old_cond_start": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.001}], "old_cond_end": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}], "new_cond_start": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.001}], "new_cond_end": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}]}, "optional": {"pipe": ["PIPE_LINE"], "model": ["MODEL"], "pos": ["CONDITIONING"], "neg": ["CONDITIONING"], "latent": ["LATENT"], "vae": ["VAE"], "clip": ["CLIP"], "image": ["IMAGE"]}, "hidden": {"my_unique_id": "UNIQUE_ID", "prompt": "PROMPT"}}, "input_order": {"required": ["clip_skip", "optional_positive", "positive_token_normalization", "positive_weight_interpretation", "optional_negative", "negative_token_normalization", "negative_weight_interpretation", "a1111_prompt_style", "conditioning_mode", "average_strength", "old_cond_start", "old_cond_end", "new_cond_start", "new_cond_end"], "optional": ["pipe", "model", "pos", "neg", "latent", "vae", "clip", "image"], "hidden": ["my_unique_id", "prompt"]}, "output": ["PIPE_LINE", "MODEL", "CONDITIONING", "CONDITIONING", "LATENT", "VAE", "CLIP", "IMAGE"], "output_is_list": [false, false, false, false, false, false, false, false], "output_name": ["pipe", "model", "pos", "neg", "latent", "vae", "clip", "image"], "name": "easy pipeEdit", "display_name": "Pipe Edit", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Pipe", "output_node": false}, "easy pipeEditPrompt": {"input": {"required": {"pipe": ["PIPE_LINE"], "positive": ["STRING", {"default": "", "multiline": true}], "negative": ["STRING", {"default": "", "multiline": true}]}, "hidden": {"my_unique_id": "UNIQUE_ID", "prompt": "PROMPT"}}, "input_order": {"required": ["pipe", "positive", "negative"], "hidden": ["my_unique_id", "prompt"]}, "output": ["PIPE_LINE"], "output_is_list": [false], "output_name": ["pipe"], "name": "easy pipeEditPrompt", "display_name": "Pipe Edit Prompt", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Pipe", "output_node": false}, "easy pipeToBasicPipe": {"input": {"required": {"pipe": ["PIPE_LINE"]}, "hidden": {"my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["pipe"], "hidden": ["my_unique_id"]}, "output": ["BASIC_PIPE"], "output_is_list": [false], "output_name": ["basic_pipe"], "name": "easy pipeToBasicPipe", "display_name": "Pipe -> BasicPipe", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Pipe", "output_node": false}, "easy pipeBatchIndex": {"input": {"required": {"pipe": ["PIPE_LINE"], "batch_index": ["INT", {"default": 0, "min": 0, "max": 63}], "length": ["INT", {"default": 1, "min": 1, "max": 64}]}, "hidden": {"my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["pipe", "batch_index", "length"], "hidden": ["my_unique_id"]}, "output": ["PIPE_LINE"], "output_is_list": [false], "output_name": ["pipe"], "name": "easy pipeBatchIndex", "display_name": "Pipe Batch Index", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Pipe", "output_node": false}, "easy XYPlot": {"input": {"required": {"grid_spacing": ["INT", {"min": 0, "max": 500, "step": 5, "default": 0}], "output_individuals": [["False", "True"], {"default": "False"}], "flip_xy": [["False", "True"], {"default": "False"}], "x_axis": [["None", "---------------------", "preSampling: steps", "preSampling: cfg", "preSampling: sampler_name", "preSampling: scheduler", "preSampling: denoise", "preSampling: seed", "---------------------", "loader: ckpt_name", "loader: vae_name", "loader: clip_skip", "loader: lora_name", "loader: lora_model_strength", "loader: lora_clip_strength", "loader: positive", "loader: negative"], {"default": "None"}], "x_values": ["STRING", {"default": "", "multiline": true, "placeholder": "insert values seperated by \"; \""}], "y_axis": [["None", "---------------------", "preSampling: steps", "preSampling: cfg", "preSampling: sampler_name", "preSampling: scheduler", "preSampling: denoise", "preSampling: seed", "---------------------", "loader: ckpt_name", "loader: vae_name", "loader: clip_skip", "loader: lora_name", "loader: lora_model_strength", "loader: lora_clip_strength", "loader: positive", "loader: negative"], {"default": "None"}], "y_values": ["STRING", {"default": "", "multiline": true, "placeholder": "insert values seperated by \"; \""}]}, "optional": {"pipe": ["PIPE_LINE"]}, "hidden": {"plot_dict": [{"steps": {"min": 1, "max": 100, "step": 1}, "cfg": {"min": 0.0, "max": 100.0, "step": 1.0}, "sampler_name": ["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"], "scheduler": ["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"], "denoise": {"min": 0.0, "max": 1.0, "step": 0.01}, "seed": {"min": 0, "max": 1125899906842624}, "ckpt_name": ["3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"], "vae_name": ["Baked-VAE", "4x_foolhardy_Remacri.pth", "ae.safetensors", "sdxl_vae.safetensors"], "clip_skip": {"min": -24, "max": -1, "step": 1}, "lora_name": ["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"], "lora_model_strength": {"min": -4.0, "max": 4.0, "step": 0.01}, "lora_clip_strength": {"min": -4.0, "max": 4.0, "step": 0.01}, "positive": [], "negative": []}]}}, "input_order": {"required": ["grid_spacing", "output_individuals", "flip_xy", "x_axis", "x_values", "y_axis", "y_values"], "optional": ["pipe"], "hidden": ["plot_dict"]}, "output": ["PIPE_LINE"], "output_is_list": [false], "output_name": ["pipe"], "name": "easy XYPlot", "display_name": "XY Plot", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Pipe", "output_node": false}, "easy XYPlotAdvanced": {"input": {"required": {"pipe": ["PIPE_LINE"], "grid_spacing": ["INT", {"min": 0, "max": 500, "step": 5, "default": 0}], "output_individuals": [["False", "True"], {"default": "False"}], "flip_xy": [["False", "True"], {"default": "False"}]}, "optional": {"X": ["X_Y"], "Y": ["X_Y"], "font": [["None"]]}, "hidden": {"my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["pipe", "grid_spacing", "output_individuals", "flip_xy"], "optional": ["X", "Y", "font"], "hidden": ["my_unique_id"]}, "output": ["PIPE_LINE"], "output_is_list": [false], "output_name": ["pipe"], "name": "easy XYPlotAdvanced", "display_name": "XY Plot Advanced", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Pipe", "output_node": false}, "easy XYInputs: Seeds++ Batch": {"input": {"required": {"batch_count": ["INT", {"default": 3, "min": 1, "max": 50}]}}, "input_order": {"required": ["batch_count"]}, "output": ["X_Y"], "output_is_list": [false], "output_name": ["X or Y"], "name": "easy XYInputs: Seeds++ Batch", "display_name": "XY Inputs: Seeds++ Batch //EasyUse", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/XY Inputs", "output_node": false}, "easy XYInputs: Steps": {"input": {"required": {"target_parameter": [["steps", "start_at_step", "end_at_step"]], "batch_count": ["INT", {"default": 3, "min": 0, "max": 50}], "first_step": ["INT", {"default": 10, "min": 1, "max": 10000}], "last_step": ["INT", {"default": 20, "min": 1, "max": 10000}], "first_start_step": ["INT", {"default": 0, "min": 0, "max": 10000}], "last_start_step": ["INT", {"default": 10, "min": 0, "max": 10000}], "first_end_step": ["INT", {"default": 10, "min": 0, "max": 10000}], "last_end_step": ["INT", {"default": 20, "min": 0, "max": 10000}]}}, "input_order": {"required": ["target_parameter", "batch_count", "first_step", "last_step", "first_start_step", "last_start_step", "first_end_step", "last_end_step"]}, "output": ["X_Y"], "output_is_list": [false], "output_name": ["X or Y"], "name": "easy XYInputs: Steps", "display_name": "XY Inputs: Steps //EasyUse", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/XY Inputs", "output_node": false}, "easy XYInputs: CFG Scale": {"input": {"required": {"batch_count": ["INT", {"default": 3, "min": 0, "max": 50}], "first_cfg": ["FLOAT", {"default": 7.0, "min": 0.0, "max": 100.0}], "last_cfg": ["FLOAT", {"default": 9.0, "min": 0.0, "max": 100.0}]}}, "input_order": {"required": ["batch_count", "first_cfg", "last_cfg"]}, "output": ["X_Y"], "output_is_list": [false], "output_name": ["X or Y"], "name": "easy XYInputs: CFG Scale", "display_name": "XY Inputs: CFG Scale //EasyUse", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/XY Inputs", "output_node": false}, "easy XYInputs: FluxGuidance": {"input": {"required": {"batch_count": ["INT", {"default": 3, "min": 0, "max": 50}], "first_guidance": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 100.0}], "last_guidance": ["FLOAT", {"default": 3.5, "min": 0.0, "max": 100.0}]}}, "input_order": {"required": ["batch_count", "first_guidance", "last_guidance"]}, "output": ["X_Y"], "output_is_list": [false], "output_name": ["X or Y"], "name": "easy XYInputs: FluxGuidance", "display_name": "XY Inputs: Flux Guidance //EasyUse", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/XY Inputs", "output_node": false}, "easy XYInputs: Sampler/Scheduler": {"input": {"required": {"target_parameter": [["sampler", "scheduler", "sampler & scheduler"]], "input_count": ["INT", {"default": 1, "min": 1, "max": 30, "step": 1}], "sampler_1": [["None", "euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler_1": [["None", "simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "sampler_2": [["None", "euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler_2": [["None", "simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "sampler_3": [["None", "euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler_3": [["None", "simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "sampler_4": [["None", "euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler_4": [["None", "simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "sampler_5": [["None", "euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler_5": [["None", "simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "sampler_6": [["None", "euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler_6": [["None", "simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "sampler_7": [["None", "euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler_7": [["None", "simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "sampler_8": [["None", "euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler_8": [["None", "simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "sampler_9": [["None", "euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler_9": [["None", "simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "sampler_10": [["None", "euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler_10": [["None", "simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "sampler_11": [["None", "euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler_11": [["None", "simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "sampler_12": [["None", "euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler_12": [["None", "simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "sampler_13": [["None", "euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler_13": [["None", "simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "sampler_14": [["None", "euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler_14": [["None", "simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "sampler_15": [["None", "euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler_15": [["None", "simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "sampler_16": [["None", "euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler_16": [["None", "simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "sampler_17": [["None", "euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler_17": [["None", "simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "sampler_18": [["None", "euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler_18": [["None", "simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "sampler_19": [["None", "euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler_19": [["None", "simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "sampler_20": [["None", "euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler_20": [["None", "simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "sampler_21": [["None", "euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler_21": [["None", "simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "sampler_22": [["None", "euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler_22": [["None", "simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "sampler_23": [["None", "euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler_23": [["None", "simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "sampler_24": [["None", "euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler_24": [["None", "simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "sampler_25": [["None", "euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler_25": [["None", "simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "sampler_26": [["None", "euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler_26": [["None", "simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "sampler_27": [["None", "euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler_27": [["None", "simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "sampler_28": [["None", "euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler_28": [["None", "simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "sampler_29": [["None", "euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler_29": [["None", "simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "sampler_30": [["None", "euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler_30": [["None", "simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]]}}, "input_order": {"required": ["target_parameter", "input_count", "sampler_1", "scheduler_1", "sampler_2", "scheduler_2", "sampler_3", "scheduler_3", "sampler_4", "scheduler_4", "sampler_5", "scheduler_5", "sampler_6", "scheduler_6", "sampler_7", "scheduler_7", "sampler_8", "scheduler_8", "sampler_9", "scheduler_9", "sampler_10", "scheduler_10", "sampler_11", "scheduler_11", "sampler_12", "scheduler_12", "sampler_13", "scheduler_13", "sampler_14", "scheduler_14", "sampler_15", "scheduler_15", "sampler_16", "scheduler_16", "sampler_17", "scheduler_17", "sampler_18", "scheduler_18", "sampler_19", "scheduler_19", "sampler_20", "scheduler_20", "sampler_21", "scheduler_21", "sampler_22", "scheduler_22", "sampler_23", "scheduler_23", "sampler_24", "scheduler_24", "sampler_25", "scheduler_25", "sampler_26", "scheduler_26", "sampler_27", "scheduler_27", "sampler_28", "scheduler_28", "sampler_29", "scheduler_29", "sampler_30", "scheduler_30"]}, "output": ["X_Y"], "output_is_list": [false], "output_name": ["X or Y"], "name": "easy XYInputs: Sampler/Scheduler", "display_name": "XY Inputs: Sampler/Scheduler //EasyUse", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/XY Inputs", "output_node": false}, "easy XYInputs: Denoise": {"input": {"required": {"batch_count": ["INT", {"default": 3, "min": 0, "max": 50}], "first_denoise": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 1.0, "step": 0.1}], "last_denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.1}]}}, "input_order": {"required": ["batch_count", "first_denoise", "last_denoise"]}, "output": ["X_Y"], "output_is_list": [false], "output_name": ["X or Y"], "name": "easy XYInputs: Denoise", "display_name": "XY Inputs: Denoise //EasyUse", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/XY Inputs", "output_node": false}, "easy XYInputs: Checkpoint": {"input": {"required": {"input_mode": [["Ckpt Names", "Ckpt Names+ClipSkip", "Ckpt Names+ClipSkip+VAE"]], "ckpt_count": ["INT", {"default": 3, "min": 0, "max": 10, "step": 1}], "ckpt_name_1": [["None", "3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"]], "clip_skip_1": ["INT", {"default": -1, "min": -24, "max": -1, "step": 1}], "vae_name_1": [["Baked VAE", "4x_foolhardy_Remacri.pth", "ae.safetensors", "sdxl_vae.safetensors"]], "ckpt_name_2": [["None", "3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"]], "clip_skip_2": ["INT", {"default": -1, "min": -24, "max": -1, "step": 1}], "vae_name_2": [["Baked VAE", "4x_foolhardy_Remacri.pth", "ae.safetensors", "sdxl_vae.safetensors"]], "ckpt_name_3": [["None", "3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"]], "clip_skip_3": ["INT", {"default": -1, "min": -24, "max": -1, "step": 1}], "vae_name_3": [["Baked VAE", "4x_foolhardy_Remacri.pth", "ae.safetensors", "sdxl_vae.safetensors"]], "ckpt_name_4": [["None", "3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"]], "clip_skip_4": ["INT", {"default": -1, "min": -24, "max": -1, "step": 1}], "vae_name_4": [["Baked VAE", "4x_foolhardy_Remacri.pth", "ae.safetensors", "sdxl_vae.safetensors"]], "ckpt_name_5": [["None", "3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"]], "clip_skip_5": ["INT", {"default": -1, "min": -24, "max": -1, "step": 1}], "vae_name_5": [["Baked VAE", "4x_foolhardy_Remacri.pth", "ae.safetensors", "sdxl_vae.safetensors"]], "ckpt_name_6": [["None", "3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"]], "clip_skip_6": ["INT", {"default": -1, "min": -24, "max": -1, "step": 1}], "vae_name_6": [["Baked VAE", "4x_foolhardy_Remacri.pth", "ae.safetensors", "sdxl_vae.safetensors"]], "ckpt_name_7": [["None", "3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"]], "clip_skip_7": ["INT", {"default": -1, "min": -24, "max": -1, "step": 1}], "vae_name_7": [["Baked VAE", "4x_foolhardy_Remacri.pth", "ae.safetensors", "sdxl_vae.safetensors"]], "ckpt_name_8": [["None", "3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"]], "clip_skip_8": ["INT", {"default": -1, "min": -24, "max": -1, "step": 1}], "vae_name_8": [["Baked VAE", "4x_foolhardy_Remacri.pth", "ae.safetensors", "sdxl_vae.safetensors"]], "ckpt_name_9": [["None", "3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"]], "clip_skip_9": ["INT", {"default": -1, "min": -24, "max": -1, "step": 1}], "vae_name_9": [["Baked VAE", "4x_foolhardy_Remacri.pth", "ae.safetensors", "sdxl_vae.safetensors"]], "ckpt_name_10": [["None", "3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"]], "clip_skip_10": ["INT", {"default": -1, "min": -24, "max": -1, "step": 1}], "vae_name_10": [["Baked VAE", "4x_foolhardy_Remacri.pth", "ae.safetensors", "sdxl_vae.safetensors"]]}, "optional": {"optional_lora_stack": ["LORA_STACK"]}}, "input_order": {"required": ["input_mode", "ckpt_count", "ckpt_name_1", "clip_skip_1", "vae_name_1", "ckpt_name_2", "clip_skip_2", "vae_name_2", "ckpt_name_3", "clip_skip_3", "vae_name_3", "ckpt_name_4", "clip_skip_4", "vae_name_4", "ckpt_name_5", "clip_skip_5", "vae_name_5", "ckpt_name_6", "clip_skip_6", "vae_name_6", "ckpt_name_7", "clip_skip_7", "vae_name_7", "ckpt_name_8", "clip_skip_8", "vae_name_8", "ckpt_name_9", "clip_skip_9", "vae_name_9", "ckpt_name_10", "clip_skip_10", "vae_name_10"], "optional": ["optional_lora_stack"]}, "output": ["X_Y"], "output_is_list": [false], "output_name": ["X or Y"], "name": "easy XYInputs: Checkpoint", "display_name": "XY Inputs: Checkpoint //EasyUse", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/XY Inputs", "output_node": false}, "easy XYInputs: Lora": {"input": {"required": {"input_mode": [["Lora Names", "Lora Names+Weights"]], "lora_count": ["INT", {"default": 3, "min": 0, "max": 10, "step": 1}], "model_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "clip_strength": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_name_1": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "model_str_1": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "clip_str_1": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_name_2": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "model_str_2": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "clip_str_2": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_name_3": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "model_str_3": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "clip_str_3": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_name_4": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "model_str_4": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "clip_str_4": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_name_5": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "model_str_5": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "clip_str_5": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_name_6": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "model_str_6": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "clip_str_6": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_name_7": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "model_str_7": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "clip_str_7": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_name_8": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "model_str_8": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "clip_str_8": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_name_9": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "model_str_9": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "clip_str_9": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_name_10": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "model_str_10": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "clip_str_10": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}]}, "optional": {"optional_lora_stack": ["LORA_STACK"], "display_trigger_word": ["BOOLEAN", {"display_trigger_word": true, "tooltip": "Trigger words showing lora model pass through the model's metadata, but not necessarily accurately."}]}}, "input_order": {"required": ["input_mode", "lora_count", "model_strength", "clip_strength", "lora_name_1", "model_str_1", "clip_str_1", "lora_name_2", "model_str_2", "clip_str_2", "lora_name_3", "model_str_3", "clip_str_3", "lora_name_4", "model_str_4", "clip_str_4", "lora_name_5", "model_str_5", "clip_str_5", "lora_name_6", "model_str_6", "clip_str_6", "lora_name_7", "model_str_7", "clip_str_7", "lora_name_8", "model_str_8", "clip_str_8", "lora_name_9", "model_str_9", "clip_str_9", "lora_name_10", "model_str_10", "clip_str_10"], "optional": ["optional_lora_stack", "display_trigger_word"]}, "output": ["X_Y"], "output_is_list": [false], "output_name": ["X or Y"], "name": "easy XYInputs: Lora", "display_name": "XY Inputs: Lora //EasyUse", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/XY Inputs", "output_node": false}, "easy XYInputs: ModelMergeBlocks": {"input": {"required": {"ckpt_name_1": [["3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"]], "ckpt_name_2": [["3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"]], "vae_use": [["Use Model 1", "Use Model 2", "4x_foolhardy_Remacri.pth", "ae.safetensors", "sdxl_vae.safetensors"], {"default": "Use Model 1"}], "preset": [["Preset", "MMB-ALL:1,1,1", "MMB-IN:1,0,0", "MMB-MID:0,1,0", "MMB-OUT:0,0,1", "MMB-INMID:1,1,0", "MMB-INOUT:1,0,1", "MMB-MIDOUT:0,1,1", "MMB-NONE:0,0,0", "@MMBN-FULL-TEST:27"], {"default": "preset"}], "values": ["STRING", {"default": "1,0,0; \n0,1,0; \n0,0,1; \n1,1,0; \n1,0,1; \n0,1,1; ", "multiline": true, "placeholder": "Support 2 methods:\n\n1.input, middle, out in same line and insert values seperated by \"; \"\n\n2.model merge block number seperated by \", \" in same line and insert values seperated by \"; \""}]}, "hidden": {"my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["ckpt_name_1", "ckpt_name_2", "vae_use", "preset", "values"], "hidden": ["my_unique_id"]}, "output": ["X_Y"], "output_is_list": [false], "output_name": ["X or Y"], "name": "easy XYInputs: ModelMergeBlocks", "display_name": "XY Inputs: ModelMergeBlocks //EasyUse", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/XY Inputs", "output_node": false}, "easy XYInputs: PromptSR": {"input": {"required": {"target_prompt": [["positive", "negative"]], "search_txt": ["STRING", {"default": "", "multiline": false}], "replace_all_text": ["BOOLEAN", {"default": false}], "replace_count": ["INT", {"default": 3, "min": 1, "max": 29}], "replace_1": ["STRING", {"default": "", "multiline": false, "placeholder": "replace_1"}], "replace_2": ["STRING", {"default": "", "multiline": false, "placeholder": "replace_2"}], "replace_3": ["STRING", {"default": "", "multiline": false, "placeholder": "replace_3"}], "replace_4": ["STRING", {"default": "", "multiline": false, "placeholder": "replace_4"}], "replace_5": ["STRING", {"default": "", "multiline": false, "placeholder": "replace_5"}], "replace_6": ["STRING", {"default": "", "multiline": false, "placeholder": "replace_6"}], "replace_7": ["STRING", {"default": "", "multiline": false, "placeholder": "replace_7"}], "replace_8": ["STRING", {"default": "", "multiline": false, "placeholder": "replace_8"}], "replace_9": ["STRING", {"default": "", "multiline": false, "placeholder": "replace_9"}], "replace_10": ["STRING", {"default": "", "multiline": false, "placeholder": "replace_10"}], "replace_11": ["STRING", {"default": "", "multiline": false, "placeholder": "replace_11"}], "replace_12": ["STRING", {"default": "", "multiline": false, "placeholder": "replace_12"}], "replace_13": ["STRING", {"default": "", "multiline": false, "placeholder": "replace_13"}], "replace_14": ["STRING", {"default": "", "multiline": false, "placeholder": "replace_14"}], "replace_15": ["STRING", {"default": "", "multiline": false, "placeholder": "replace_15"}], "replace_16": ["STRING", {"default": "", "multiline": false, "placeholder": "replace_16"}], "replace_17": ["STRING", {"default": "", "multiline": false, "placeholder": "replace_17"}], "replace_18": ["STRING", {"default": "", "multiline": false, "placeholder": "replace_18"}], "replace_19": ["STRING", {"default": "", "multiline": false, "placeholder": "replace_19"}], "replace_20": ["STRING", {"default": "", "multiline": false, "placeholder": "replace_20"}], "replace_21": ["STRING", {"default": "", "multiline": false, "placeholder": "replace_21"}], "replace_22": ["STRING", {"default": "", "multiline": false, "placeholder": "replace_22"}], "replace_23": ["STRING", {"default": "", "multiline": false, "placeholder": "replace_23"}], "replace_24": ["STRING", {"default": "", "multiline": false, "placeholder": "replace_24"}], "replace_25": ["STRING", {"default": "", "multiline": false, "placeholder": "replace_25"}], "replace_26": ["STRING", {"default": "", "multiline": false, "placeholder": "replace_26"}], "replace_27": ["STRING", {"default": "", "multiline": false, "placeholder": "replace_27"}], "replace_28": ["STRING", {"default": "", "multiline": false, "placeholder": "replace_28"}], "replace_29": ["STRING", {"default": "", "multiline": false, "placeholder": "replace_29"}]}}, "input_order": {"required": ["target_prompt", "search_txt", "replace_all_text", "replace_count", "replace_1", "replace_2", "replace_3", "replace_4", "replace_5", "replace_6", "replace_7", "replace_8", "replace_9", "replace_10", "replace_11", "replace_12", "replace_13", "replace_14", "replace_15", "replace_16", "replace_17", "replace_18", "replace_19", "replace_20", "replace_21", "replace_22", "replace_23", "replace_24", "replace_25", "replace_26", "replace_27", "replace_28", "replace_29"]}, "output": ["X_Y"], "output_is_list": [false], "output_name": ["X or Y"], "name": "easy XYInputs: PromptSR", "display_name": "XY Inputs: PromptSR //EasyUse", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/XY Inputs", "output_node": false}, "easy XYInputs: ControlNet": {"input": {"required": {"control_net_name": [["control_v11p_sd15_scribble_fp16.safetensors", "ttplanetSDXLControlnet_v20Fp16.safetensors"]], "image": ["IMAGE"], "target_parameter": [["strength", "start_percent", "end_percent"]], "batch_count": ["INT", {"default": 3, "min": 1, "max": 30}], "first_strength": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 10.0, "step": 0.01}], "last_strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}], "first_start_percent": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.01}], "last_start_percent": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "first_end_percent": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.01}], "last_end_percent": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}], "start_percent": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.01}], "end_percent": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["control_net_name", "image", "target_parameter", "batch_count", "first_strength", "last_strength", "first_start_percent", "last_start_percent", "first_end_percent", "last_end_percent", "strength", "start_percent", "end_percent"]}, "output": ["X_Y"], "output_is_list": [false], "output_name": ["X or Y"], "name": "easy XYInputs: ControlNet", "display_name": "XY Inputs: Controlnet //EasyUse", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/XY Inputs", "output_node": false}, "easy XYInputs: PositiveCond": {"input": {"optional": {"positive_1": ["CONDITIONING"], "positive_2": ["CONDITIONING"], "positive_3": ["CONDITIONING"], "positive_4": ["CONDITIONING"]}}, "input_order": {"optional": ["positive_1", "positive_2", "positive_3", "positive_4"]}, "output": ["X_Y"], "output_is_list": [false], "output_name": ["X or Y"], "name": "easy XYInputs: PositiveCond", "display_name": "XY Inputs: PosCond //EasyUse", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/XY Inputs", "output_node": false}, "easy XYInputs: PositiveCondList": {"input": {"required": {"positive": ["CONDITIONING"]}}, "input_order": {"required": ["positive"]}, "output": ["X_Y"], "output_is_list": [false], "output_name": ["X or Y"], "name": "easy XYInputs: PositiveCondList", "display_name": "XY Inputs: PosCondList //EasyUse", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/XY Inputs", "output_node": false}, "easy XYInputs: NegativeCond": {"input": {"optional": {"negative_1": ["CONDITIONING"], "negative_2": ["CONDITIONING"], "negative_3": ["CONDITIONING"], "negative_4": ["CONDITIONING"]}}, "input_order": {"optional": ["negative_1", "negative_2", "negative_3", "negative_4"]}, "output": ["X_Y"], "output_is_list": [false], "output_name": ["X or Y"], "name": "easy XYInputs: NegativeCond", "display_name": "XY Inputs: NegCond //EasyUse", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/XY Inputs", "output_node": false}, "easy XYInputs: NegativeCondList": {"input": {"required": {"negative": ["CONDITIONING"]}}, "input_order": {"required": ["negative"]}, "output": ["X_Y"], "output_is_list": [false], "output_name": ["X or Y"], "name": "easy XYInputs: NegativeCondList", "display_name": "XY Inputs: NegCondList //EasyUse", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/XY Inputs", "output_node": false}, "easy imageInsetCrop": {"input": {"required": {"image": ["IMAGE"], "measurement": [["Pixels", "Percentage"]], "left": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 8}], "right": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 8}], "top": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 8}], "bottom": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 8}]}}, "input_order": {"required": ["image", "measurement", "left", "right", "top", "bottom"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "easy imageInsetCrop", "display_name": "ImageInsetCrop", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": false}, "easy imageCount": {"input": {"required": {"images": ["IMAGE"]}}, "input_order": {"required": ["images"]}, "output": ["INT"], "output_is_list": [false], "output_name": ["count"], "name": "easy imageCount", "display_name": "ImageCount", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": false}, "easy imagesCountInDirectory": {"input": {"required": {"directory": ["STRING"], "start_index": ["INT", {"default": 0, "min": 0, "step": 1}], "limit": ["INT", {"default": -1, "min": -1, "max": 10000}]}}, "input_order": {"required": ["directory", "start_index", "limit"]}, "output": ["INT"], "output_is_list": [false], "output_name": ["count"], "name": "easy imagesCountInDirectory", "display_name": "imagesCountInDirectory", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": false}, "easy imageSize": {"input": {"required": {"image": ["IMAGE"]}}, "input_order": {"required": ["image"]}, "output": ["INT", "INT"], "output_is_list": [false, false], "output_name": ["width_int", "height_int"], "name": "easy imageSize", "display_name": "ImageSize", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": true}, "easy imageSizeBySide": {"input": {"required": {"image": ["IMAGE"], "side": [["Longest", "Shortest"]]}}, "input_order": {"required": ["image", "side"]}, "output": ["INT"], "output_is_list": [false], "output_name": ["resolution"], "name": "easy imageSizeBySide", "display_name": "ImageSize (Side)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": true}, "easy imageSizeByLongerSide": {"input": {"required": {"image": ["IMAGE"]}}, "input_order": {"required": ["image"]}, "output": ["INT"], "output_is_list": [false], "output_name": ["resolution"], "name": "easy imageSizeByLongerSide", "display_name": "ImageSize (LongerSide)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": true}, "easy imagePixelPerfect": {"input": {"required": {"image": ["IMAGE"], "resize_mode": [["Just Resize", "Crop and Resize", "Resize and Fill"], {"default": "Just Resize"}]}}, "input_order": {"required": ["image", "resize_mode"]}, "output": ["INT"], "output_is_list": [false], "output_name": ["resolution"], "name": "easy imagePixelPerfect", "display_name": "ImagePixelPerfect", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": true}, "easy imageScaleDown": {"input": {"required": {"images": ["IMAGE"], "width": ["INT", {"default": 512, "min": 1, "max": 16384, "step": 1}], "height": ["INT", {"default": 512, "min": 1, "max": 16384, "step": 1}], "crop": [["disabled", "center"]]}}, "input_order": {"required": ["images", "width", "height", "crop"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "easy imageScaleDown", "display_name": "Image Scale Down", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": false}, "easy imageScaleDownBy": {"input": {"required": {"images": ["IMAGE"], "scale_by": ["FLOAT", {"default": 0.5, "min": 0.01, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["images", "scale_by"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "easy imageScaleDownBy", "display_name": "Image Scale Down By", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": false}, "easy imageScaleDownToSize": {"input": {"required": {"images": ["IMAGE"], "size": ["INT", {"default": 512, "min": 1, "max": 16384, "step": 1}], "mode": ["BOOLEAN", {"default": true, "label_on": "max", "label_off": "min"}]}}, "input_order": {"required": ["images", "size", "mode"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "easy imageScaleDownToSize", "display_name": "Image Scale Down To Size", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": false}, "easy imageScaleToNormPixels": {"input": {"required": {"image": ["IMAGE"], "upscale_method": [["nearest-exact", "bilinear", "area", "bicubic", "lanczos"]], "scale_by": ["FLOAT", {"default": 1.0, "min": 0.01, "max": 8.0, "step": 0.01}]}}, "input_order": {"required": ["image", "upscale_method", "scale_by"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["image"], "name": "easy imageScaleToNormPixels", "display_name": "ImageScaleToNormPixels", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": false}, "easy imageRatio": {"input": {"required": {"image": ["IMAGE"]}}, "input_order": {"required": ["image"]}, "output": ["INT", "INT", "FLOAT", "FLOAT"], "output_is_list": [false, false, false, false], "output_name": ["width_ratio_int", "height_ratio_int", "width_ratio_float", "height_ratio_float"], "name": "easy imageRatio", "display_name": "ImageRatio", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": true}, "easy imageConcat": {"input": {"required": {"image1": ["IMAGE"], "image2": ["IMAGE"], "direction": [["right", "down", "left", "up"], {"default": "right"}], "match_image_size": ["BOOLEAN", {"default": false}]}}, "input_order": {"required": ["image1", "image2", "direction", "match_image_size"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "easy imageConcat", "display_name": "imageConcat", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": false}, "easy imageListToImageBatch": {"input": {"required": {"images": ["IMAGE"]}}, "input_order": {"required": ["images"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "easy imageListToImageBatch", "display_name": "Image List To Image Batch", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": false}, "easy imageBatchToImageList": {"input": {"required": {"image": ["IMAGE"]}}, "input_order": {"required": ["image"]}, "output": ["IMAGE"], "output_is_list": [true], "output_name": ["IMAGE"], "name": "easy imageBatchToImageList", "display_name": "Image Batch To Image List", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": false}, "easy imageSplitList": {"input": {"required": {"images": ["IMAGE"]}}, "input_order": {"required": ["images"]}, "output": ["IMAGE", "IMAGE", "IMAGE"], "output_is_list": [false, false, false], "output_name": ["images", "images", "images"], "name": "easy imageSplitList", "display_name": "imageSplitList", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": false}, "easy imageSplitGrid": {"input": {"required": {"images": ["IMAGE"], "row": ["INT", {"default": 1, "min": 1, "max": 10, "step": 1}], "column": ["INT", {"default": 1, "min": 1, "max": 10, "step": 1}]}}, "input_order": {"required": ["images", "row", "column"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["images"], "name": "easy imageSplitGrid", "display_name": "imageSplitGrid", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": false}, "easy imagesSplitImage": {"input": {"required": {"images": ["IMAGE"]}}, "input_order": {"required": ["images"]}, "output": ["IMAGE", "IMAGE", "IMAGE", "IMAGE", "IMAGE"], "output_is_list": [false, false, false, false, false], "output_name": ["image1", "image2", "image3", "image4", "image5"], "name": "easy imagesSplitImage", "display_name": "imagesSplitImage", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": false}, "easy imageSplitTiles": {"input": {"required": {"image": ["IMAGE"], "overlap_ratio": ["FLOAT", {"default": 0, "min": 0, "max": 0.5, "step": 0.01}], "overlap_offset": ["INT", {"default": 0, "min": -8192, "max": 8192, "step": 1}], "tiles_rows": ["INT", {"default": 2, "min": 1, "max": 50, "step": 1}], "tiles_cols": ["INT", {"default": 2, "min": 1, "max": 50, "step": 1}]}, "optional": {"norm": ["BOOLEAN", {"default": true}]}}, "input_order": {"required": ["image", "overlap_ratio", "overlap_offset", "tiles_rows", "tiles_cols"], "optional": ["norm"]}, "output": ["IMAGE", "MASK", "OVERLAP", "INT"], "output_is_list": [false, false, false, false], "output_name": ["tiles", "masks", "overlap", "total"], "name": "easy imageSplitTiles", "display_name": "imageSplitTiles", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": false}, "easy imageTilesFromBatch": {"input": {"required": {"tiles": ["IMAGE"], "masks": ["MASK"], "overlap": ["OVERLAP"], "index": ["INT", {"default": 0, "min": 0, "max": 10000, "step": 1}]}}, "input_order": {"required": ["tiles", "masks", "overlap", "index"]}, "output": ["IMAGE", "MASK", "INT", "INT"], "output_is_list": [false, false, false, false], "output_name": ["image", "mask", "x", "y"], "name": "easy imageTilesFromBatch", "display_name": "imageTilesFromBatch", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": false}, "easy imageCropFromMask": {"input": {"required": {"image": ["IMAGE"], "mask": ["MASK"], "image_crop_multi": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.001}], "mask_crop_multi": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.001}], "bbox_smooth_alpha": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["image", "mask", "image_crop_multi", "mask_crop_multi", "bbox_smooth_alpha"]}, "output": ["IMAGE", "MASK", "BBOX"], "output_is_list": [false, false, false], "output_name": ["crop_image", "crop_mask", "bbox"], "name": "easy imageCropFromMask", "display_name": "imageCropFromMask", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": false}, "easy imageUncropFromBBOX": {"input": {"required": {"original_image": ["IMAGE"], "crop_image": ["IMAGE"], "bbox": ["BBOX"], "border_blending": ["FLOAT", {"default": 0.25, "min": 0.0, "max": 1.0, "step": 0.01}], "use_square_mask": ["BOOLEAN", {"default": true}]}, "optional": {"optional_mask": ["MASK"]}}, "input_order": {"required": ["original_image", "crop_image", "bbox", "border_blending", "use_square_mask"], "optional": ["optional_mask"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["image"], "name": "easy imageUncropFromBBOX", "display_name": "imageUncropFromBBOX", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": false}, "easy imageSave": {"input": {"required": {"images": ["IMAGE"], "filename_prefix": ["STRING", {"default": "ComfyUI"}], "only_preview": ["BOOLEAN", {"default": false}]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["images", "filename_prefix", "only_preview"], "hidden": ["prompt", "extra_pnginfo"]}, "output": [], "output_is_list": [], "output_name": [], "name": "easy imageSave", "display_name": "Save Image (Simple)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": true}, "easy imageRemBg": {"input": {"required": {"images": ["IMAGE"], "rem_mode": [["RMBG-2.0", "RMBG-1.4", "Inspyrenet", "BEN2"], {"default": "RMBG-1.4"}], "image_output": [["Hide", "Preview", "Save", "Hide/Save"], {"default": "Preview"}], "save_prefix": ["STRING", {"default": "ComfyUI"}]}, "optional": {"torchscript_jit": ["BOOLEAN", {"default": false}], "add_background": [["none", "white", "black"], {"default": "none"}], "refine_foreground": ["BOOLEAN", {"default": false}]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["images", "rem_mode", "image_output", "save_prefix"], "optional": ["torchscript_jit", "add_background", "refine_foreground"], "hidden": ["prompt", "extra_pnginfo"]}, "output": ["IMAGE", "MASK"], "output_is_list": [false, false], "output_name": ["image", "mask"], "name": "easy imageRemBg", "display_name": "Image Remove Bg", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": true}, "easy imageChooser": {"input": {"required": {"mode": [["Always Pause", "Keep Last Selection"], {"default": "Always Pause"}]}, "optional": {"images": ["IMAGE"]}, "hidden": {"prompt": "PROMPT", "my_unique_id": "UNIQUE_ID", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["mode"], "optional": ["images"], "hidden": ["prompt", "my_unique_id", "extra_pnginfo"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["image"], "name": "easy imageChooser", "display_name": "Image Chooser", "description": "Saves the input images to your ComfyUI output directory.", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": true}, "easy imageColorMatch": {"input": {"required": {"image_ref": ["IMAGE"], "image_target": ["IMAGE"], "method": [["wavelet", "adain", "mkl", "hm", "reinhard", "mvgd", "hm-mvgd-hm", "hm-mkl-hm"]], "image_output": [["Hide", "Preview", "Save", "Hide/Save"], {"default": "Preview"}], "save_prefix": ["STRING", {"default": "ComfyUI"}]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["image_ref", "image_target", "method", "image_output", "save_prefix"], "hidden": ["prompt", "extra_pnginfo"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["image"], "name": "easy imageColorMatch", "display_name": "Image Color Match", "description": "Saves the input images to your ComfyUI output directory.", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": true}, "easy imageDetailTransfer": {"input": {"required": {"target": ["IMAGE"], "source": ["IMAGE"], "mode": [["add", "multiply", "screen", "overlay", "soft_light", "hard_light", "color_dodge", "color_burn", "difference", "exclusion", "divide"], {"default": "add"}], "blur_sigma": ["FLOAT", {"default": 1.0, "min": 0.1, "max": 100.0, "step": 0.01}], "blend_factor": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.001, "round": 0.001}], "image_output": [["Hide", "Preview", "Save", "Hide/Save"], {"default": "Preview"}], "save_prefix": ["STRING", {"default": "ComfyUI"}]}, "optional": {"mask": ["MASK"]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["target", "source", "mode", "blur_sigma", "blend_factor", "image_output", "save_prefix"], "optional": ["mask"], "hidden": ["prompt", "extra_pnginfo"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["image"], "name": "easy imageDetailTransfer", "display_name": "Image Detail Transfer", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": true}, "easy imageInterrogator": {"input": {"required": {"image": ["IMAGE"], "mode": [["fast", "classic", "best", "negative"]], "use_lowvram": ["BOOLEAN", {"default": true}]}}, "input_order": {"required": ["image", "mode", "use_lowvram"]}, "output": ["STRING"], "output_is_list": [true], "output_name": ["prompt"], "name": "easy imageInterrogator", "display_name": "Image To Prompt", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": false}, "easy loadImagesForLoop": {"input": {"required": {"directory": ["STRING", {"default": ""}]}, "optional": {"start_index": ["INT", {"default": 0, "min": 0, "step": 1}], "limit": ["INT", {"default": -1, "min": -1, "max": 10000}], "initial_value1": ["*"], "initial_value2": ["*"]}, "hidden": {"initial_value0": ["*"], "prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["directory"], "optional": ["start_index", "limit", "initial_value1", "initial_value2"], "hidden": ["initial_value0", "prompt", "extra_pnginfo", "unique_id"]}, "output": ["FLOW_CONTROL", "INT", "IMAGE", "MASK", "STRING", "*", "*"], "output_is_list": [false, false, false, false, false, false, false], "output_name": ["flow", "index", "image", "mask", "name", "value1", "value2"], "name": "easy loadImagesForLoop", "display_name": "Load Images For Loop", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "image", "output_node": false}, "easy loadImageBase64": {"input": {"required": {"base64_data": ["STRING", {"default": ""}], "image_output": [["Hide", "Preview", "Save", "Hide/Save"], {"default": "Preview"}], "save_prefix": ["STRING", {"default": "ComfyUI"}]}, "optional": {}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["base64_data", "image_output", "save_prefix"], "optional": [], "hidden": ["prompt", "extra_pnginfo"]}, "output": ["IMAGE", "MASK"], "output_is_list": [false, false], "output_name": ["IMAGE", "MASK"], "name": "easy loadImageBase64", "display_name": "Load Image (Base64)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image/LoadImage", "output_node": true}, "easy imageToBase64": {"input": {"required": {"image": ["IMAGE"]}}, "input_order": {"required": ["image"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["STRING"], "name": "easy imageToBase64", "display_name": "Image To Base64", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": true}, "easy joinImageBatch": {"input": {"required": {"images": ["IMAGE"], "mode": [["horizontal", "vertical"], {"default": "horizontal"}]}}, "input_order": {"required": ["images", "mode"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["image"], "name": "easy joinImageBatch", "display_name": "JoinImageBatch", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": false}, "easy humanSegmentation": {"input": {"required": {"image": ["IMAGE"], "method": [["selfie_multiclass_256x256", "human_parsing_lip", "human_parts (deeplabv3p)", "segformer_b3_clothes", "segformer_b3_fashion", "face_parsing"]], "confidence": ["FLOAT", {"default": 0.4, "min": 0.05, "max": 0.95, "step": 0.01}], "crop_multi": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 10.0, "step": 0.001}], "mask_components": ["EASY_COMBO", {"options": [{"label": "Background", "value": 0}], "multi_select": {"placeholder": "select mask components", "chip": true, "max_selected_labels": 4}}]}, "hidden": {"prompt": "PROMPT", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["image", "method", "confidence", "crop_multi", "mask_components"], "hidden": ["prompt", "my_unique_id"]}, "output": ["IMAGE", "MASK", "BBOX"], "output_is_list": [false, false, false], "output_name": ["image", "mask", "bbox"], "name": "easy humanSegmentation", "display_name": "Human Segmentation", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Segmentation", "output_node": false}, "easy removeLocalImage": {"input": {"required": {"any": ["*"], "file_name": ["STRING", {"default": ""}]}}, "input_order": {"required": ["any", "file_name"]}, "output": [], "output_is_list": [], "output_name": [], "name": "easy removeLocalImage", "display_name": "Remove Local Image", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": true}, "easy makeImageForICLora": {"input": {"required": {"image_1": ["IMAGE"], "direction": [["top-bottom", "left-right"], {"default": "left-right"}], "pixels": ["INT", {"default": 0, "max": 16384, "min": 0, "step": 8, "tooltip": "The pixel of the output image is not set when it is 0"}], "method": [["uniform height", "uniform width", "auto"], {"default": "auto"}]}, "optional": {"image_2": ["IMAGE"], "mask_1": ["MASK"], "mask_2": ["MASK"]}}, "input_order": {"required": ["image_1", "direction", "pixels", "method"], "optional": ["image_2", "mask_1", "mask_2"]}, "output": ["IMAGE", "MASK", "MASK", "INT", "INT", "INT", "INT"], "output_is_list": [false, false, false, false, false, false, false], "output_name": ["image", "mask", "context_mask", "width", "height", "x", "y"], "name": "easy makeImageForICLora", "display_name": "Make Image For ICLora", "description": "make Image for ICLora to Re-paint", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Image", "output_node": false}, "easy string": {"input": {"required": {"value": ["STRING", {"default": ""}]}}, "input_order": {"required": ["value"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["string"], "name": "easy string", "display_name": "String", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic/Type", "output_node": false}, "easy int": {"input": {"required": {"value": ["INT", {"default": 0, "min": -999999, "max": 999999}]}}, "input_order": {"required": ["value"]}, "output": ["INT"], "output_is_list": [false], "output_name": ["int"], "name": "easy int", "display_name": "Int", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic/Type", "output_node": false}, "easy rangeInt": {"input": {"required": {"range_mode": [["step", "num_steps"], {"default": "step"}], "start": ["INT", {"default": 0, "min": -4096, "max": 4096, "step": 1}], "stop": ["INT", {"default": 0, "min": -4096, "max": 4096, "step": 1}], "step": ["INT", {"default": 0, "min": -4096, "max": 4096, "step": 1}], "num_steps": ["INT", {"default": 0, "min": -4096, "max": 4096, "step": 1}], "end_mode": [["Inclusive", "Exclusive"], {"default": "Inclusive"}]}}, "input_order": {"required": ["range_mode", "start", "stop", "step", "num_steps", "end_mode"]}, "output": ["INT", "INT"], "output_is_list": [true, true], "output_name": ["range", "range_sizes"], "name": "easy rangeInt", "display_name": "Range(Int)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic/Type", "output_node": false}, "easy float": {"input": {"required": {"value": ["FLOAT", {"default": 0, "step": 0.01, "min": -18446744073709551615, "max": 18446744073709551615}]}}, "input_order": {"required": ["value"]}, "output": ["FLOAT"], "output_is_list": [false], "output_name": ["float"], "name": "easy float", "display_name": "Float", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic/Type", "output_node": false}, "easy rangeFloat": {"input": {"required": {"range_mode": [["step", "num_steps"], {"default": "step"}], "start": ["FLOAT", {"default": 0, "min": -4096, "max": 4096, "step": 0.1}], "stop": ["FLOAT", {"default": 0, "min": -4096, "max": 4096, "step": 0.1}], "step": ["FLOAT", {"default": 0, "min": -4096, "max": 4096, "step": 0.1}], "num_steps": ["INT", {"default": 0, "min": -4096, "max": 4096, "step": 1}], "end_mode": [["Inclusive", "Exclusive"], {"default": "Inclusive"}]}}, "input_order": {"required": ["range_mode", "start", "stop", "step", "num_steps", "end_mode"]}, "output": ["FLOAT", "INT"], "output_is_list": [true, true], "output_name": ["range", "range_sizes"], "name": "easy rangeFloat", "display_name": "Range(Float)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic/Type", "output_node": false}, "easy boolean": {"input": {"required": {"value": ["BOOLEAN", {"default": false}]}}, "input_order": {"required": ["value"]}, "output": ["BOOLEAN"], "output_is_list": [false], "output_name": ["boolean"], "name": "easy boolean", "display_name": "Boolean", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic/Type", "output_node": false}, "easy mathString": {"input": {"required": {"a": ["STRING", {"multiline": false}], "b": ["STRING", {"multiline": false}], "operation": [["a == b", "a != b", "a IN b", "a MATCH REGEX(b)", "a BEGINSWITH b", "a ENDSWITH b"]], "case_sensitive": ["BOOLEAN", {"default": true}]}}, "input_order": {"required": ["a", "b", "operation", "case_sensitive"]}, "output": ["BOOLEAN"], "output_is_list": [false], "output_name": ["BOOLEAN"], "name": "easy mathString", "display_name": "Math String", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic/Math", "output_node": false}, "easy mathInt": {"input": {"required": {"a": ["INT", {"default": 0, "min": -18446744073709551615, "max": 18446744073709551615, "step": 1}], "b": ["INT", {"default": 0, "min": -18446744073709551615, "max": 18446744073709551615, "step": 1}], "operation": [["add", "subtract", "multiply", "divide", "modulo", "power"]]}}, "input_order": {"required": ["a", "b", "operation"]}, "output": ["INT"], "output_is_list": [false], "output_name": ["INT"], "name": "easy mathInt", "display_name": "Math Int", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic/Math", "output_node": false}, "easy mathFloat": {"input": {"required": {"a": ["FLOAT", {"default": 0, "min": -999999999999.0, "max": 999999999999.0, "step": 0.01}], "b": ["FLOAT", {"default": 0, "min": -999999999999.0, "max": 999999999999.0, "step": 0.01}], "operation": [["add", "subtract", "multiply", "divide", "modulo", "power"]]}}, "input_order": {"required": ["a", "b", "operation"]}, "output": ["FLOAT"], "output_is_list": [false], "output_name": ["FLOAT"], "name": "easy mathFloat", "display_name": "Math Float", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic/Math", "output_node": false}, "easy compare": {"input": {"required": {"a": ["*", {"default": 0}], "b": ["*", {"default": 0}], "comparison": [["a == b", "a != b", "a < b", "a > b", "a <= b", "a >= b"], {"default": "a == b"}]}}, "input_order": {"required": ["a", "b", "comparison"]}, "output": ["BOOLEAN"], "output_is_list": [false], "output_name": ["boolean"], "name": "easy compare", "display_name": "Compare", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic/Math", "output_node": false}, "easy imageSwitch": {"input": {"required": {"image_a": ["IMAGE"], "image_b": ["IMAGE"], "boolean": ["BOOLEAN", {"default": false}]}}, "input_order": {"required": ["image_a", "image_b", "boolean"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "easy imageSwitch", "display_name": "Image Switch", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic/Switch", "output_node": false}, "easy textSwitch": {"input": {"required": {"input": ["INT", {"default": 1, "min": 1, "max": 2}]}, "optional": {"text1": ["STRING", {"forceInput": true}], "text2": ["STRING", {"forceInput": true}]}}, "input_order": {"required": ["input"], "optional": ["text1", "text2"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["STRING"], "name": "easy textSwitch", "display_name": "Text Switch", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic/Switch", "output_node": false}, "easy imageIndexSwitch": {"input": {"required": {"index": ["INT", {"default": 0, "min": 0, "max": 9, "step": 1}]}, "optional": {"image0": ["IMAGE", {"lazy": true}], "image1": ["IMAGE", {"lazy": true}], "image2": ["IMAGE", {"lazy": true}], "image3": ["IMAGE", {"lazy": true}], "image4": ["IMAGE", {"lazy": true}], "image5": ["IMAGE", {"lazy": true}], "image6": ["IMAGE", {"lazy": true}], "image7": ["IMAGE", {"lazy": true}], "image8": ["IMAGE", {"lazy": true}], "image9": ["IMAGE", {"lazy": true}], "image10": ["IMAGE", {"lazy": true}], "image11": ["IMAGE", {"lazy": true}], "image12": ["IMAGE", {"lazy": true}], "image13": ["IMAGE", {"lazy": true}], "image14": ["IMAGE", {"lazy": true}], "image15": ["IMAGE", {"lazy": true}], "image16": ["IMAGE", {"lazy": true}], "image17": ["IMAGE", {"lazy": true}], "image18": ["IMAGE", {"lazy": true}], "image19": ["IMAGE", {"lazy": true}]}}, "input_order": {"required": ["index"], "optional": ["image0", "image1", "image2", "image3", "image4", "image5", "image6", "image7", "image8", "image9", "image10", "image11", "image12", "image13", "image14", "image15", "image16", "image17", "image18", "image19"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["image"], "name": "easy imageIndexSwitch", "display_name": "Image Index Switch", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic/Index Switch", "output_node": false}, "easy textIndexSwitch": {"input": {"required": {"index": ["INT", {"default": 0, "min": 0, "max": 9, "step": 1}]}, "optional": {"text0": ["STRING", {"lazy": true, "forceInput": true}], "text1": ["STRING", {"lazy": true, "forceInput": true}], "text2": ["STRING", {"lazy": true, "forceInput": true}], "text3": ["STRING", {"lazy": true, "forceInput": true}], "text4": ["STRING", {"lazy": true, "forceInput": true}], "text5": ["STRING", {"lazy": true, "forceInput": true}], "text6": ["STRING", {"lazy": true, "forceInput": true}], "text7": ["STRING", {"lazy": true, "forceInput": true}], "text8": ["STRING", {"lazy": true, "forceInput": true}], "text9": ["STRING", {"lazy": true, "forceInput": true}], "text10": ["STRING", {"lazy": true, "forceInput": true}], "text11": ["STRING", {"lazy": true, "forceInput": true}], "text12": ["STRING", {"lazy": true, "forceInput": true}], "text13": ["STRING", {"lazy": true, "forceInput": true}], "text14": ["STRING", {"lazy": true, "forceInput": true}], "text15": ["STRING", {"lazy": true, "forceInput": true}], "text16": ["STRING", {"lazy": true, "forceInput": true}], "text17": ["STRING", {"lazy": true, "forceInput": true}], "text18": ["STRING", {"lazy": true, "forceInput": true}], "text19": ["STRING", {"lazy": true, "forceInput": true}]}}, "input_order": {"required": ["index"], "optional": ["text0", "text1", "text2", "text3", "text4", "text5", "text6", "text7", "text8", "text9", "text10", "text11", "text12", "text13", "text14", "text15", "text16", "text17", "text18", "text19"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["text"], "name": "easy textIndexSwitch", "display_name": "Text Index Switch", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic/Index Switch", "output_node": false}, "easy conditioningIndexSwitch": {"input": {"required": {"index": ["INT", {"default": 0, "min": 0, "max": 9, "step": 1}]}, "optional": {"cond0": ["CONDITIONING", {"lazy": true}], "cond1": ["CONDITIONING", {"lazy": true}], "cond2": ["CONDITIONING", {"lazy": true}], "cond3": ["CONDITIONING", {"lazy": true}], "cond4": ["CONDITIONING", {"lazy": true}], "cond5": ["CONDITIONING", {"lazy": true}], "cond6": ["CONDITIONING", {"lazy": true}], "cond7": ["CONDITIONING", {"lazy": true}], "cond8": ["CONDITIONING", {"lazy": true}], "cond9": ["CONDITIONING", {"lazy": true}], "cond10": ["CONDITIONING", {"lazy": true}], "cond11": ["CONDITIONING", {"lazy": true}], "cond12": ["CONDITIONING", {"lazy": true}], "cond13": ["CONDITIONING", {"lazy": true}], "cond14": ["CONDITIONING", {"lazy": true}], "cond15": ["CONDITIONING", {"lazy": true}], "cond16": ["CONDITIONING", {"lazy": true}], "cond17": ["CONDITIONING", {"lazy": true}], "cond18": ["CONDITIONING", {"lazy": true}], "cond19": ["CONDITIONING", {"lazy": true}]}}, "input_order": {"required": ["index"], "optional": ["cond0", "cond1", "cond2", "cond3", "cond4", "cond5", "cond6", "cond7", "cond8", "cond9", "cond10", "cond11", "cond12", "cond13", "cond14", "cond15", "cond16", "cond17", "cond18", "cond19"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["conditioning"], "name": "easy conditioningIndexSwitch", "display_name": "Conditioning Index Switch", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic/Index Switch", "output_node": false}, "easy anythingIndexSwitch": {"input": {"required": {"index": ["INT", {"default": 0, "min": 0, "max": 9, "step": 1}]}, "optional": {"value0": ["*", {"lazy": true}], "value1": ["*", {"lazy": true}], "value2": ["*", {"lazy": true}], "value3": ["*", {"lazy": true}], "value4": ["*", {"lazy": true}], "value5": ["*", {"lazy": true}], "value6": ["*", {"lazy": true}], "value7": ["*", {"lazy": true}], "value8": ["*", {"lazy": true}], "value9": ["*", {"lazy": true}], "value10": ["*", {"lazy": true}], "value11": ["*", {"lazy": true}], "value12": ["*", {"lazy": true}], "value13": ["*", {"lazy": true}], "value14": ["*", {"lazy": true}], "value15": ["*", {"lazy": true}], "value16": ["*", {"lazy": true}], "value17": ["*", {"lazy": true}], "value18": ["*", {"lazy": true}], "value19": ["*", {"lazy": true}]}}, "input_order": {"required": ["index"], "optional": ["value0", "value1", "value2", "value3", "value4", "value5", "value6", "value7", "value8", "value9", "value10", "value11", "value12", "value13", "value14", "value15", "value16", "value17", "value18", "value19"]}, "output": ["*"], "output_is_list": [false], "output_name": ["value"], "name": "easy anythingIndexSwitch", "display_name": "Any Index Switch", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic/Index Switch", "output_node": false}, "easy ab": {"input": {"required": {"A or B": ["BOOLEAN", {"default": true, "label_on": "A", "label_off": "B"}], "in": ["*"]}, "hidden": {"unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["A or B", "in"], "hidden": ["unique_id"]}, "output": ["*", "*"], "output_is_list": [false, false], "output_name": ["A", "B"], "name": "easy ab", "display_name": "A or B", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic", "output_node": false}, "easy anythingInversedSwitch": {"input": {"required": {"index": ["INT", {"default": 0, "min": 0, "max": 9, "step": 1}], "in": ["*"]}, "hidden": {"unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["index", "in"], "hidden": ["unique_id"]}, "output": ["*"], "output_is_list": [false], "output_name": ["out0"], "name": "easy anythingInversedSwitch", "display_name": "Any Inversed Switch", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic", "output_node": false}, "easy whileLoopStart": {"input": {"required": {"condition": ["BOOLEAN", {"default": true}]}, "optional": {"initial_value0": ["*"], "initial_value1": ["*"], "initial_value2": ["*"], "initial_value3": ["*"], "initial_value4": ["*"], "initial_value5": ["*"], "initial_value6": ["*"], "initial_value7": ["*"], "initial_value8": ["*"], "initial_value9": ["*"], "initial_value10": ["*"], "initial_value11": ["*"], "initial_value12": ["*"], "initial_value13": ["*"], "initial_value14": ["*"], "initial_value15": ["*"], "initial_value16": ["*"], "initial_value17": ["*"], "initial_value18": ["*"], "initial_value19": ["*"]}}, "input_order": {"required": ["condition"], "optional": ["initial_value0", "initial_value1", "initial_value2", "initial_value3", "initial_value4", "initial_value5", "initial_value6", "initial_value7", "initial_value8", "initial_value9", "initial_value10", "initial_value11", "initial_value12", "initial_value13", "initial_value14", "initial_value15", "initial_value16", "initial_value17", "initial_value18", "initial_value19"]}, "output": ["FLOW_CONTROL", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*"], "output_is_list": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false], "output_name": ["flow", "value0", "value1", "value2", "value3", "value4", "value5", "value6", "value7", "value8", "value9", "value10", "value11", "value12", "value13", "value14", "value15", "value16", "value17", "value18", "value19"], "name": "easy whileLoopStart", "display_name": "While Loop Start", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic/While Loop", "output_node": false}, "easy whileLoopEnd": {"input": {"required": {"flow": ["FLOW_CONTROL", {"rawLink": true}], "condition": ["BOOLEAN", {}]}, "optional": {"initial_value0": ["*"], "initial_value1": ["*"], "initial_value2": ["*"], "initial_value3": ["*"], "initial_value4": ["*"], "initial_value5": ["*"], "initial_value6": ["*"], "initial_value7": ["*"], "initial_value8": ["*"], "initial_value9": ["*"], "initial_value10": ["*"], "initial_value11": ["*"], "initial_value12": ["*"], "initial_value13": ["*"], "initial_value14": ["*"], "initial_value15": ["*"], "initial_value16": ["*"], "initial_value17": ["*"], "initial_value18": ["*"], "initial_value19": ["*"]}, "hidden": {"dynprompt": "DYNPROMPT", "unique_id": "UNIQUE_ID", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["flow", "condition"], "optional": ["initial_value0", "initial_value1", "initial_value2", "initial_value3", "initial_value4", "initial_value5", "initial_value6", "initial_value7", "initial_value8", "initial_value9", "initial_value10", "initial_value11", "initial_value12", "initial_value13", "initial_value14", "initial_value15", "initial_value16", "initial_value17", "initial_value18", "initial_value19"], "hidden": ["dynprompt", "unique_id", "extra_pnginfo"]}, "output": ["*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*"], "output_is_list": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false], "output_name": ["value0", "value1", "value2", "value3", "value4", "value5", "value6", "value7", "value8", "value9", "value10", "value11", "value12", "value13", "value14", "value15", "value16", "value17", "value18", "value19"], "name": "easy whileLoopEnd", "display_name": "While Loop End", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic/While Loop", "output_node": false}, "easy forLoopStart": {"input": {"required": {"total": ["INT", {"default": 1, "min": 1, "max": 100000, "step": 1}]}, "optional": {"initial_value1": ["*"], "initial_value2": ["*"], "initial_value3": ["*"], "initial_value4": ["*"], "initial_value5": ["*"], "initial_value6": ["*"], "initial_value7": ["*"], "initial_value8": ["*"], "initial_value9": ["*"], "initial_value10": ["*"], "initial_value11": ["*"], "initial_value12": ["*"], "initial_value13": ["*"], "initial_value14": ["*"], "initial_value15": ["*"], "initial_value16": ["*"], "initial_value17": ["*"], "initial_value18": ["*"], "initial_value19": ["*"]}, "hidden": {"initial_value0": ["*"], "prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["total"], "optional": ["initial_value1", "initial_value2", "initial_value3", "initial_value4", "initial_value5", "initial_value6", "initial_value7", "initial_value8", "initial_value9", "initial_value10", "initial_value11", "initial_value12", "initial_value13", "initial_value14", "initial_value15", "initial_value16", "initial_value17", "initial_value18", "initial_value19"], "hidden": ["initial_value0", "prompt", "extra_pnginfo", "unique_id"]}, "output": ["FLOW_CONTROL", "INT", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*"], "output_is_list": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false], "output_name": ["flow", "index", "value1", "value2", "value3", "value4", "value5", "value6", "value7", "value8", "value9", "value10", "value11", "value12", "value13", "value14", "value15", "value16", "value17", "value18", "value19"], "name": "easy forLoopStart", "display_name": "For Loop Start", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic/For Loop", "output_node": false}, "easy forLoopEnd": {"input": {"required": {"flow": ["FLOW_CONTROL", {"rawLink": true}]}, "optional": {"initial_value1": ["*", {"rawLink": true}], "initial_value2": ["*", {"rawLink": true}], "initial_value3": ["*", {"rawLink": true}], "initial_value4": ["*", {"rawLink": true}], "initial_value5": ["*", {"rawLink": true}], "initial_value6": ["*", {"rawLink": true}], "initial_value7": ["*", {"rawLink": true}], "initial_value8": ["*", {"rawLink": true}], "initial_value9": ["*", {"rawLink": true}], "initial_value10": ["*", {"rawLink": true}], "initial_value11": ["*", {"rawLink": true}], "initial_value12": ["*", {"rawLink": true}], "initial_value13": ["*", {"rawLink": true}], "initial_value14": ["*", {"rawLink": true}], "initial_value15": ["*", {"rawLink": true}], "initial_value16": ["*", {"rawLink": true}], "initial_value17": ["*", {"rawLink": true}], "initial_value18": ["*", {"rawLink": true}], "initial_value19": ["*", {"rawLink": true}]}, "hidden": {"dynprompt": "DYNPROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["flow"], "optional": ["initial_value1", "initial_value2", "initial_value3", "initial_value4", "initial_value5", "initial_value6", "initial_value7", "initial_value8", "initial_value9", "initial_value10", "initial_value11", "initial_value12", "initial_value13", "initial_value14", "initial_value15", "initial_value16", "initial_value17", "initial_value18", "initial_value19"], "hidden": ["dynprompt", "extra_pnginfo", "unique_id"]}, "output": ["*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*"], "output_is_list": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false], "output_name": ["value1", "value2", "value3", "value4", "value5", "value6", "value7", "value8", "value9", "value10", "value11", "value12", "value13", "value14", "value15", "value16", "value17", "value18", "value19"], "name": "easy forLoopEnd", "display_name": "For Loop End", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic/For Loop", "output_node": false}, "easy blocker": {"input": {"required": {"continue": ["BOOLEAN", {"default": false}], "in": ["*", {"default": null}]}}, "input_order": {"required": ["continue", "in"]}, "output": ["*"], "output_is_list": [false], "output_name": ["out"], "name": "easy blocker", "display_name": "Blocker", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic", "output_node": false}, "easy ifElse": {"input": {"required": {"boolean": ["BOOLEAN"], "on_true": ["*", {"lazy": true}], "on_false": ["*", {"lazy": true}]}}, "input_order": {"required": ["boolean", "on_true", "on_false"]}, "output": ["*"], "output_is_list": [false], "output_name": ["*"], "name": "easy ifElse", "display_name": "If else", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic", "output_node": false}, "easy isMaskEmpty": {"input": {"required": {"mask": ["MASK"]}, "optional": {}}, "input_order": {"required": ["mask"], "optional": []}, "output": ["BOOLEAN"], "output_is_list": [false], "output_name": ["boolean"], "name": "easy isMaskEmpty", "display_name": "Is Mask Empty", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic", "output_node": false}, "easy isNone": {"input": {"required": {"any": ["*"]}, "optional": {}}, "input_order": {"required": ["any"], "optional": []}, "output": ["BOOLEAN"], "output_is_list": [false], "output_name": ["boolean"], "name": "easy isNone", "display_name": "Is None", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic", "output_node": false}, "easy isSDXL": {"input": {"required": {}, "optional": {"optional_pipe": ["PIPE_LINE"], "optional_clip": ["CLIP"]}}, "input_order": {"required": [], "optional": ["optional_pipe", "optional_clip"]}, "output": ["BOOLEAN"], "output_is_list": [false], "output_name": ["boolean"], "name": "easy isSDXL", "display_name": "Is SDXL", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic", "output_node": false}, "easy isFileExist": {"input": {"required": {"file_path": ["STRING", {"default": ""}], "file_name": ["STRING", {"default": ""}], "file_extension": ["STRING", {"default": ""}]}, "optional": {}}, "input_order": {"required": ["file_path", "file_name", "file_extension"], "optional": []}, "output": ["BOOLEAN"], "output_is_list": [false], "output_name": ["boolean"], "name": "easy isFileExist", "display_name": "Is File Exist", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic", "output_node": false}, "easy outputToList": {"input": {"required": {"tuple": ["*", {}]}, "optional": {}}, "input_order": {"required": ["tuple"], "optional": []}, "output": ["*"], "output_is_list": [true], "output_name": ["list"], "name": "easy outputToList", "display_name": "Output to List", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic", "output_node": false}, "easy pixels": {"input": {"required": {"resolution": [["width x height (custom)", "512 x 512", "512 x 768", "576 x 1024", "768 x 512", "768 x 768", "768 x 1024", "768 x 1280", "768 x 1344", "768 x 1536", "816 x 1920", "832 x 1152", "832 x 1216", "896 x 1152", "896 x 1088", "1024 x 1024", "1024 x 576", "1024 x 768", "1080 x 1920", "1440 x 2560", "1088 x 896", "1216 x 832", "1152 x 832", "1152 x 896", "1280 x 768", "1344 x 768", "1536 x 640", "1536 x 768", "1920 x 816", "1920 x 1080", "2560 x 1440"]], "width": ["INT", {"default": 512, "min": 64, "max": 16384, "step": 8}], "height": ["INT", {"default": 512, "min": 64, "max": 16384, "step": 8}], "scale": ["FLOAT", {"default": 2.0, "min": 0.001, "max": 10, "step": 0.001}], "flip_w/h": ["BOOLEAN", {"default": false}]}}, "input_order": {"required": ["resolution", "width", "height", "scale", "flip_w/h"]}, "output": ["INT", "INT", "*", "*", "*"], "output_is_list": [false, false, false, false, false], "output_name": ["width_norm", "height_norm", "width", "height", "scale_factor"], "name": "easy pixels", "display_name": "Pixels W/H Norm", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic", "output_node": false}, "easy xyAny": {"input": {"required": {"X": ["*", {}], "Y": ["*", {}], "direction": [["horizontal", "vertical"], {"default": "horizontal"}]}}, "input_order": {"required": ["X", "Y", "direction"]}, "output": ["*", "*"], "output_is_list": [true, true], "output_name": ["X", "Y"], "name": "easy xyAny", "display_name": "XY Any", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic", "output_node": false}, "easy lengthAnything": {"input": {"required": {"any": ["*", {}]}, "hidden": {"prompt": "PROMPT", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["any"], "hidden": ["prompt", "my_unique_id"]}, "output": ["INT"], "output_is_list": [false], "output_name": ["length"], "name": "easy lengthAnything", "display_name": "Length Any", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic", "output_node": false}, "easy indexAnything": {"input": {"required": {"any": ["*", {}], "index": ["INT", {"default": 0, "min": 0, "max": 1000000, "step": 1}]}, "hidden": {"prompt": "PROMPT", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["any", "index"], "hidden": ["prompt", "my_unique_id"]}, "output": ["*"], "output_is_list": [false], "output_name": ["out"], "name": "easy indexAnything", "display_name": "Index Any", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic", "output_node": false}, "easy batchAnything": {"input": {"required": {"any_1": ["*", {}], "any_2": ["*", {}]}}, "input_order": {"required": ["any_1", "any_2"]}, "output": ["*"], "output_is_list": [false], "output_name": ["batch"], "name": "easy batchAnything", "display_name": "Batch Any", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic", "output_node": false}, "easy convertAnything": {"input": {"required": {"*": ["*"], "output_type": [["string", "int", "float", "boolean"], {"default": "string"}]}}, "input_order": {"required": ["*", "output_type"]}, "output": ["*"], "output_is_list": [false], "output_name": ["*"], "name": "easy convertAnything", "display_name": "Convert Any", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic", "output_node": true}, "easy showAnything": {"input": {"required": {}, "optional": {"anything": ["*", {}]}, "hidden": {"unique_id": "UNIQUE_ID", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": [], "optional": ["anything"], "hidden": ["unique_id", "extra_pnginfo"]}, "output": ["*"], "output_is_list": [false], "output_name": ["output"], "name": "easy showAnything", "display_name": "Show Any", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic", "output_node": true}, "easy showTensorShape": {"input": {"required": {"tensor": ["*"]}, "optional": {}, "hidden": {"unique_id": "UNIQUE_ID", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["tensor"], "optional": [], "hidden": ["unique_id", "extra_pnginfo"]}, "output": [], "output_is_list": [], "output_name": [], "name": "easy showTensorShape", "display_name": "Show Tensor Shape", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic", "output_node": true}, "easy clearCacheKey": {"input": {"required": {"anything": ["*", {}], "cache_key": ["STRING", {"default": "*"}]}, "optional": {}, "hidden": {"unique_id": "UNIQUE_ID", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["anything", "cache_key"], "optional": [], "hidden": ["unique_id", "extra_pnginfo"]}, "output": ["*"], "output_is_list": [false], "output_name": ["output"], "name": "easy clearCacheKey", "display_name": "Clear Cache Key", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic", "output_node": true}, "easy clearCacheAll": {"input": {"required": {"anything": ["*", {}]}, "optional": {}, "hidden": {"unique_id": "UNIQUE_ID", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["anything"], "optional": [], "hidden": ["unique_id", "extra_pnginfo"]}, "output": ["*"], "output_is_list": [false], "output_name": ["output"], "name": "easy clearCacheAll", "display_name": "Clear Cache All", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic", "output_node": true}, "easy cleanGpuUsed": {"input": {"required": {"anything": ["*", {}]}, "optional": {}, "hidden": {"unique_id": "UNIQUE_ID", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["anything"], "optional": [], "hidden": ["unique_id", "extra_pnginfo"]}, "output": ["*"], "output_is_list": [false], "output_name": ["output"], "name": "easy cleanGpuUsed", "display_name": "Clean VRAM Used", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic", "output_node": true}, "easy saveText": {"input": {"required": {"text": ["STRING", {"default": "", "forceInput": true}], "output_file_path": ["STRING", {"multiline": false, "default": ""}], "file_name": ["STRING", {"multiline": false, "default": ""}], "file_extension": [["txt", "csv"]], "overwrite": ["BOOLEAN", {"default": true}]}, "optional": {"image": ["IMAGE"]}}, "input_order": {"required": ["text", "output_file_path", "file_name", "file_extension", "overwrite"], "optional": ["image"]}, "output": ["STRING", "IMAGE"], "output_is_list": [false, false], "output_name": ["text", "image"], "name": "easy saveText", "display_name": "Save Text", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic", "output_node": true}, "easy sleep": {"input": {"required": {"any": ["*", {}], "delay": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1000000, "step": 0.1}]}}, "input_order": {"required": ["any", "delay"]}, "output": ["*"], "output_is_list": [false], "output_name": ["out"], "name": "easy sleep", "display_name": "Sleep", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/Logic", "output_node": false}, "easy joyCaption2API": {"input": {"required": {"image": ["IMAGE"], "do_sample": [[true, false]], "temperature": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 2.0, "step": 0.01, "round": 0.001, "display": "number"}], "max_tokens": ["INT", {"default": 256, "min": 16, "max": 512, "step": 16, "display": "number"}], "caption_type": [["Descriptive", "Descriptive (Informal)", "Training Prompt", "MidJourney", "Booru tag list", "Booru-like tag list", "Art Critic", "Product Listing", "Social Media Post"]], "caption_length": [["any", "very short", "short", "medium-length", "long", "very long", "20", "30", "40", "50", "60", "70", "80", "90", "100", "110", "120", "130", "140", "150", "160", "170", "180", "190", "200", "210", "220", "230", "240", "250", "260"]], "extra_options": ["STRING", {"placeholder": "Extra options(e.g):\nIf there is a person/character in the image you must refer to them as {name}.", "tooltip": "Extra options for the model", "multiline": true}], "name_input": ["STRING", {"default": "", "tooltip": "Name input is only used if an Extra Option is selected that requires it."}], "custom_prompt": ["STRING", {"default": "", "multiline": true}]}, "optional": {"apikey_override": ["STRING", {"default": "", "forceInput": true, "tooltip": "Override the API key in the local config"}]}}, "input_order": {"required": ["image", "do_sample", "temperature", "max_tokens", "caption_type", "caption_length", "extra_options", "name_input", "custom_prompt"], "optional": ["apikey_override"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["caption"], "name": "easy joyCaption2API", "display_name": "JoyCaption2 (BizyAIR)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/API", "output_node": false}, "easy joyCaption3API": {"input": {"required": {"image": ["IMAGE"], "do_sample": [[true, false]], "temperature": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 2.0, "step": 0.01, "round": 0.001, "display": "number"}], "max_tokens": ["INT", {"default": 256, "min": 16, "max": 512, "step": 16, "display": "number"}], "caption_type": [["Descriptive", "Descriptive (Informal)", "Training Prompt", "MidJourney", "Booru tag list", "Booru-like tag list", "Art Critic", "Product Listing", "Social Media Post"]], "caption_length": [["any", "very short", "short", "medium-length", "long", "very long", "20", "30", "40", "50", "60", "70", "80", "90", "100", "110", "120", "130", "140", "150", "160", "170", "180", "190", "200", "210", "220", "230", "240", "250", "260"]], "extra_options": ["STRING", {"placeholder": "Extra options(e.g):\nIf there is a person/character in the image you must refer to them as {name}.", "tooltip": "Extra options for the model", "multiline": true}], "name_input": ["STRING", {"default": "", "tooltip": "Name input is only used if an Extra Option is selected that requires it."}], "custom_prompt": ["STRING", {"default": "", "multiline": true}]}, "optional": {"apikey_override": ["STRING", {"default": "", "forceInput": true, "tooltip": "Override the API key in the local config"}]}}, "input_order": {"required": ["image", "do_sample", "temperature", "max_tokens", "caption_type", "caption_length", "extra_options", "name_input", "custom_prompt"], "optional": ["apikey_override"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["caption"], "name": "easy joyCaption3API", "display_name": "JoyCaption3 (BizyAIR)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/API", "output_node": false}, "easy if": {"input": {"required": {"any": ["*"], "if": ["*"], "else": ["*"]}}, "input_order": {"required": ["any", "if", "else"]}, "output": ["*"], "output_is_list": [false], "output_name": ["?"], "name": "easy if", "display_name": "If (\ud83d\udeabDeprecated)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/\ud83d\udeab Deprecated", "output_node": false, "deprecated": true}, "easy poseEditor": {"input": {"required": {"image": ["STRING", {"default": ""}]}}, "input_order": {"required": ["image"]}, "output": [], "output_is_list": [], "output_name": [], "name": "easy poseEditor", "display_name": "PoseEditor (\ud83d\udeabDeprecated)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/\ud83d\udeab Deprecated", "output_node": false, "deprecated": true}, "easy imageToMask": {"input": {"required": {"image": ["IMAGE"], "channel": [["red", "green", "blue"]]}}, "input_order": {"required": ["image", "channel"]}, "output": ["MASK"], "output_is_list": [false], "output_name": ["MASK"], "name": "easy imageToMask", "display_name": "ImageToMask (\ud83d\udeabDeprecated)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/\ud83d\udeab Deprecated", "output_node": false, "deprecated": true}, "easy showSpentTime": {"input": {"required": {"pipe": ["PIPE_LINE"]}, "hidden": {"unique_id": "UNIQUE_ID", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["pipe"], "hidden": ["unique_id", "extra_pnginfo"]}, "output": [], "output_is_list": [], "output_name": [], "name": "easy showSpentTime", "display_name": "Show Spent Time (\ud83d\udeabDeprecated)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/\ud83d\udeab Deprecated", "output_node": true, "deprecated": true}, "easy latentNoisy": {"input": {"required": {"sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "steps": ["INT", {"default": 10000, "min": 0, "max": 10000}], "start_at_step": ["INT", {"default": 0, "min": 0, "max": 10000}], "end_at_step": ["INT", {"default": 10000, "min": 1, "max": 10000}], "source": [["CPU", "GPU"]], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}]}, "optional": {"pipe": ["PIPE_LINE"], "optional_model": ["MODEL"], "optional_latent": ["LATENT"]}}, "input_order": {"required": ["sampler_name", "scheduler", "steps", "start_at_step", "end_at_step", "source", "seed"], "optional": ["pipe", "optional_model", "optional_latent"]}, "output": ["PIPE_LINE", "LATENT", "FLOAT"], "output_is_list": [false, false, false], "output_name": ["pipe", "latent", "sigma"], "name": "easy latentNoisy", "display_name": "LatentNoisy (\ud83d\udeabDeprecated)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/\ud83d\udeab Deprecated", "output_node": false, "deprecated": true}, "easy latentCompositeMaskedWithCond": {"input": {"required": {"pipe": ["PIPE_LINE"], "text_combine": ["LIST"], "source_latent": ["LATENT"], "source_mask": ["MASK"], "destination_mask": ["MASK"], "text_combine_mode": [["add", "replace", "cover"], {"default": "add"}], "replace_text": ["STRING", {"default": ""}]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "my_unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["pipe", "text_combine", "source_latent", "source_mask", "destination_mask", "text_combine_mode", "replace_text"], "hidden": ["prompt", "extra_pnginfo", "my_unique_id"]}, "output": ["PIPE_LINE", "LATENT", "CONDITIONING"], "output_is_list": [false, false, true], "output_name": ["pipe", "latent", "conditioning"], "name": "easy latentCompositeMaskedWithCond", "display_name": "LatentCompositeMaskedWithCond (\ud83d\udeabDeprecated)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/\ud83d\udeab Deprecated", "output_node": false, "deprecated": true}, "easy injectNoiseToLatent": {"input": {"required": {"strength": ["FLOAT", {"default": 0.1, "min": 0.0, "max": 200.0, "step": 0.0001}], "normalize": ["BOOLEAN", {"default": false}], "average": ["BOOLEAN", {"default": false}]}, "optional": {"pipe_to_noise": ["PIPE_LINE"], "image_to_latent": ["IMAGE"], "latent": ["LATENT"], "noise": ["LATENT"], "mask": ["MASK"], "mix_randn_amount": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1000.0, "step": 0.001}], "seed": ["INT", {"default": 123, "min": 0, "max": 18446744073709551615, "step": 1}]}}, "input_order": {"required": ["strength", "normalize", "average"], "optional": ["pipe_to_noise", "image_to_latent", "latent", "noise", "mask", "mix_randn_amount", "seed"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "easy injectNoiseToLatent", "display_name": "InjectNoiseToLatent (\ud83d\udeabDeprecated)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/\ud83d\udeab Deprecated", "output_node": false, "deprecated": true}, "easy stableDiffusion3API": {"input": {"required": {"positive": ["STRING", {"default": "", "placeholder": "Positive", "multiline": true}], "negative": ["STRING", {"default": "", "placeholder": "Negative", "multiline": true}], "model": [["sd3", "sd3-turbo"]], "aspect_ratio": [["16:9", "1:1", "21:9", "2:3", "3:2", "4:5", "5:4", "9:16", "9:21"]], "seed": ["INT", {"default": 0, "min": 0, "max": 4294967294}], "denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0}]}, "optional": {"optional_image": ["IMAGE"]}, "hidden": {"unique_id": "UNIQUE_ID", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["positive", "negative", "model", "aspect_ratio", "seed", "denoise"], "optional": ["optional_image"], "hidden": ["unique_id", "extra_pnginfo"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["image"], "name": "easy stableDiffusion3API", "display_name": "StableDiffusion3API (\ud83d\udeabDeprecated)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/\ud83d\udeab Deprecated", "output_node": false, "deprecated": true}, "easy saveImageLazy": {"input": {"required": {"images": ["IMAGE"], "filename_prefix": ["STRING", {"default": "ComfyUI"}], "save_metadata": ["BOOLEAN", {"default": true}]}, "optional": {}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["images", "filename_prefix", "save_metadata"], "optional": [], "hidden": ["prompt", "extra_pnginfo"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["images"], "name": "easy saveImageLazy", "display_name": "SaveImageLazy (\ud83d\udeabDeprecated)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/\ud83d\udeab Deprecated", "output_node": false, "deprecated": true}, "easy saveTextLazy": {"input": {"required": {"text": ["STRING", {"default": "", "forceInput": true}], "output_file_path": ["STRING", {"multiline": false, "default": ""}], "file_name": ["STRING", {"multiline": false, "default": ""}], "file_extension": [["txt", "csv"]], "overwrite": ["BOOLEAN", {"default": true}]}, "optional": {"image": ["IMAGE"]}}, "input_order": {"required": ["text", "output_file_path", "file_name", "file_extension", "overwrite"], "optional": ["image"]}, "output": ["STRING", "IMAGE"], "output_is_list": [false, false], "output_name": ["text", "image"], "name": "easy saveTextLazy", "display_name": "SaveTextLazy (\ud83d\udeabDeprecated)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/\ud83d\udeab Deprecated", "output_node": false, "deprecated": true}, "easy showAnythingLazy": {"input": {"required": {}, "optional": {"anything": ["*", {}]}, "hidden": {"unique_id": "UNIQUE_ID", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": [], "optional": ["anything"], "hidden": ["unique_id", "extra_pnginfo"]}, "output": ["*"], "output_is_list": [false], "output_name": ["output"], "name": "easy showAnythingLazy", "display_name": "ShowAnythingLazy (\ud83d\udeabDeprecated)", "description": "", "python_module": "custom_nodes.ComfyUI-Easy-Use", "category": "EasyUse/\ud83d\udeab Deprecated", "output_node": false, "deprecated": true}, "Checkpoint Selector": {"input": {"required": {"ckpt_name": [["3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"]]}}, "input_order": {"required": ["ckpt_name"]}, "output": [["3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"]], "output_is_list": [false], "output_name": ["ckpt_name"], "name": "Checkpoint Selector", "display_name": "Checkpoint Selector", "description": "", "python_module": "custom_nodes.comfy-image-saver", "category": "ImageSaverTools/utils", "output_node": false}, "Save Image w/Metadata": {"input": {"required": {"images": ["IMAGE"], "filename": ["STRING", {"default": "%time_%seed", "multiline": false}], "path": ["STRING", {"default": "", "multiline": false}], "extension": [["png", "jpeg", "webp"]], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0}], "modelname": [["3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"]], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]]}, "optional": {"positive": ["STRING", {"default": "unknown", "multiline": true}], "negative": ["STRING", {"default": "unknown", "multiline": true}], "seed_value": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "width": ["INT", {"default": 512, "min": 1, "max": 16384, "step": 8}], "height": ["INT", {"default": 512, "min": 1, "max": 16384, "step": 8}], "lossless_webp": ["BOOLEAN", {"default": true}], "quality_jpeg_or_webp": ["INT", {"default": 100, "min": 1, "max": 100}], "counter": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "time_format": ["STRING", {"default": "%Y-%m-%d-%H%M%S", "multiline": false}]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["images", "filename", "path", "extension", "steps", "cfg", "modelname", "sampler_name", "scheduler"], "optional": ["positive", "negative", "seed_value", "width", "height", "lossless_webp", "quality_jpeg_or_webp", "counter", "time_format"], "hidden": ["prompt", "extra_pnginfo"]}, "output": [], "output_is_list": [], "output_name": [], "name": "Save Image w/Metadata", "display_name": "Save Image w/Metadata", "description": "", "python_module": "custom_nodes.comfy-image-saver", "category": "ImageSaverTools", "output_node": true}, "Sampler Selector": {"input": {"required": {"sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]]}}, "input_order": {"required": ["sampler_name"]}, "output": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "output_is_list": [false], "output_name": ["sampler_name"], "name": "Sampler Selector", "display_name": "Sampler Selector", "description": "", "python_module": "custom_nodes.comfy-image-saver", "category": "ImageSaverTools/utils", "output_node": false}, "Scheduler Selector": {"input": {"required": {"scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]]}}, "input_order": {"required": ["scheduler"]}, "output": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "output_is_list": [false], "output_name": ["scheduler"], "name": "Scheduler Selector", "display_name": "Scheduler Selector", "description": "", "python_module": "custom_nodes.comfy-image-saver", "category": "ImageSaverTools/utils", "output_node": false}, "Seed Generator": {"input": {"required": {"seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}]}}, "input_order": {"required": ["seed"]}, "output": ["INT"], "output_is_list": [false], "output_name": ["INT"], "name": "Seed Generator", "display_name": "Seed Generator", "description": "", "python_module": "custom_nodes.comfy-image-saver", "category": "ImageSaverTools/utils", "output_node": false}, "String Literal": {"input": {"required": {"string": ["STRING", {"default": "", "multiline": true}]}}, "input_order": {"required": ["string"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["STRING"], "name": "String Literal", "display_name": "String Literal", "description": "", "python_module": "custom_nodes.comfy-image-saver", "category": "ImageSaverTools/utils", "output_node": false}, "Width/Height Literal": {"input": {"required": {"int": ["INT", {"default": 512, "min": 1, "max": 16384, "step": 8}]}}, "input_order": {"required": ["int"]}, "output": ["INT"], "output_is_list": [false], "output_name": ["INT"], "name": "Width/Height Literal", "display_name": "Width/Height Literal", "description": "", "python_module": "custom_nodes.comfy-image-saver", "category": "ImageSaverTools/utils", "output_node": false}, "Cfg Literal": {"input": {"required": {"float": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0}]}}, "input_order": {"required": ["float"]}, "output": ["FLOAT"], "output_is_list": [false], "output_name": ["FLOAT"], "name": "Cfg Literal", "display_name": "Cfg Literal", "description": "", "python_module": "custom_nodes.comfy-image-saver", "category": "ImageSaverTools/utils", "output_node": false}, "Int Literal": {"input": {"required": {"int": ["INT", {"default": 0, "min": 0, "max": 1000000}]}}, "input_order": {"required": ["int"]}, "output": ["INT"], "output_is_list": [false], "output_name": ["INT"], "name": "Int Literal", "display_name": "Int Literal", "description": "", "python_module": "custom_nodes.comfy-image-saver", "category": "ImageSaverTools/utils", "output_node": false}, "BNK_CLIPTextEncodeAdvanced": {"input": {"required": {"text": ["STRING", {"multiline": true}], "clip": ["CLIP"], "token_normalization": [["none", "mean", "length", "length+mean"]], "weight_interpretation": [["comfy", "A1111", "compel", "comfy++", "down_weight"]]}}, "input_order": {"required": ["text", "clip", "token_normalization", "weight_interpretation"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "BNK_CLIPTextEncodeAdvanced", "display_name": "CLIP Text Encode (Advanced)", "description": "", "python_module": "custom_nodes.ComfyUI_ADV_CLIP_emb", "category": "conditioning/advanced", "output_node": false}, "BNK_CLIPTextEncodeSDXLAdvanced": {"input": {"required": {"text_l": ["STRING", {"multiline": true}], "text_g": ["STRING", {"multiline": true}], "clip": ["CLIP"], "token_normalization": [["none", "mean", "length", "length+mean"]], "weight_interpretation": [["comfy", "A1111", "compel", "comfy++", "down_weight"]], "balance": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["text_l", "text_g", "clip", "token_normalization", "weight_interpretation", "balance"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "BNK_CLIPTextEncodeSDXLAdvanced", "display_name": "CLIP Text Encode SDXL (Advanced)", "description": "", "python_module": "custom_nodes.ComfyUI_ADV_CLIP_emb", "category": "conditioning/advanced", "output_node": false}, "BNK_AddCLIPSDXLParams": {"input": {"required": {"conditioning": ["CONDITIONING"], "width": ["INT", {"default": 1024.0, "min": 0, "max": 16384}], "height": ["INT", {"default": 1024.0, "min": 0, "max": 16384}], "crop_w": ["INT", {"default": 0, "min": 0, "max": 16384}], "crop_h": ["INT", {"default": 0, "min": 0, "max": 16384}], "target_width": ["INT", {"default": 1024.0, "min": 0, "max": 16384}], "target_height": ["INT", {"default": 1024.0, "min": 0, "max": 16384}]}}, "input_order": {"required": ["conditioning", "width", "height", "crop_w", "crop_h", "target_width", "target_height"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "BNK_AddCLIPSDXLParams", "display_name": "Add CLIP SDXL Params", "description": "", "python_module": "custom_nodes.ComfyUI_ADV_CLIP_emb", "category": "conditioning/advanced", "output_node": false}, "BNK_AddCLIPSDXLRParams": {"input": {"required": {"conditioning": ["CONDITIONING"], "width": ["INT", {"default": 1024.0, "min": 0, "max": 16384}], "height": ["INT", {"default": 1024.0, "min": 0, "max": 16384}], "ascore": ["FLOAT", {"default": 6.0, "min": 0.0, "max": 1000.0, "step": 0.01}]}}, "input_order": {"required": ["conditioning", "width", "height", "ascore"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "BNK_AddCLIPSDXLRParams", "display_name": "Add CLIP SDXL Refiner Params", "description": "", "python_module": "custom_nodes.ComfyUI_ADV_CLIP_emb", "category": "conditioning/advanced", "output_node": false}, "JPEG artifacts removal FBCNN": {"input": {"required": {"image": ["IMAGE"], "auto_detect": [["enable", "disable"]], "compression_level": ["INT", {"default": 0, "min": 0, "max": 100, "step": 1, "display": "slider"}]}}, "input_order": {"required": ["image", "auto_detect", "compression_level"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "JPEG artifacts removal FBCNN", "display_name": "JPEG Compression Removal - FBCNN", "description": "", "python_module": "custom_nodes.ComfyUI-FBCNN", "category": "image/upscaling", "output_node": false}, "SAMLoader": {"input": {"required": {"model_name": [[], {"tooltip": "The detection accuracy varies depending on the SAM model. ESAM can only be used if ComfyUI-YoloWorld-EfficientSAM is installed."}], "device_mode": [["AUTO", "Prefer GPU", "CPU"], {"tooltip": "AUTO: Only applicable when a GPU is available. It temporarily loads the SAM_MODEL into VRAM only when the detection function is used.\nPrefer GPU: Tries to keep the SAM_MODEL on the GPU whenever possible. This can be used when there is sufficient VRAM available.\nCPU: Always loads only on the CPU."}]}}, "input_order": {"required": ["model_name", "device_mode"]}, "output": ["SAM_MODEL"], "output_is_list": [false], "output_name": ["SAM_MODEL"], "name": "SAMLoader", "display_name": "SAMLoader (Impact)", "description": "Load the SAM (Segment Anything) model. This can be used in places that utilize SAM detection functionality, such as SAMDetector or SimpleDetector.\nThe SAM detection functionality in Impact Pack must use the SAM_MODEL loaded through this node.", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack", "output_node": false}, "CLIPSegDetectorProvider": {"input": {"required": {"text": ["STRING", {"multiline": false, "tooltip": "Enter the targets to be detected, separated by commas"}], "blur": ["FLOAT", {"min": 0, "max": 15, "step": 0.1, "default": 7, "tooltip": "Blurs the detected mask"}], "threshold": ["FLOAT", {"min": 0, "max": 1, "step": 0.05, "default": 0.4, "tooltip": "Detects only areas that are certain above the threshold."}], "dilation_factor": ["INT", {"min": 0, "max": 10, "step": 1, "default": 4, "tooltip": "Dilates the detected mask."}]}}, "input_order": {"required": ["text", "blur", "threshold", "dilation_factor"]}, "output": ["BBOX_DETECTOR"], "output_is_list": [false], "output_name": ["BBOX_DETECTOR"], "name": "CLIPSegDetectorProvider", "display_name": "CLIPSegDetectorProvider", "description": "Provides a detection function using CLIPSeg, which generates masks based on text prompts.\nTo use this node, the CLIPSeg custom node must be installed.", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ONNXDetectorProvider": {"input": {"required": {"model_name": [[]]}}, "input_order": {"required": ["model_name"]}, "output": ["BBOX_DETECTOR"], "output_is_list": [false], "output_name": ["BBOX_DETECTOR"], "name": "ONNXDetectorProvider", "display_name": "ONNXDetectorProvider", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack", "output_node": false}, "BitwiseAndMaskForEach": {"input": {"required": {"base_segs": ["SEGS"], "mask_segs": ["SEGS"]}}, "input_order": {"required": ["base_segs", "mask_segs"]}, "output": ["SEGS"], "output_is_list": [false], "output_name": ["SEGS"], "name": "BitwiseAndMaskForEach", "display_name": "Pixelwise(SEGS & SEGS)", "description": "Retains only the overlapping areas between the masks included in base_segs and the mask regions of mask_segs. SEGS with no overlapping mask areas are filtered out.", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Operation", "output_node": false}, "SubtractMaskForEach": {"input": {"required": {"base_segs": ["SEGS"], "mask_segs": ["SEGS"]}}, "input_order": {"required": ["base_segs", "mask_segs"]}, "output": ["SEGS"], "output_is_list": [false], "output_name": ["SEGS"], "name": "SubtractMaskForEach", "display_name": "Pixelwise(SEGS - SEGS)", "description": "Removes only the overlapping areas between the masks included in base_segs and the mask regions of mask_segs. SEGS with no overlapping mask areas are filtered out.", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Operation", "output_node": false}, "DetailerForEach": {"input": {"required": {"image": ["IMAGE"], "segs": ["SEGS"], "model": ["MODEL", {"tooltip": "If the `ImpactDummyInput` is connected to the model, the inference stage is skipped."}], "clip": ["CLIP"], "vae": ["VAE"], "guide_size": ["FLOAT", {"default": 512, "min": 64, "max": 16384, "step": 8}], "guide_size_for": ["BOOLEAN", {"default": true, "label_on": "bbox", "label_off": "crop_region"}], "max_size": ["FLOAT", {"default": 1024, "min": 64, "max": 16384, "step": 8}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "AYS SDXL", "AYS SD1", "AYS SVD", "GITS[coeff=1.2]", "LTXV[default]", "OSS FLUX", "OSS Wan", "OSS Chroma"]], "positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "denoise": ["FLOAT", {"default": 0.5, "min": 0.0001, "max": 1.0, "step": 0.01}], "feather": ["INT", {"default": 5, "min": 0, "max": 100, "step": 1}], "noise_mask": ["BOOLEAN", {"default": true, "label_on": "enabled", "label_off": "disabled"}], "force_inpaint": ["BOOLEAN", {"default": true, "label_on": "enabled", "label_off": "disabled"}], "wildcard": ["STRING", {"multiline": true, "dynamicPrompts": false}], "cycle": ["INT", {"default": 1, "min": 1, "max": 10, "step": 1}]}, "optional": {"detailer_hook": ["DETAILER_HOOK"], "inpaint_model": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}], "noise_mask_feather": ["INT", {"default": 20, "min": 0, "max": 100, "step": 1}], "scheduler_func_opt": ["SCHEDULER_FUNC"], "tiled_encode": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}], "tiled_decode": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}]}}, "input_order": {"required": ["image", "segs", "model", "clip", "vae", "guide_size", "guide_size_for", "max_size", "seed", "steps", "cfg", "sampler_name", "scheduler", "positive", "negative", "denoise", "feather", "noise_mask", "force_inpaint", "wildcard", "cycle"], "optional": ["detailer_hook", "inpaint_model", "noise_mask_feather", "scheduler_func_opt", "tiled_encode", "tiled_decode"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "DetailerForEach", "display_name": "Detailer (SEGS)", "description": "It enhances details by inpainting each region within the detected area bundle (SEGS) after enlarging them based on the guide size.", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Detailer", "output_node": false}, "DetailerForEachAutoRetry": {"input": {"required": {"image": ["IMAGE"], "segs": ["SEGS"], "model": ["MODEL", {"tooltip": "If the `ImpactDummyInput` is connected to the model, the inference stage is skipped."}], "clip": ["CLIP"], "vae": ["VAE"], "guide_size": ["FLOAT", {"default": 512, "min": 64, "max": 16384, "step": 8}], "guide_size_for": ["BOOLEAN", {"default": true, "label_on": "bbox", "label_off": "crop_region"}], "max_size": ["FLOAT", {"default": 1024, "min": 64, "max": 16384, "step": 8}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "AYS SDXL", "AYS SD1", "AYS SVD", "GITS[coeff=1.2]", "LTXV[default]", "OSS FLUX", "OSS Wan", "OSS Chroma"]], "positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "denoise": ["FLOAT", {"default": 0.5, "min": 0.0001, "max": 1.0, "step": 0.01}], "feather": ["INT", {"default": 5, "min": 0, "max": 100, "step": 1}], "noise_mask": ["BOOLEAN", {"default": true, "label_on": "enabled", "label_off": "disabled"}], "force_inpaint": ["BOOLEAN", {"default": true, "label_on": "enabled", "label_off": "disabled"}], "wildcard": ["STRING", {"multiline": true, "dynamicPrompts": false}], "cycle": ["INT", {"default": 1, "min": 1, "max": 10, "step": 1}], "max_retries": ["INT", {"default": 1, "min": 1, "max": 10, "step": 1}]}, "optional": {"detailer_hook": ["DETAILER_HOOK"], "inpaint_model": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}], "noise_mask_feather": ["INT", {"default": 20, "min": 0, "max": 100, "step": 1}], "scheduler_func_opt": ["SCHEDULER_FUNC"], "tiled_encode": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}], "tiled_decode": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}]}}, "input_order": {"required": ["image", "segs", "model", "clip", "vae", "guide_size", "guide_size_for", "max_size", "seed", "steps", "cfg", "sampler_name", "scheduler", "positive", "negative", "denoise", "feather", "noise_mask", "force_inpaint", "wildcard", "cycle", "max_retries"], "optional": ["detailer_hook", "inpaint_model", "noise_mask_feather", "scheduler_func_opt", "tiled_encode", "tiled_decode"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "DetailerForEachAutoRetry", "display_name": "Detailer (SEGS) with auto retry", "description": "It enhances details by inpainting each region within the detected area bundle (SEGS) after enlarging them based on the guide size.", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Detailer", "output_node": false}, "DetailerForEachDebug": {"input": {"required": {"image": ["IMAGE"], "segs": ["SEGS"], "model": ["MODEL", {"tooltip": "If the `ImpactDummyInput` is connected to the model, the inference stage is skipped."}], "clip": ["CLIP"], "vae": ["VAE"], "guide_size": ["FLOAT", {"default": 512, "min": 64, "max": 16384, "step": 8}], "guide_size_for": ["BOOLEAN", {"default": true, "label_on": "bbox", "label_off": "crop_region"}], "max_size": ["FLOAT", {"default": 1024, "min": 64, "max": 16384, "step": 8}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "AYS SDXL", "AYS SD1", "AYS SVD", "GITS[coeff=1.2]", "LTXV[default]", "OSS FLUX", "OSS Wan", "OSS Chroma"]], "positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "denoise": ["FLOAT", {"default": 0.5, "min": 0.0001, "max": 1.0, "step": 0.01}], "feather": ["INT", {"default": 5, "min": 0, "max": 100, "step": 1}], "noise_mask": ["BOOLEAN", {"default": true, "label_on": "enabled", "label_off": "disabled"}], "force_inpaint": ["BOOLEAN", {"default": true, "label_on": "enabled", "label_off": "disabled"}], "wildcard": ["STRING", {"multiline": true, "dynamicPrompts": false}], "cycle": ["INT", {"default": 1, "min": 1, "max": 10, "step": 1}]}, "optional": {"detailer_hook": ["DETAILER_HOOK"], "inpaint_model": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}], "noise_mask_feather": ["INT", {"default": 20, "min": 0, "max": 100, "step": 1}], "scheduler_func_opt": ["SCHEDULER_FUNC"], "tiled_encode": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}], "tiled_decode": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}]}}, "input_order": {"required": ["image", "segs", "model", "clip", "vae", "guide_size", "guide_size_for", "max_size", "seed", "steps", "cfg", "sampler_name", "scheduler", "positive", "negative", "denoise", "feather", "noise_mask", "force_inpaint", "wildcard", "cycle"], "optional": ["detailer_hook", "inpaint_model", "noise_mask_feather", "scheduler_func_opt", "tiled_encode", "tiled_decode"]}, "output": ["IMAGE", "IMAGE", "IMAGE", "IMAGE", "IMAGE"], "output_is_list": [false, true, true, true, true], "output_name": ["image", "cropped", "cropped_refined", "cropped_refined_alpha", "cnet_images"], "name": "DetailerForEachDebug", "display_name": "DetailerDebug (SEGS)", "description": "It enhances details by inpainting each region within the detected area bundle (SEGS) after enlarging them based on the guide size.", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Detailer", "output_node": false}, "DetailerForEachPipe": {"input": {"required": {"image": ["IMAGE"], "segs": ["SEGS"], "guide_size": ["FLOAT", {"default": 512, "min": 64, "max": 16384, "step": 8}], "guide_size_for": ["BOOLEAN", {"default": true, "label_on": "bbox", "label_off": "crop_region"}], "max_size": ["FLOAT", {"default": 1024, "min": 64, "max": 16384, "step": 8}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "AYS SDXL", "AYS SD1", "AYS SVD", "GITS[coeff=1.2]", "LTXV[default]", "OSS FLUX", "OSS Wan", "OSS Chroma"]], "denoise": ["FLOAT", {"default": 0.5, "min": 0.0001, "max": 1.0, "step": 0.01}], "feather": ["INT", {"default": 5, "min": 0, "max": 100, "step": 1}], "noise_mask": ["BOOLEAN", {"default": true, "label_on": "enabled", "label_off": "disabled"}], "force_inpaint": ["BOOLEAN", {"default": true, "label_on": "enabled", "label_off": "disabled"}], "basic_pipe": ["BASIC_PIPE", {"tooltip": "If the `ImpactDummyInput` is connected to the model in the basic_pipe, the inference stage is skipped."}], "wildcard": ["STRING", {"multiline": true, "dynamicPrompts": false}], "refiner_ratio": ["FLOAT", {"default": 0.2, "min": 0.0, "max": 1.0}], "cycle": ["INT", {"default": 1, "min": 1, "max": 10, "step": 1}]}, "optional": {"detailer_hook": ["DETAILER_HOOK"], "refiner_basic_pipe_opt": ["BASIC_PIPE"], "inpaint_model": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}], "noise_mask_feather": ["INT", {"default": 20, "min": 0, "max": 100, "step": 1}], "scheduler_func_opt": ["SCHEDULER_FUNC"], "tiled_encode": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}], "tiled_decode": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}]}}, "input_order": {"required": ["image", "segs", "guide_size", "guide_size_for", "max_size", "seed", "steps", "cfg", "sampler_name", "scheduler", "denoise", "feather", "noise_mask", "force_inpaint", "basic_pipe", "wildcard", "refiner_ratio", "cycle"], "optional": ["detailer_hook", "refiner_basic_pipe_opt", "inpaint_model", "noise_mask_feather", "scheduler_func_opt", "tiled_encode", "tiled_decode"]}, "output": ["IMAGE", "SEGS", "BASIC_PIPE", "IMAGE"], "output_is_list": [false, false, false, true], "output_name": ["image", "segs", "basic_pipe", "cnet_images"], "name": "DetailerForEachPipe", "display_name": "Detailer (SEGS/pipe)", "description": "It enhances details by inpainting each region within the detected area bundle (SEGS) after enlarging them based on the guide size.", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Detailer", "output_node": false}, "DetailerForEachDebugPipe": {"input": {"required": {"image": ["IMAGE"], "segs": ["SEGS"], "guide_size": ["FLOAT", {"default": 512, "min": 64, "max": 16384, "step": 8}], "guide_size_for": ["BOOLEAN", {"default": true, "label_on": "bbox", "label_off": "crop_region"}], "max_size": ["FLOAT", {"default": 1024, "min": 64, "max": 16384, "step": 8}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "AYS SDXL", "AYS SD1", "AYS SVD", "GITS[coeff=1.2]", "LTXV[default]", "OSS FLUX", "OSS Wan", "OSS Chroma"]], "denoise": ["FLOAT", {"default": 0.5, "min": 0.0001, "max": 1.0, "step": 0.01}], "feather": ["INT", {"default": 5, "min": 0, "max": 100, "step": 1}], "noise_mask": ["BOOLEAN", {"default": true, "label_on": "enabled", "label_off": "disabled"}], "force_inpaint": ["BOOLEAN", {"default": true, "label_on": "enabled", "label_off": "disabled"}], "basic_pipe": ["BASIC_PIPE", {"tooltip": "If the `ImpactDummyInput` is connected to the model in the basic_pipe, the inference stage is skipped."}], "wildcard": ["STRING", {"multiline": true, "dynamicPrompts": false}], "refiner_ratio": ["FLOAT", {"default": 0.2, "min": 0.0, "max": 1.0}], "cycle": ["INT", {"default": 1, "min": 1, "max": 10, "step": 1}]}, "optional": {"detailer_hook": ["DETAILER_HOOK"], "refiner_basic_pipe_opt": ["BASIC_PIPE"], "inpaint_model": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}], "noise_mask_feather": ["INT", {"default": 20, "min": 0, "max": 100, "step": 1}], "scheduler_func_opt": ["SCHEDULER_FUNC"], "tiled_encode": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}], "tiled_decode": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}]}}, "input_order": {"required": ["image", "segs", "guide_size", "guide_size_for", "max_size", "seed", "steps", "cfg", "sampler_name", "scheduler", "denoise", "feather", "noise_mask", "force_inpaint", "basic_pipe", "wildcard", "refiner_ratio", "cycle"], "optional": ["detailer_hook", "refiner_basic_pipe_opt", "inpaint_model", "noise_mask_feather", "scheduler_func_opt", "tiled_encode", "tiled_decode"]}, "output": ["IMAGE", "SEGS", "BASIC_PIPE", "IMAGE", "IMAGE", "IMAGE", "IMAGE"], "output_is_list": [false, false, false, true, true, true, true], "output_name": ["image", "segs", "basic_pipe", "cropped", "cropped_refined", "cropped_refined_alpha", "cnet_images"], "name": "DetailerForEachDebugPipe", "display_name": "DetailerDebug (SEGS/pipe)", "description": "It enhances details by inpainting each region within the detected area bundle (SEGS) after enlarging them based on the guide size.", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Detailer", "output_node": false}, "DetailerForEachPipeForAnimateDiff": {"input": {"required": {"image_frames": ["IMAGE"], "segs": ["SEGS"], "guide_size": ["FLOAT", {"default": 512, "min": 64, "max": 16384, "step": 8}], "guide_size_for": ["BOOLEAN", {"default": true, "label_on": "bbox", "label_off": "crop_region"}], "max_size": ["FLOAT", {"default": 1024, "min": 64, "max": 16384, "step": 8}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "AYS SDXL", "AYS SD1", "AYS SVD", "GITS[coeff=1.2]", "LTXV[default]", "OSS FLUX", "OSS Wan", "OSS Chroma"]], "denoise": ["FLOAT", {"default": 0.5, "min": 0.0001, "max": 1.0, "step": 0.01}], "feather": ["INT", {"default": 5, "min": 0, "max": 100, "step": 1}], "basic_pipe": ["BASIC_PIPE", {"tooltip": "If the `ImpactDummyInput` is connected to the model in the basic_pipe, the inference stage is skipped."}], "refiner_ratio": ["FLOAT", {"default": 0.2, "min": 0.0, "max": 1.0}]}, "optional": {"detailer_hook": ["DETAILER_HOOK"], "refiner_basic_pipe_opt": ["BASIC_PIPE"], "noise_mask_feather": ["INT", {"default": 20, "min": 0, "max": 100, "step": 1}], "scheduler_func_opt": ["SCHEDULER_FUNC"]}}, "input_order": {"required": ["image_frames", "segs", "guide_size", "guide_size_for", "max_size", "seed", "steps", "cfg", "sampler_name", "scheduler", "denoise", "feather", "basic_pipe", "refiner_ratio"], "optional": ["detailer_hook", "refiner_basic_pipe_opt", "noise_mask_feather", "scheduler_func_opt"]}, "output": ["IMAGE", "SEGS", "BASIC_PIPE", "IMAGE"], "output_is_list": [false, false, false, true], "output_name": ["image", "segs", "basic_pipe", "cnet_images"], "name": "DetailerForEachPipeForAnimateDiff", "display_name": "Detailer For Video (SEGS/pipe)", "description": "This node enhances details by inpainting each region within the detected area bundle (SEGS) after enlarging them based on the guide size.\nThis node is a specialized detailer node for enhancing video details, such as in AnimateDiff. It can handle cases where the masks contained in SEGS serve as batch masks spanning multiple frames.", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Detailer", "output_node": false}, "SAMDetectorCombined": {"input": {"required": {"sam_model": ["SAM_MODEL", {"tooltip": "Segment Anything Model for Silhouette Detection.\nBe sure to use the SAM_MODEL loaded through the SAMLoader (Impact) node as input."}], "segs": ["SEGS", {"tooltip": "This is the segment information detected by the detector.\nIt refines the Mask through the SAM (Segment Anything) detector for all areas pointed to by SEGS, and combines all Masks to return as a single Mask."}], "image": ["IMAGE", {"tooltip": "It is assumed that segs contains only the information about the detected areas, and does not include the image. SAM (Segment Anything) operates by referencing this image."}], "detection_hint": [["center-1", "horizontal-2", "vertical-2", "rect-4", "diamond-4", "mask-area", "mask-points", "mask-point-bbox", "none"], {"tooltip": "It is recommended to use only center-1.\nWhen refining the mask of SEGS with the SAM (Segment Anything) model, center-1 uses only the rectangular area of SEGS and a single point at the exact center as hints.\nOther options were added during the experimental stage and do not work well."}], "dilation": ["INT", {"default": 0, "min": -512, "max": 512, "step": 1, "tooltip": "Set the value to dilate the result mask. If the value is negative, it erodes the mask."}], "threshold": ["FLOAT", {"default": 0.93, "min": 0.0, "max": 1.0, "step": 0.01, "tooltip": "Set the sensitivity threshold for the mask detected by SAM (Segment Anything). A higher value generates a more specific mask with a narrower range. For example, when pointing to a person's area, it might detect clothes, which is a narrower range, instead of the entire person."}], "bbox_expansion": ["INT", {"default": 0, "min": 0, "max": 1000, "step": 1, "tooltip": "When performing SAM (Segment Anything) detection within the SEGS area, the rectangular area of SEGS is expanded and used as a hint."}], "mask_hint_threshold": ["FLOAT", {"default": 0.7, "min": 0.0, "max": 1.0, "step": 0.01, "tooltip": "When detection_hint is mask-area, the mask of SEGS is used as a point hint for SAM (Segment Anything).\nIn this case, only the areas of the mask with brightness values equal to or greater than mask_hint_threshold are used as hints."}], "mask_hint_use_negative": [["False", "Small", "Outter"], {"tooltip": "When detecting with SAM (Segment Anything), negative hints are applied as follows:\nSmall: When the SEGS is smaller than 10 pixels in size\nOuter: Sampling the image area outside the SEGS region at regular intervals"}]}}, "input_order": {"required": ["sam_model", "segs", "image", "detection_hint", "dilation", "threshold", "bbox_expansion", "mask_hint_threshold", "mask_hint_use_negative"]}, "output": ["MASK"], "output_is_list": [false], "output_name": ["MASK"], "name": "SAMDetectorCombined", "display_name": "SAMDetector (combined)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Detector", "output_node": false}, "SAMDetectorSegmented": {"input": {"required": {"sam_model": ["SAM_MODEL", {"tooltip": "Segment Anything Model for Silhouette Detection.\nBe sure to use the SAM_MODEL loaded through the SAMLoader (Impact) node as input."}], "segs": ["SEGS", {"tooltip": "This is the segment information detected by the detector.\nFor the SEGS region, the masks detected by SAM (Segment Anything) are created as a unified mask and a batch of individual masks."}], "image": ["IMAGE", {"tooltip": "It is assumed that segs contains only the information about the detected areas, and does not include the image. SAM (Segment Anything) operates by referencing this image."}], "detection_hint": [["center-1", "horizontal-2", "vertical-2", "rect-4", "diamond-4", "mask-area", "mask-points", "mask-point-bbox", "none"], {"tooltip": "It is recommended to use only center-1.\nWhen refining the mask of SEGS with the SAM (Segment Anything) model, center-1 uses only the rectangular area of SEGS and a single point at the exact center as hints.\nOther options were added during the experimental stage and do not work well."}], "dilation": ["INT", {"default": 0, "min": -512, "max": 512, "step": 1, "tooltip": "Set the value to dilate the result mask. If the value is negative, it erodes the mask."}], "threshold": ["FLOAT", {"default": 0.93, "min": 0.0, "max": 1.0, "step": 0.01}], "bbox_expansion": ["INT", {"default": 0, "min": 0, "max": 1000, "step": 1, "tooltip": "When performing SAM (Segment Anything) detection within the SEGS area, the rectangular area of SEGS is expanded and used as a hint."}], "mask_hint_threshold": ["FLOAT", {"default": 0.7, "min": 0.0, "max": 1.0, "step": 0.01, "tooltip": "When detection_hint is mask-area, the mask of SEGS is used as a point hint for SAM (Segment Anything).\nIn this case, only the areas of the mask with brightness values equal to or greater than mask_hint_threshold are used as hints."}], "mask_hint_use_negative": [["False", "Small", "Outter"], {"tooltip": "When detecting with SAM (Segment Anything), negative hints are applied as follows:\nSmall: When the SEGS is smaller than 10 pixels in size\nOuter: Sampling the image area outside the SEGS region at regular intervals"}]}}, "input_order": {"required": ["sam_model", "segs", "image", "detection_hint", "dilation", "threshold", "bbox_expansion", "mask_hint_threshold", "mask_hint_use_negative"]}, "output": ["MASK", "MASK"], "output_is_list": [false, false], "output_name": ["combined_mask", "batch_masks"], "name": "SAMDetectorSegmented", "display_name": "SAMDetector (segmented)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Detector", "output_node": false}, "FaceDetailer": {"input": {"required": {"image": ["IMAGE"], "model": ["MODEL", {"tooltip": "If the `ImpactDummyInput` is connected to the model, the inference stage is skipped."}], "clip": ["CLIP"], "vae": ["VAE"], "guide_size": ["FLOAT", {"default": 512, "min": 64, "max": 16384, "step": 8}], "guide_size_for": ["BOOLEAN", {"default": true, "label_on": "bbox", "label_off": "crop_region"}], "max_size": ["FLOAT", {"default": 1024, "min": 64, "max": 16384, "step": 8}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "AYS SDXL", "AYS SD1", "AYS SVD", "GITS[coeff=1.2]", "LTXV[default]", "OSS FLUX", "OSS Wan", "OSS Chroma"]], "positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "denoise": ["FLOAT", {"default": 0.5, "min": 0.0001, "max": 1.0, "step": 0.01}], "feather": ["INT", {"default": 5, "min": 0, "max": 100, "step": 1}], "noise_mask": ["BOOLEAN", {"default": true, "label_on": "enabled", "label_off": "disabled"}], "force_inpaint": ["BOOLEAN", {"default": true, "label_on": "enabled", "label_off": "disabled"}], "bbox_threshold": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 1.0, "step": 0.01}], "bbox_dilation": ["INT", {"default": 10, "min": -512, "max": 512, "step": 1}], "bbox_crop_factor": ["FLOAT", {"default": 3.0, "min": 1.0, "max": 10, "step": 0.1}], "sam_detection_hint": [["center-1", "horizontal-2", "vertical-2", "rect-4", "diamond-4", "mask-area", "mask-points", "mask-point-bbox", "none"]], "sam_dilation": ["INT", {"default": 0, "min": -512, "max": 512, "step": 1}], "sam_threshold": ["FLOAT", {"default": 0.93, "min": 0.0, "max": 1.0, "step": 0.01}], "sam_bbox_expansion": ["INT", {"default": 0, "min": 0, "max": 1000, "step": 1}], "sam_mask_hint_threshold": ["FLOAT", {"default": 0.7, "min": 0.0, "max": 1.0, "step": 0.01}], "sam_mask_hint_use_negative": [["False", "Small", "Outter"]], "drop_size": ["INT", {"min": 1, "max": 16384, "step": 1, "default": 10}], "bbox_detector": ["BBOX_DETECTOR"], "wildcard": ["STRING", {"multiline": true, "dynamicPrompts": false}], "cycle": ["INT", {"default": 1, "min": 1, "max": 10, "step": 1}]}, "optional": {"sam_model_opt": ["SAM_MODEL"], "segm_detector_opt": ["SEGM_DETECTOR"], "detailer_hook": ["DETAILER_HOOK"], "inpaint_model": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}], "noise_mask_feather": ["INT", {"default": 20, "min": 0, "max": 100, "step": 1}], "scheduler_func_opt": ["SCHEDULER_FUNC"], "tiled_encode": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}], "tiled_decode": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}]}}, "input_order": {"required": ["image", "model", "clip", "vae", "guide_size", "guide_size_for", "max_size", "seed", "steps", "cfg", "sampler_name", "scheduler", "positive", "negative", "denoise", "feather", "noise_mask", "force_inpaint", "bbox_threshold", "bbox_dilation", "bbox_crop_factor", "sam_detection_hint", "sam_dilation", "sam_threshold", "sam_bbox_expansion", "sam_mask_hint_threshold", "sam_mask_hint_use_negative", "drop_size", "bbox_detector", "wildcard", "cycle"], "optional": ["sam_model_opt", "segm_detector_opt", "detailer_hook", "inpaint_model", "noise_mask_feather", "scheduler_func_opt", "tiled_encode", "tiled_decode"]}, "output": ["IMAGE", "IMAGE", "IMAGE", "MASK", "DETAILER_PIPE", "IMAGE"], "output_is_list": [false, true, true, false, false, true], "output_name": ["image", "cropped_refined", "cropped_enhanced_alpha", "mask", "detailer_pipe", "cnet_images"], "name": "FaceDetailer", "display_name": "FaceDetailer", "description": "This node enhances details by automatically detecting specific objects in the input image using detection models (bbox, segm, sam) and regenerating the image by enlarging the detected area based on the guide size.\nAlthough this node is specialized to simplify the commonly used facial detail enhancement workflow, it can also be used for various automatic inpainting purposes depending on the detection model.", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Simple", "output_node": false}, "FaceDetailerPipe": {"input": {"required": {"image": ["IMAGE"], "detailer_pipe": ["DETAILER_PIPE", {"tooltip": "If the `ImpactDummyInput` is connected to the model in the detailer_pipe, the inference stage is skipped."}], "guide_size": ["FLOAT", {"default": 512, "min": 64, "max": 16384, "step": 8}], "guide_size_for": ["BOOLEAN", {"default": true, "label_on": "bbox", "label_off": "crop_region"}], "max_size": ["FLOAT", {"default": 1024, "min": 64, "max": 16384, "step": 8}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "AYS SDXL", "AYS SD1", "AYS SVD", "GITS[coeff=1.2]", "LTXV[default]", "OSS FLUX", "OSS Wan", "OSS Chroma"]], "denoise": ["FLOAT", {"default": 0.5, "min": 0.0001, "max": 1.0, "step": 0.01}], "feather": ["INT", {"default": 5, "min": 0, "max": 100, "step": 1}], "noise_mask": ["BOOLEAN", {"default": true, "label_on": "enabled", "label_off": "disabled"}], "force_inpaint": ["BOOLEAN", {"default": true, "label_on": "enabled", "label_off": "disabled"}], "bbox_threshold": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 1.0, "step": 0.01}], "bbox_dilation": ["INT", {"default": 10, "min": -512, "max": 512, "step": 1}], "bbox_crop_factor": ["FLOAT", {"default": 3.0, "min": 1.0, "max": 10, "step": 0.1}], "sam_detection_hint": [["center-1", "horizontal-2", "vertical-2", "rect-4", "diamond-4", "mask-area", "mask-points", "mask-point-bbox", "none"]], "sam_dilation": ["INT", {"default": 0, "min": -512, "max": 512, "step": 1}], "sam_threshold": ["FLOAT", {"default": 0.93, "min": 0.0, "max": 1.0, "step": 0.01}], "sam_bbox_expansion": ["INT", {"default": 0, "min": 0, "max": 1000, "step": 1}], "sam_mask_hint_threshold": ["FLOAT", {"default": 0.7, "min": 0.0, "max": 1.0, "step": 0.01}], "sam_mask_hint_use_negative": [["False", "Small", "Outter"]], "drop_size": ["INT", {"min": 1, "max": 16384, "step": 1, "default": 10}], "refiner_ratio": ["FLOAT", {"default": 0.2, "min": 0.0, "max": 1.0}], "cycle": ["INT", {"default": 1, "min": 1, "max": 10, "step": 1}]}, "optional": {"inpaint_model": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}], "noise_mask_feather": ["INT", {"default": 20, "min": 0, "max": 100, "step": 1}], "scheduler_func_opt": ["SCHEDULER_FUNC"], "tiled_encode": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}], "tiled_decode": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}]}}, "input_order": {"required": ["image", "detailer_pipe", "guide_size", "guide_size_for", "max_size", "seed", "steps", "cfg", "sampler_name", "scheduler", "denoise", "feather", "noise_mask", "force_inpaint", "bbox_threshold", "bbox_dilation", "bbox_crop_factor", "sam_detection_hint", "sam_dilation", "sam_threshold", "sam_bbox_expansion", "sam_mask_hint_threshold", "sam_mask_hint_use_negative", "drop_size", "refiner_ratio", "cycle"], "optional": ["inpaint_model", "noise_mask_feather", "scheduler_func_opt", "tiled_encode", "tiled_decode"]}, "output": ["IMAGE", "IMAGE", "IMAGE", "MASK", "DETAILER_PIPE", "IMAGE"], "output_is_list": [false, true, true, false, false, true], "output_name": ["image", "cropped_refined", "cropped_enhanced_alpha", "mask", "detailer_pipe", "cnet_images"], "name": "FaceDetailerPipe", "display_name": "FaceDetailer (pipe)", "description": "This node enhances details by automatically detecting specific objects in the input image using detection models (bbox, segm, sam) and regenerating the image by enlarging the detected area based on the guide size.\nAlthough this node is specialized to simplify the commonly used facial detail enhancement workflow, it can also be used for various automatic inpainting purposes depending on the detection model.", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Simple", "output_node": false}, "MaskDetailerPipe": {"input": {"required": {"image": ["IMAGE"], "mask": ["MASK"], "basic_pipe": ["BASIC_PIPE"], "guide_size": ["FLOAT", {"default": 512, "min": 64, "max": 16384, "step": 8}], "guide_size_for": ["BOOLEAN", {"default": true, "label_on": "mask bbox", "label_off": "crop region"}], "max_size": ["FLOAT", {"default": 1024, "min": 64, "max": 16384, "step": 8}], "mask_mode": ["BOOLEAN", {"default": true, "label_on": "masked only", "label_off": "whole"}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "AYS SDXL", "AYS SD1", "AYS SVD", "GITS[coeff=1.2]", "LTXV[default]", "OSS FLUX", "OSS Wan", "OSS Chroma"]], "denoise": ["FLOAT", {"default": 0.5, "min": 0.0001, "max": 1.0, "step": 0.01}], "feather": ["INT", {"default": 5, "min": 0, "max": 100, "step": 1}], "crop_factor": ["FLOAT", {"default": 3.0, "min": 1.0, "max": 10, "step": 0.1}], "drop_size": ["INT", {"min": 1, "max": 16384, "step": 1, "default": 10}], "refiner_ratio": ["FLOAT", {"default": 0.2, "min": 0.0, "max": 1.0}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 100}], "cycle": ["INT", {"default": 1, "min": 1, "max": 10, "step": 1}]}, "optional": {"refiner_basic_pipe_opt": ["BASIC_PIPE"], "detailer_hook": ["DETAILER_HOOK"], "inpaint_model": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}], "noise_mask_feather": ["INT", {"default": 20, "min": 0, "max": 100, "step": 1}], "bbox_fill": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}], "contour_fill": ["BOOLEAN", {"default": true, "label_on": "enabled", "label_off": "disabled"}], "scheduler_func_opt": ["SCHEDULER_FUNC"]}}, "input_order": {"required": ["image", "mask", "basic_pipe", "guide_size", "guide_size_for", "max_size", "mask_mode", "seed", "steps", "cfg", "sampler_name", "scheduler", "denoise", "feather", "crop_factor", "drop_size", "refiner_ratio", "batch_size", "cycle"], "optional": ["refiner_basic_pipe_opt", "detailer_hook", "inpaint_model", "noise_mask_feather", "bbox_fill", "contour_fill", "scheduler_func_opt"]}, "output": ["IMAGE", "IMAGE", "IMAGE", "BASIC_PIPE", "BASIC_PIPE"], "output_is_list": [false, true, true, false, false], "output_name": ["image", "cropped_refined", "cropped_enhanced_alpha", "basic_pipe", "refiner_basic_pipe_opt"], "name": "MaskDetailerPipe", "display_name": "MaskDetailer (pipe)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Detailer", "output_node": false}, "ToDetailerPipe": {"input": {"required": {"model": ["MODEL"], "clip": ["CLIP"], "vae": ["VAE"], "positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "bbox_detector": ["BBOX_DETECTOR"], "wildcard": ["STRING", {"multiline": true, "dynamicPrompts": false}], "Select to add LoRA": [["Select the LoRA to add to the text", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "Select to add Wildcard": [["Select the Wildcard to add to the text"]]}, "optional": {"sam_model_opt": ["SAM_MODEL"], "segm_detector_opt": ["SEGM_DETECTOR"], "detailer_hook": ["DETAILER_HOOK"]}}, "input_order": {"required": ["model", "clip", "vae", "positive", "negative", "bbox_detector", "wildcard", "Select to add LoRA", "Select to add Wildcard"], "optional": ["sam_model_opt", "segm_detector_opt", "detailer_hook"]}, "output": ["DETAILER_PIPE"], "output_is_list": [false], "output_name": ["detailer_pipe"], "name": "ToDetailerPipe", "display_name": "ToDetailerPipe", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Pipe", "output_node": false}, "ToDetailerPipeSDXL": {"input": {"required": {"model": ["MODEL"], "clip": ["CLIP"], "vae": ["VAE"], "positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "refiner_model": ["MODEL"], "refiner_clip": ["CLIP"], "refiner_positive": ["CONDITIONING"], "refiner_negative": ["CONDITIONING"], "bbox_detector": ["BBOX_DETECTOR"], "wildcard": ["STRING", {"multiline": true, "dynamicPrompts": false}], "Select to add LoRA": [["Select the LoRA to add to the text", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "Select to add Wildcard": [["Select the Wildcard to add to the text"]]}, "optional": {"sam_model_opt": ["SAM_MODEL"], "segm_detector_opt": ["SEGM_DETECTOR"], "detailer_hook": ["DETAILER_HOOK"]}}, "input_order": {"required": ["model", "clip", "vae", "positive", "negative", "refiner_model", "refiner_clip", "refiner_positive", "refiner_negative", "bbox_detector", "wildcard", "Select to add LoRA", "Select to add Wildcard"], "optional": ["sam_model_opt", "segm_detector_opt", "detailer_hook"]}, "output": ["DETAILER_PIPE"], "output_is_list": [false], "output_name": ["detailer_pipe"], "name": "ToDetailerPipeSDXL", "display_name": "ToDetailerPipeSDXL", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Pipe", "output_node": false}, "FromDetailerPipe": {"input": {"required": {"detailer_pipe": ["DETAILER_PIPE"]}}, "input_order": {"required": ["detailer_pipe"]}, "output": ["MODEL", "CLIP", "VAE", "CONDITIONING", "CONDITIONING", "BBOX_DETECTOR", "SAM_MODEL", "SEGM_DETECTOR", "DETAILER_HOOK"], "output_is_list": [false, false, false, false, false, false, false, false, false], "output_name": ["model", "clip", "vae", "positive", "negative", "bbox_detector", "sam_model_opt", "segm_detector_opt", "detailer_hook"], "name": "FromDetailerPipe", "display_name": "FromDetailerPipe", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Pipe", "output_node": false}, "FromDetailerPipe_v2": {"input": {"required": {"detailer_pipe": ["DETAILER_PIPE"]}}, "input_order": {"required": ["detailer_pipe"]}, "output": ["DETAILER_PIPE", "MODEL", "CLIP", "VAE", "CONDITIONING", "CONDITIONING", "BBOX_DETECTOR", "SAM_MODEL", "SEGM_DETECTOR", "DETAILER_HOOK"], "output_is_list": [false, false, false, false, false, false, false, false, false, false], "output_name": ["detailer_pipe", "model", "clip", "vae", "positive", "negative", "bbox_detector", "sam_model_opt", "segm_detector_opt", "detailer_hook"], "name": "FromDetailerPipe_v2", "display_name": "FromDetailerPipe_v2", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Pipe", "output_node": false}, "FromDetailerPipeSDXL": {"input": {"required": {"detailer_pipe": ["DETAILER_PIPE"]}}, "input_order": {"required": ["detailer_pipe"]}, "output": ["DETAILER_PIPE", "MODEL", "CLIP", "VAE", "CONDITIONING", "CONDITIONING", "BBOX_DETECTOR", "SAM_MODEL", "SEGM_DETECTOR", "DETAILER_HOOK", "MODEL", "CLIP", "CONDITIONING", "CONDITIONING"], "output_is_list": [false, false, false, false, false, false, false, false, false, false, false, false, false, false], "output_name": ["detailer_pipe", "model", "clip", "vae", "positive", "negative", "bbox_detector", "sam_model_opt", "segm_detector_opt", "detailer_hook", "refiner_model", "refiner_clip", "refiner_positive", "refiner_negative"], "name": "FromDetailerPipeSDXL", "display_name": "FromDetailer (SDXL/pipe)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Pipe", "output_node": false}, "AnyPipeToBasic": {"input": {"required": {"any_pipe": ["*"]}}, "input_order": {"required": ["any_pipe"]}, "output": ["BASIC_PIPE"], "output_is_list": [false], "output_name": ["basic_pipe"], "name": "AnyPipeToBasic", "display_name": "Any PIPE -> BasicPipe", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Pipe", "output_node": false}, "ToBasicPipe": {"input": {"required": {"model": ["MODEL"], "clip": ["CLIP"], "vae": ["VAE"], "positive": ["CONDITIONING"], "negative": ["CONDITIONING"]}}, "input_order": {"required": ["model", "clip", "vae", "positive", "negative"]}, "output": ["BASIC_PIPE"], "output_is_list": [false], "output_name": ["basic_pipe"], "name": "ToBasicPipe", "display_name": "ToBasicPipe", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Pipe", "output_node": false}, "FromBasicPipe": {"input": {"required": {"basic_pipe": ["BASIC_PIPE"]}}, "input_order": {"required": ["basic_pipe"]}, "output": ["MODEL", "CLIP", "VAE", "CONDITIONING", "CONDITIONING"], "output_is_list": [false, false, false, false, false], "output_name": ["model", "clip", "vae", "positive", "negative"], "name": "FromBasicPipe", "display_name": "FromBasicPipe", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Pipe", "output_node": false}, "FromBasicPipe_v2": {"input": {"required": {"basic_pipe": ["BASIC_PIPE"]}}, "input_order": {"required": ["basic_pipe"]}, "output": ["BASIC_PIPE", "MODEL", "CLIP", "VAE", "CONDITIONING", "CONDITIONING"], "output_is_list": [false, false, false, false, false, false], "output_name": ["basic_pipe", "model", "clip", "vae", "positive", "negative"], "name": "FromBasicPipe_v2", "display_name": "FromBasicPipe_v2", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Pipe", "output_node": false}, "BasicPipeToDetailerPipe": {"input": {"required": {"basic_pipe": ["BASIC_PIPE"], "bbox_detector": ["BBOX_DETECTOR"], "wildcard": ["STRING", {"multiline": true, "dynamicPrompts": false}], "Select to add LoRA": [["Select the LoRA to add to the text", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "Select to add Wildcard": [["Select the Wildcard to add to the text"]]}, "optional": {"sam_model_opt": ["SAM_MODEL"], "segm_detector_opt": ["SEGM_DETECTOR"], "detailer_hook": ["DETAILER_HOOK"]}}, "input_order": {"required": ["basic_pipe", "bbox_detector", "wildcard", "Select to add LoRA", "Select to add Wildcard"], "optional": ["sam_model_opt", "segm_detector_opt", "detailer_hook"]}, "output": ["DETAILER_PIPE"], "output_is_list": [false], "output_name": ["detailer_pipe"], "name": "BasicPipeToDetailerPipe", "display_name": "BasicPipe -> DetailerPipe", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Pipe", "output_node": false}, "BasicPipeToDetailerPipeSDXL": {"input": {"required": {"base_basic_pipe": ["BASIC_PIPE"], "refiner_basic_pipe": ["BASIC_PIPE"], "bbox_detector": ["BBOX_DETECTOR"], "wildcard": ["STRING", {"multiline": true, "dynamicPrompts": false}], "Select to add LoRA": [["Select the LoRA to add to the text", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "Select to add Wildcard": [["Select the Wildcard to add to the text"]]}, "optional": {"sam_model_opt": ["SAM_MODEL"], "segm_detector_opt": ["SEGM_DETECTOR"], "detailer_hook": ["DETAILER_HOOK"]}}, "input_order": {"required": ["base_basic_pipe", "refiner_basic_pipe", "bbox_detector", "wildcard", "Select to add LoRA", "Select to add Wildcard"], "optional": ["sam_model_opt", "segm_detector_opt", "detailer_hook"]}, "output": ["DETAILER_PIPE"], "output_is_list": [false], "output_name": ["detailer_pipe"], "name": "BasicPipeToDetailerPipeSDXL", "display_name": "BasicPipe -> DetailerPipe (SDXL)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Pipe", "output_node": false}, "DetailerPipeToBasicPipe": {"input": {"required": {"detailer_pipe": ["DETAILER_PIPE"]}}, "input_order": {"required": ["detailer_pipe"]}, "output": ["BASIC_PIPE", "BASIC_PIPE"], "output_is_list": [false, false], "output_name": ["base_basic_pipe", "refiner_basic_pipe"], "name": "DetailerPipeToBasicPipe", "display_name": "DetailerPipe -> BasicPipe", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Pipe", "output_node": false}, "EditBasicPipe": {"input": {"required": {"basic_pipe": ["BASIC_PIPE"]}, "optional": {"model": ["MODEL"], "clip": ["CLIP"], "vae": ["VAE"], "positive": ["CONDITIONING"], "negative": ["CONDITIONING"]}}, "input_order": {"required": ["basic_pipe"], "optional": ["model", "clip", "vae", "positive", "negative"]}, "output": ["BASIC_PIPE"], "output_is_list": [false], "output_name": ["basic_pipe"], "name": "EditBasicPipe", "display_name": "Edit BasicPipe", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Pipe", "output_node": false}, "EditDetailerPipe": {"input": {"required": {"detailer_pipe": ["DETAILER_PIPE"], "wildcard": ["STRING", {"multiline": true, "dynamicPrompts": false}], "Select to add LoRA": [["Select the LoRA to add to the text", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "Select to add Wildcard": [["Select the Wildcard to add to the text"]]}, "optional": {"model": ["MODEL"], "clip": ["CLIP"], "vae": ["VAE"], "positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "bbox_detector": ["BBOX_DETECTOR"], "sam_model": ["SAM_MODEL"], "segm_detector": ["SEGM_DETECTOR"], "detailer_hook": ["DETAILER_HOOK"]}}, "input_order": {"required": ["detailer_pipe", "wildcard", "Select to add LoRA", "Select to add Wildcard"], "optional": ["model", "clip", "vae", "positive", "negative", "bbox_detector", "sam_model", "segm_detector", "detailer_hook"]}, "output": ["DETAILER_PIPE"], "output_is_list": [false], "output_name": ["detailer_pipe"], "name": "EditDetailerPipe", "display_name": "Edit DetailerPipe", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Pipe", "output_node": false}, "EditDetailerPipeSDXL": {"input": {"required": {"detailer_pipe": ["DETAILER_PIPE"], "wildcard": ["STRING", {"multiline": true, "dynamicPrompts": false}], "Select to add LoRA": [["Select the LoRA to add to the text", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "Select to add Wildcard": [["Select the Wildcard to add to the text"]]}, "optional": {"model": ["MODEL"], "clip": ["CLIP"], "vae": ["VAE"], "positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "refiner_model": ["MODEL"], "refiner_clip": ["CLIP"], "refiner_positive": ["CONDITIONING"], "refiner_negative": ["CONDITIONING"], "bbox_detector": ["BBOX_DETECTOR"], "sam_model": ["SAM_MODEL"], "segm_detector": ["SEGM_DETECTOR"], "detailer_hook": ["DETAILER_HOOK"]}}, "input_order": {"required": ["detailer_pipe", "wildcard", "Select to add LoRA", "Select to add Wildcard"], "optional": ["model", "clip", "vae", "positive", "negative", "refiner_model", "refiner_clip", "refiner_positive", "refiner_negative", "bbox_detector", "sam_model", "segm_detector", "detailer_hook"]}, "output": ["DETAILER_PIPE"], "output_is_list": [false], "output_name": ["detailer_pipe"], "name": "EditDetailerPipeSDXL", "display_name": "Edit DetailerPipe (SDXL)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Pipe", "output_node": false}, "LatentPixelScale": {"input": {"required": {"samples": ["LATENT"], "scale_method": [["nearest-exact", "bilinear", "lanczos", "area"]], "scale_factor": ["FLOAT", {"default": 1.5, "min": 0.1, "max": 10000, "step": 0.05}], "vae": ["VAE"], "use_tiled_vae": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}]}, "optional": {"upscale_model_opt": ["UPSCALE_MODEL"]}}, "input_order": {"required": ["samples", "scale_method", "scale_factor", "vae", "use_tiled_vae"], "optional": ["upscale_model_opt"]}, "output": ["LATENT", "IMAGE"], "output_is_list": [false, false], "output_name": ["LATENT", "IMAGE"], "name": "LatentPixelScale", "display_name": "Latent Scale (on Pixel Space)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Upscale", "output_node": false}, "PixelKSampleUpscalerProvider": {"input": {"required": {"scale_method": [["nearest-exact", "bilinear", "lanczos", "area"]], "model": ["MODEL"], "vae": ["VAE"], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "AYS SDXL", "AYS SD1", "AYS SVD", "GITS[coeff=1.2]", "LTXV[default]", "OSS FLUX", "OSS Wan", "OSS Chroma"]], "positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "use_tiled_vae": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}], "tile_size": ["INT", {"default": 512, "min": 320, "max": 4096, "step": 64}]}, "optional": {"upscale_model_opt": ["UPSCALE_MODEL"], "pk_hook_opt": ["PK_HOOK"], "scheduler_func_opt": ["SCHEDULER_FUNC"]}}, "input_order": {"required": ["scale_method", "model", "vae", "seed", "steps", "cfg", "sampler_name", "scheduler", "positive", "negative", "denoise", "use_tiled_vae", "tile_size"], "optional": ["upscale_model_opt", "pk_hook_opt", "scheduler_func_opt"]}, "output": ["UPSCALER"], "output_is_list": [false], "output_name": ["UPSCALER"], "name": "PixelKSampleUpscalerProvider", "display_name": "PixelKSampleUpscalerProvider", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Upscale", "output_node": false}, "PixelKSampleUpscalerProviderPipe": {"input": {"required": {"scale_method": [["nearest-exact", "bilinear", "lanczos", "area"]], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "AYS SDXL", "AYS SD1", "AYS SVD", "GITS[coeff=1.2]", "LTXV[default]", "OSS FLUX", "OSS Wan", "OSS Chroma"]], "denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "use_tiled_vae": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}], "basic_pipe": ["BASIC_PIPE"], "tile_size": ["INT", {"default": 512, "min": 320, "max": 4096, "step": 64}]}, "optional": {"upscale_model_opt": ["UPSCALE_MODEL"], "pk_hook_opt": ["PK_HOOK"], "scheduler_func_opt": ["SCHEDULER_FUNC"], "tile_cnet_opt": ["CONTROL_NET"], "tile_cnet_strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["scale_method", "seed", "steps", "cfg", "sampler_name", "scheduler", "denoise", "use_tiled_vae", "basic_pipe", "tile_size"], "optional": ["upscale_model_opt", "pk_hook_opt", "scheduler_func_opt", "tile_cnet_opt", "tile_cnet_strength"]}, "output": ["UPSCALER"], "output_is_list": [false], "output_name": ["UPSCALER"], "name": "PixelKSampleUpscalerProviderPipe", "display_name": "PixelKSampleUpscalerProviderPipe", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Upscale", "output_node": false}, "IterativeLatentUpscale": {"input": {"required": {"samples": ["LATENT"], "upscale_factor": ["FLOAT", {"default": 1.5, "min": 1, "max": 10000, "step": 0.1}], "steps": ["INT", {"default": 3, "min": 1, "max": 10000, "step": 1}], "temp_prefix": ["STRING", {"default": ""}], "upscaler": ["UPSCALER"], "step_mode": [["simple", "geometric"], {"default": "simple"}]}, "hidden": {"unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["samples", "upscale_factor", "steps", "temp_prefix", "upscaler", "step_mode"], "hidden": ["unique_id"]}, "output": ["LATENT", "VAE"], "output_is_list": [false, false], "output_name": ["latent", "vae"], "name": "IterativeLatentUpscale", "display_name": "Iterative Upscale (Latent/on Pixel Space)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Upscale", "output_node": false}, "IterativeImageUpscale": {"input": {"required": {"pixels": ["IMAGE"], "upscale_factor": ["FLOAT", {"default": 1.5, "min": 1, "max": 10000, "step": 0.1}], "steps": ["INT", {"default": 3, "min": 1, "max": 10000, "step": 1}], "temp_prefix": ["STRING", {"default": ""}], "upscaler": ["UPSCALER"], "vae": ["VAE"], "step_mode": [["simple", "geometric"], {"default": "simple"}]}, "hidden": {"unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["pixels", "upscale_factor", "steps", "temp_prefix", "upscaler", "vae", "step_mode"], "hidden": ["unique_id"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["image"], "name": "IterativeImageUpscale", "display_name": "Iterative Upscale (Image)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Upscale", "output_node": false}, "PixelTiledKSampleUpscalerProvider": {"input": {"required": {"scale_method": [["nearest-exact", "bilinear", "lanczos", "area"]], "model": ["MODEL"], "vae": ["VAE"], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "tile_width": ["INT", {"default": 512, "min": 320, "max": 16384, "step": 64}], "tile_height": ["INT", {"default": 512, "min": 320, "max": 16384, "step": 64}], "tiling_strategy": [["random", "padded", "simple"]]}, "optional": {"upscale_model_opt": ["UPSCALE_MODEL"], "pk_hook_opt": ["PK_HOOK"], "tile_cnet_opt": ["CONTROL_NET"], "tile_cnet_strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "overlap": ["INT", {"default": 64, "min": 0, "max": 4096, "step": 32}]}}, "input_order": {"required": ["scale_method", "model", "vae", "seed", "steps", "cfg", "sampler_name", "scheduler", "positive", "negative", "denoise", "tile_width", "tile_height", "tiling_strategy"], "optional": ["upscale_model_opt", "pk_hook_opt", "tile_cnet_opt", "tile_cnet_strength", "overlap"]}, "output": ["UPSCALER"], "output_is_list": [false], "output_name": ["UPSCALER"], "name": "PixelTiledKSampleUpscalerProvider", "display_name": "PixelTiledKSampleUpscalerProvider", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Upscale", "output_node": false}, "PixelTiledKSampleUpscalerProviderPipe": {"input": {"required": {"scale_method": [["nearest-exact", "bilinear", "lanczos", "area"]], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}], "tile_width": ["INT", {"default": 512, "min": 320, "max": 16384, "step": 64}], "tile_height": ["INT", {"default": 512, "min": 320, "max": 16384, "step": 64}], "tiling_strategy": [["random", "padded", "simple"]], "basic_pipe": ["BASIC_PIPE"]}, "optional": {"upscale_model_opt": ["UPSCALE_MODEL"], "pk_hook_opt": ["PK_HOOK"], "tile_cnet_opt": ["CONTROL_NET"], "tile_cnet_strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["scale_method", "seed", "steps", "cfg", "sampler_name", "scheduler", "denoise", "tile_width", "tile_height", "tiling_strategy", "basic_pipe"], "optional": ["upscale_model_opt", "pk_hook_opt", "tile_cnet_opt", "tile_cnet_strength"]}, "output": ["UPSCALER"], "output_is_list": [false], "output_name": ["UPSCALER"], "name": "PixelTiledKSampleUpscalerProviderPipe", "display_name": "PixelTiledKSampleUpscalerProviderPipe", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Upscale", "output_node": false}, "TwoSamplersForMaskUpscalerProvider": {"input": {"required": {"scale_method": [["nearest-exact", "bilinear", "lanczos", "area"]], "full_sample_schedule": [["none", "interleave1", "interleave2", "interleave3", "last1", "last2", "interleave1+last1", "interleave2+last1", "interleave3+last1"]], "use_tiled_vae": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}], "base_sampler": ["KSAMPLER"], "mask_sampler": ["KSAMPLER"], "mask": ["MASK"], "vae": ["VAE"], "tile_size": ["INT", {"default": 512, "min": 320, "max": 4096, "step": 64}]}, "optional": {"full_sampler_opt": ["KSAMPLER"], "upscale_model_opt": ["UPSCALE_MODEL"], "pk_hook_base_opt": ["PK_HOOK"], "pk_hook_mask_opt": ["PK_HOOK"], "pk_hook_full_opt": ["PK_HOOK"]}}, "input_order": {"required": ["scale_method", "full_sample_schedule", "use_tiled_vae", "base_sampler", "mask_sampler", "mask", "vae", "tile_size"], "optional": ["full_sampler_opt", "upscale_model_opt", "pk_hook_base_opt", "pk_hook_mask_opt", "pk_hook_full_opt"]}, "output": ["UPSCALER"], "output_is_list": [false], "output_name": ["UPSCALER"], "name": "TwoSamplersForMaskUpscalerProvider", "display_name": "TwoSamplersForMask Upscaler Provider", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Upscale", "output_node": false}, "TwoSamplersForMaskUpscalerProviderPipe": {"input": {"required": {"scale_method": [["nearest-exact", "bilinear", "lanczos", "area"]], "full_sample_schedule": [["none", "interleave1", "interleave2", "interleave3", "last1", "last2", "interleave1+last1", "interleave2+last1", "interleave3+last1"]], "use_tiled_vae": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}], "base_sampler": ["KSAMPLER"], "mask_sampler": ["KSAMPLER"], "mask": ["MASK"], "basic_pipe": ["BASIC_PIPE"], "tile_size": ["INT", {"default": 512, "min": 320, "max": 4096, "step": 64}]}, "optional": {"full_sampler_opt": ["KSAMPLER"], "upscale_model_opt": ["UPSCALE_MODEL"], "pk_hook_base_opt": ["PK_HOOK"], "pk_hook_mask_opt": ["PK_HOOK"], "pk_hook_full_opt": ["PK_HOOK"]}}, "input_order": {"required": ["scale_method", "full_sample_schedule", "use_tiled_vae", "base_sampler", "mask_sampler", "mask", "basic_pipe", "tile_size"], "optional": ["full_sampler_opt", "upscale_model_opt", "pk_hook_base_opt", "pk_hook_mask_opt", "pk_hook_full_opt"]}, "output": ["UPSCALER"], "output_is_list": [false], "output_name": ["UPSCALER"], "name": "TwoSamplersForMaskUpscalerProviderPipe", "display_name": "TwoSamplersForMask Upscaler Provider (pipe)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Upscale", "output_node": false}, "PixelKSampleHookCombine": {"input": {"required": {"hook1": ["PK_HOOK"], "hook2": ["PK_HOOK"]}}, "input_order": {"required": ["hook1", "hook2"]}, "output": ["PK_HOOK"], "output_is_list": [false], "output_name": ["PK_HOOK"], "name": "PixelKSampleHookCombine", "display_name": "PixelKSampleHookCombine", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Upscale", "output_node": false}, "DenoiseScheduleHookProvider": {"input": {"required": {"schedule_for_iteration": [["simple"]], "target_denoise": ["FLOAT", {"default": 0.2, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["schedule_for_iteration", "target_denoise"]}, "output": ["PK_HOOK"], "output_is_list": [false], "output_name": ["PK_HOOK"], "name": "DenoiseScheduleHookProvider", "display_name": "DenoiseScheduleHookProvider", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Upscale", "output_node": false}, "StepsScheduleHookProvider": {"input": {"required": {"schedule_for_iteration": [["simple"]], "target_steps": ["INT", {"default": 20, "min": 1, "max": 10000}]}}, "input_order": {"required": ["schedule_for_iteration", "target_steps"]}, "output": ["PK_HOOK"], "output_is_list": [false], "output_name": ["PK_HOOK"], "name": "StepsScheduleHookProvider", "display_name": "StepsScheduleHookProvider", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Upscale", "output_node": false}, "CfgScheduleHookProvider": {"input": {"required": {"schedule_for_iteration": [["simple"]], "target_cfg": ["FLOAT", {"default": 3.0, "min": 0.0, "max": 100.0}]}}, "input_order": {"required": ["schedule_for_iteration", "target_cfg"]}, "output": ["PK_HOOK"], "output_is_list": [false], "output_name": ["PK_HOOK"], "name": "CfgScheduleHookProvider", "display_name": "CfgScheduleHookProvider", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Upscale", "output_node": false}, "NoiseInjectionHookProvider": {"input": {"required": {"schedule_for_iteration": [["simple"]], "source": [["CPU", "GPU"]], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "start_strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 200.0, "step": 0.01}], "end_strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 200.0, "step": 0.01}]}}, "input_order": {"required": ["schedule_for_iteration", "source", "seed", "start_strength", "end_strength"]}, "output": ["PK_HOOK"], "output_is_list": [false], "output_name": ["PK_HOOK"], "name": "NoiseInjectionHookProvider", "display_name": "NoiseInjectionHookProvider", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Upscale", "output_node": false}, "UnsamplerHookProvider": {"input": {"required": {"model": ["MODEL"], "steps": ["INT", {"default": 25, "min": 1, "max": 10000}], "start_end_at_step": ["INT", {"default": 21, "min": 0, "max": 10000}], "end_end_at_step": ["INT", {"default": 24, "min": 0, "max": 10000}], "cfg": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "normalize": [["disable", "enable"]], "positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "schedule_for_iteration": [["simple"]]}}, "input_order": {"required": ["model", "steps", "start_end_at_step", "end_end_at_step", "cfg", "sampler_name", "scheduler", "normalize", "positive", "negative", "schedule_for_iteration"]}, "output": ["PK_HOOK"], "output_is_list": [false], "output_name": ["PK_HOOK"], "name": "UnsamplerHookProvider", "display_name": "UnsamplerHookProvider", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Upscale", "output_node": false}, "CoreMLDetailerHookProvider": {"input": {"required": {"mode": [["512x512", "768x768", "512x768", "768x512"]]}}, "input_order": {"required": ["mode"]}, "output": ["DETAILER_HOOK"], "output_is_list": [false], "output_name": ["DETAILER_HOOK"], "name": "CoreMLDetailerHookProvider", "display_name": "CoreMLDetailerHookProvider", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Detailer", "output_node": false}, "PreviewDetailerHookProvider": {"input": {"required": {"quality": ["INT", {"default": 95, "min": 20, "max": 100}]}, "hidden": {"unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["quality"], "hidden": ["unique_id"]}, "output": ["DETAILER_HOOK", "UPSCALER_HOOK"], "output_is_list": [false, false], "output_name": ["DETAILER_HOOK", "UPSCALER_HOOK"], "name": "PreviewDetailerHookProvider", "display_name": "PreviewDetailerHookProvider", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "BlackPatchRetryHookProvider": {"input": {"required": {"mean_thresh": ["INT", {"default": 10, "min": 0, "max": 255}], "var_thresh": ["INT", {"default": 5, "min": 0, "max": 255}]}}, "input_order": {"required": ["mean_thresh", "var_thresh"]}, "output": ["DETAILER_HOOK"], "output_is_list": [false], "output_name": ["DETAILER_HOOK"], "name": "BlackPatchRetryHookProvider", "display_name": "BlackPatchRetryHookProvider", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "CustomSamplerDetailerHookProvider": {"input": {"required": {"sampler": ["SAMPLER"]}}, "input_order": {"required": ["sampler"]}, "output": ["DETAILER_HOOK"], "output_is_list": [false], "output_name": ["DETAILER_HOOK"], "name": "CustomSamplerDetailerHookProvider", "display_name": "CustomSamplerDetailerHookProvider", "description": "Apply a hook that allows you to use a custom sampler in the Detailer nodes. When using `DetailerHookCombine`, the sampler from the first hook is applied.", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Detailer", "output_node": false}, "LamaRemoverDetailerHookProvider": {"input": {"required": {"mask_threshold": ["INT", {"default": 250, "min": 0, "max": 255, "step": 1, "display": "slider"}], "gaussblur_radius": ["INT", {"default": 8, "min": 0, "max": 20, "step": 1, "display": "slider"}], "skip_sampling": ["BOOLEAN", {"default": true}]}}, "input_order": {"required": ["mask_threshold", "gaussblur_radius", "skip_sampling"]}, "output": ["DETAILER_HOOK"], "output_is_list": [false], "output_name": ["DETAILER_HOOK"], "name": "LamaRemoverDetailerHookProvider", "display_name": "LamaRemoverDetailerHookProvider", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "DetailerHookCombine": {"input": {"required": {"hook1": ["DETAILER_HOOK"], "hook2": ["DETAILER_HOOK"]}}, "input_order": {"required": ["hook1", "hook2"]}, "output": ["DETAILER_HOOK"], "output_is_list": [false], "output_name": ["DETAILER_HOOK"], "name": "DetailerHookCombine", "display_name": "DetailerHookCombine", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Upscale", "output_node": false}, "NoiseInjectionDetailerHookProvider": {"input": {"required": {"schedule_for_cycle": [["skip_start", "from_start"]], "source": [["CPU", "GPU"]], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "start_strength": ["FLOAT", {"default": 2.0, "min": 0.0, "max": 200.0, "step": 0.01}], "end_strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 200.0, "step": 0.01}]}}, "input_order": {"required": ["schedule_for_cycle", "source", "seed", "start_strength", "end_strength"]}, "output": ["DETAILER_HOOK"], "output_is_list": [false], "output_name": ["DETAILER_HOOK"], "name": "NoiseInjectionDetailerHookProvider", "display_name": "NoiseInjectionDetailerHookProvider", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Detailer", "output_node": false}, "UnsamplerDetailerHookProvider": {"input": {"required": {"model": ["MODEL"], "steps": ["INT", {"default": 25, "min": 1, "max": 10000}], "start_end_at_step": ["INT", {"default": 21, "min": 0, "max": 10000}], "end_end_at_step": ["INT", {"default": 24, "min": 0, "max": 10000}], "cfg": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "normalize": [["disable", "enable"]], "positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "schedule_for_cycle": [["skip_start", "from_start"]]}}, "input_order": {"required": ["model", "steps", "start_end_at_step", "end_end_at_step", "cfg", "sampler_name", "scheduler", "normalize", "positive", "negative", "schedule_for_cycle"]}, "output": ["DETAILER_HOOK"], "output_is_list": [false], "output_name": ["DETAILER_HOOK"], "name": "UnsamplerDetailerHookProvider", "display_name": "UnsamplerDetailerHookProvider", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Detailer", "output_node": false}, "DenoiseSchedulerDetailerHookProvider": {"input": {"required": {"schedule_for_cycle": [["simple"]], "target_denoise": ["FLOAT", {"default": 0.3, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["schedule_for_cycle", "target_denoise"]}, "output": ["DETAILER_HOOK"], "output_is_list": [false], "output_name": ["DETAILER_HOOK"], "name": "DenoiseSchedulerDetailerHookProvider", "display_name": "DenoiseSchedulerDetailerHookProvider", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Detailer", "output_node": false}, "SEGSOrderedFilterDetailerHookProvider": {"input": {"required": {"target": [["area(=w*h)", "width", "height", "x1", "y1", "x2", "y2"]], "order": ["BOOLEAN", {"default": true, "label_on": "descending", "label_off": "ascending"}], "take_start": ["INT", {"default": 0, "min": 0, "max": 9223372036854775807, "step": 1}], "take_count": ["INT", {"default": 1, "min": 0, "max": 9223372036854775807, "step": 1}]}}, "input_order": {"required": ["target", "order", "take_start", "take_count"]}, "output": ["DETAILER_HOOK"], "output_is_list": [false], "output_name": ["DETAILER_HOOK"], "name": "SEGSOrderedFilterDetailerHookProvider", "display_name": "SEGSOrderedFilterDetailerHookProvider", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "SEGSRangeFilterDetailerHookProvider": {"input": {"required": {"target": [["area(=w*h)", "width", "height", "x1", "y1", "x2", "y2", "length_percent"]], "mode": ["BOOLEAN", {"default": true, "label_on": "inside", "label_off": "outside"}], "min_value": ["INT", {"default": 0, "min": 0, "max": 9223372036854775807, "step": 1}], "max_value": ["INT", {"default": 67108864, "min": 0, "max": 9223372036854775807, "step": 1}]}}, "input_order": {"required": ["target", "mode", "min_value", "max_value"]}, "output": ["DETAILER_HOOK"], "output_is_list": [false], "output_name": ["DETAILER_HOOK"], "name": "SEGSRangeFilterDetailerHookProvider", "display_name": "SEGSRangeFilterDetailerHookProvider", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "SEGSLabelFilterDetailerHookProvider": {"input": {"required": {"segs": ["SEGS"], "preset": [["all", "hand", "face", "mouth", "eyes", "eyebrows", "pupils", "left_eyebrow", "left_eye", "left_pupil", "right_eyebrow", "right_eye", "right_pupil", "short_sleeved_shirt", "long_sleeved_shirt", "short_sleeved_outwear", "long_sleeved_outwear", "vest", "sling", "shorts", "trousers", "skirt", "short_sleeved_dress", "long_sleeved_dress", "vest_dress", "sling_dress", "person", "bicycle", "car", "motorcycle", "airplane", "bus", "train", "truck", "boat", "traffic light", "fire hydrant", "stop sign", "parking meter", "bench", "bird", "cat", "dog", "horse", "sheep", "cow", "elephant", "bear", "zebra", "giraffe", "backpack", "umbrella", "handbag", "tie", "suitcase", "frisbee", "skis", "snowboard", "sports ball", "kite", "baseball bat", "baseball glove", "skateboard", "surfboard", "tennis racket", "bottle", "wine glass", "cup", "fork", "knife", "spoon", "bowl", "banana", "apple", "sandwich", "orange", "broccoli", "carrot", "hot dog", "pizza", "donut", "cake", "chair", "couch", "potted plant", "bed", "dining table", "toilet", "tv", "laptop", "mouse", "remote", "keyboard", "cell phone", "microwave", "oven", "toaster", "sink", "refrigerator", "book", "clock", "vase", "scissors", "teddy bear", "hair drier", "toothbrush"]], "labels": ["STRING", {"multiline": true, "placeholder": "List the types of segments to be allowed, separated by commas"}]}}, "input_order": {"required": ["segs", "preset", "labels"]}, "output": ["DETAILER_HOOK"], "output_is_list": [false], "output_name": ["DETAILER_HOOK"], "name": "SEGSLabelFilterDetailerHookProvider", "display_name": "SEGSLabelFilterDetailerHookProvider", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "VariationNoiseDetailerHookProvider": {"input": {"required": {"seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "strength": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["seed", "strength"]}, "output": ["DETAILER_HOOK"], "output_is_list": [false], "output_name": ["DETAILER_HOOK"], "name": "VariationNoiseDetailerHookProvider", "display_name": "VariationNoiseDetailerHookProvider", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Detailer", "output_node": false}, "BitwiseAndMask": {"input": {"required": {"mask1": ["MASK"], "mask2": ["MASK"]}}, "input_order": {"required": ["mask1", "mask2"]}, "output": ["MASK"], "output_is_list": [false], "output_name": ["MASK"], "name": "BitwiseAndMask", "display_name": "Pixelwise(MASK & MASK)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Operation", "output_node": false}, "SubtractMask": {"input": {"required": {"mask1": ["MASK"], "mask2": ["MASK"]}}, "input_order": {"required": ["mask1", "mask2"]}, "output": ["MASK"], "output_is_list": [false], "output_name": ["MASK"], "name": "SubtractMask", "display_name": "Pixelwise(MASK - MASK)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Operation", "output_node": false}, "AddMask": {"input": {"required": {"mask1": ["MASK"], "mask2": ["MASK"]}}, "input_order": {"required": ["mask1", "mask2"]}, "output": ["MASK"], "output_is_list": [false], "output_name": ["MASK"], "name": "AddMask", "display_name": "Pixelwise(MASK + MASK)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Operation", "output_node": false}, "MaskRectArea": {"input": {"required": {}, "hidden": {"extra_pnginfo": "EXTRA_PNGINFO", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": [], "hidden": ["extra_pnginfo", "unique_id"]}, "output": ["MASK"], "output_is_list": [false], "output_name": ["MASK"], "name": "MaskRectArea", "display_name": "Mask Rect Area", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Operation", "output_node": false}, "MaskRectAreaAdvanced": {"input": {"required": {}, "hidden": {"extra_pnginfo": "EXTRA_PNGINFO", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": [], "hidden": ["extra_pnginfo", "unique_id"]}, "output": ["MASK"], "output_is_list": [false], "output_name": ["MASK"], "name": "MaskRectAreaAdvanced", "display_name": "Mask Rect Area (Advanced)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Operation", "output_node": false}, "ImpactSegsAndMask": {"input": {"required": {"segs": ["SEGS"], "mask": ["MASK"]}}, "input_order": {"required": ["segs", "mask"]}, "output": ["SEGS"], "output_is_list": [false], "output_name": ["SEGS"], "name": "ImpactSegsAndMask", "display_name": "Pixelwise(SEGS & MASK)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Operation", "output_node": false}, "ImpactSegsAndMaskForEach": {"input": {"required": {"segs": ["SEGS"], "masks": ["MASK"]}}, "input_order": {"required": ["segs", "masks"]}, "output": ["SEGS"], "output_is_list": [false], "output_name": ["SEGS"], "name": "ImpactSegsAndMaskForEach", "display_name": "Pixelwise(SEGS & MASKS ForEach)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Operation", "output_node": false}, "EmptySegs": {"input": {"required": {}}, "input_order": {"required": []}, "output": ["SEGS"], "output_is_list": [false], "output_name": ["SEGS"], "name": "EmptySegs", "display_name": "EmptySegs", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactFlattenMask": {"input": {"required": {"masks": ["MASK"]}}, "input_order": {"required": ["masks"]}, "output": ["MASK"], "output_is_list": [false], "output_name": ["MASK"], "name": "ImpactFlattenMask", "display_name": "Flatten Mask Batch", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Operation", "output_node": false}, "MediaPipeFaceMeshToSEGS": {"input": {"required": {"image": ["IMAGE"], "crop_factor": ["FLOAT", {"default": 3.0, "min": 1.0, "max": 100, "step": 0.1}], "bbox_fill": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}], "crop_min_size": ["INT", {"min": 10, "max": 16384, "step": 1, "default": 50}], "drop_size": ["INT", {"min": 1, "max": 16384, "step": 1, "default": 1}], "dilation": ["INT", {"default": 0, "min": -512, "max": 512, "step": 1}], "face": ["BOOLEAN", {"default": true, "label_on": "Enabled", "label_off": "Disabled"}], "mouth": ["BOOLEAN", {"default": false, "label_on": "Enabled", "label_off": "Disabled"}], "left_eyebrow": ["BOOLEAN", {"default": false, "label_on": "Enabled", "label_off": "Disabled"}], "left_eye": ["BOOLEAN", {"default": false, "label_on": "Enabled", "label_off": "Disabled"}], "left_pupil": ["BOOLEAN", {"default": false, "label_on": "Enabled", "label_off": "Disabled"}], "right_eyebrow": ["BOOLEAN", {"default": false, "label_on": "Enabled", "label_off": "Disabled"}], "right_eye": ["BOOLEAN", {"default": false, "label_on": "Enabled", "label_off": "Disabled"}], "right_pupil": ["BOOLEAN", {"default": false, "label_on": "Enabled", "label_off": "Disabled"}]}}, "input_order": {"required": ["image", "crop_factor", "bbox_fill", "crop_min_size", "drop_size", "dilation", "face", "mouth", "left_eyebrow", "left_eye", "left_pupil", "right_eyebrow", "right_eye", "right_pupil"]}, "output": ["SEGS"], "output_is_list": [false], "output_name": ["SEGS"], "name": "MediaPipeFaceMeshToSEGS", "display_name": "MediaPipe FaceMesh to SEGS", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Operation", "output_node": false}, "MaskToSEGS": {"input": {"required": {"mask": ["MASK"], "combined": ["BOOLEAN", {"default": false, "label_on": "True", "label_off": "False"}], "crop_factor": ["FLOAT", {"default": 3.0, "min": 1.0, "max": 100, "step": 0.1}], "bbox_fill": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}], "drop_size": ["INT", {"min": 1, "max": 16384, "step": 1, "default": 10}], "contour_fill": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}]}}, "input_order": {"required": ["mask", "combined", "crop_factor", "bbox_fill", "drop_size", "contour_fill"]}, "output": ["SEGS"], "output_is_list": [false], "output_name": ["SEGS"], "name": "MaskToSEGS", "display_name": "MASK to SEGS", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Operation", "output_node": false}, "MaskToSEGS_for_AnimateDiff": {"input": {"required": {"mask": ["MASK"], "combined": ["BOOLEAN", {"default": false, "label_on": "True", "label_off": "False"}], "crop_factor": ["FLOAT", {"default": 3.0, "min": 1.0, "max": 100, "step": 0.1}], "bbox_fill": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}], "drop_size": ["INT", {"min": 1, "max": 16384, "step": 1, "default": 10}], "contour_fill": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}]}}, "input_order": {"required": ["mask", "combined", "crop_factor", "bbox_fill", "drop_size", "contour_fill"]}, "output": ["SEGS"], "output_is_list": [false], "output_name": ["SEGS"], "name": "MaskToSEGS_for_AnimateDiff", "display_name": "MASK to SEGS for Video", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Operation", "output_node": false}, "ToBinaryMask": {"input": {"required": {"mask": ["MASK"], "threshold": ["INT", {"default": 20, "min": 1, "max": 255}]}}, "input_order": {"required": ["mask", "threshold"]}, "output": ["MASK"], "output_is_list": [false], "output_name": ["MASK"], "name": "ToBinaryMask", "display_name": "ToBinaryMask", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Operation", "output_node": false}, "MasksToMaskList": {"input": {"optional": {"masks": ["MASK"]}}, "input_order": {"optional": ["masks"]}, "output": ["MASK"], "output_is_list": [true], "output_name": ["MASK"], "name": "MasksToMaskList", "display_name": "Mask Batch to Mask List", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Operation", "output_node": false}, "MaskListToMaskBatch": {"input": {"required": {"mask": ["MASK"]}}, "input_order": {"required": ["mask"]}, "output": ["MASK"], "output_is_list": [false], "output_name": ["MASK"], "name": "MaskListToMaskBatch", "display_name": "Mask List to Mask Batch", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Operation", "output_node": false}, "ImageListToImageBatch": {"input": {"required": {"images": ["IMAGE"]}}, "input_order": {"required": ["images"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "ImageListToImageBatch", "display_name": "Image List to Image Batch", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Operation", "output_node": false}, "SetDefaultImageForSEGS": {"input": {"required": {"segs": ["SEGS"], "image": ["IMAGE"], "override": ["BOOLEAN", {"default": true}]}}, "input_order": {"required": ["segs", "image", "override"]}, "output": ["SEGS"], "output_is_list": [false], "output_name": ["SEGS"], "name": "SetDefaultImageForSEGS", "display_name": "Set Default Image for SEGS", "description": "If the SEGS have not passed through the detailer, they contain only detection area information without an image. This node sets a default image for the SEGS.", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "RemoveImageFromSEGS": {"input": {"required": {"segs": ["SEGS"]}}, "input_order": {"required": ["segs"]}, "output": ["SEGS"], "output_is_list": [false], "output_name": ["SEGS"], "name": "RemoveImageFromSEGS", "display_name": "Remove Image from SEGS", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "BboxDetectorSEGS": {"input": {"required": {"bbox_detector": ["BBOX_DETECTOR"], "image": ["IMAGE"], "threshold": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 1.0, "step": 0.01}], "dilation": ["INT", {"default": 10, "min": -512, "max": 512, "step": 1}], "crop_factor": ["FLOAT", {"default": 3.0, "min": 1.0, "max": 100, "step": 0.1}], "drop_size": ["INT", {"min": 1, "max": 16384, "step": 1, "default": 10}], "labels": ["STRING", {"multiline": true, "default": "all", "placeholder": "List the types of segments to be allowed, separated by commas"}]}, "optional": {"detailer_hook": ["DETAILER_HOOK"]}}, "input_order": {"required": ["bbox_detector", "image", "threshold", "dilation", "crop_factor", "drop_size", "labels"], "optional": ["detailer_hook"]}, "output": ["SEGS"], "output_is_list": [false], "output_name": ["SEGS"], "name": "BboxDetectorSEGS", "display_name": "BBOX Detector (SEGS)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Detector", "output_node": false}, "SegmDetectorSEGS": {"input": {"required": {"segm_detector": ["SEGM_DETECTOR"], "image": ["IMAGE"], "threshold": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 1.0, "step": 0.01}], "dilation": ["INT", {"default": 10, "min": -512, "max": 512, "step": 1}], "crop_factor": ["FLOAT", {"default": 3.0, "min": 1.0, "max": 100, "step": 0.1}], "drop_size": ["INT", {"min": 1, "max": 16384, "step": 1, "default": 10}], "labels": ["STRING", {"multiline": true, "default": "all", "placeholder": "List the types of segments to be allowed, separated by commas"}]}, "optional": {"detailer_hook": ["DETAILER_HOOK"]}}, "input_order": {"required": ["segm_detector", "image", "threshold", "dilation", "crop_factor", "drop_size", "labels"], "optional": ["detailer_hook"]}, "output": ["SEGS"], "output_is_list": [false], "output_name": ["SEGS"], "name": "SegmDetectorSEGS", "display_name": "SEGM Detector (SEGS)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Detector", "output_node": false}, "ONNXDetectorSEGS": {"input": {"required": {"bbox_detector": ["BBOX_DETECTOR"], "image": ["IMAGE"], "threshold": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 1.0, "step": 0.01}], "dilation": ["INT", {"default": 10, "min": -512, "max": 512, "step": 1}], "crop_factor": ["FLOAT", {"default": 3.0, "min": 1.0, "max": 100, "step": 0.1}], "drop_size": ["INT", {"min": 1, "max": 16384, "step": 1, "default": 10}], "labels": ["STRING", {"multiline": true, "default": "all", "placeholder": "List the types of segments to be allowed, separated by commas"}]}, "optional": {"detailer_hook": ["DETAILER_HOOK"]}}, "input_order": {"required": ["bbox_detector", "image", "threshold", "dilation", "crop_factor", "drop_size", "labels"], "optional": ["detailer_hook"]}, "output": ["SEGS"], "output_is_list": [false], "output_name": ["SEGS"], "name": "ONNXDetectorSEGS", "display_name": "ONNX Detector (SEGS/legacy) - use BBOXDetector", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Detector", "output_node": false}, "ImpactSimpleDetectorSEGS_for_AD": {"input": {"required": {"bbox_detector": ["BBOX_DETECTOR"], "image_frames": ["IMAGE"], "bbox_threshold": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 1.0, "step": 0.01}], "bbox_dilation": ["INT", {"default": 0, "min": -255, "max": 255, "step": 1}], "crop_factor": ["FLOAT", {"default": 3.0, "min": 1.0, "max": 100, "step": 0.1}], "drop_size": ["INT", {"min": 1, "max": 16384, "step": 1, "default": 10}], "sub_threshold": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 1.0, "step": 0.01}], "sub_dilation": ["INT", {"default": 0, "min": -255, "max": 255, "step": 1}], "sub_bbox_expansion": ["INT", {"default": 0, "min": 0, "max": 1000, "step": 1}], "sam_mask_hint_threshold": ["FLOAT", {"default": 0.7, "min": 0.0, "max": 1.0, "step": 0.01}]}, "optional": {"masking_mode": [["Pivot SEGS", "Combine neighboring frames", "Don't combine"]], "segs_pivot": [["Combined mask", "1st frame mask"]], "sam_model_opt": ["SAM_MODEL", {"tooltip": "[OPTIONAL]\nSegment Anything Model for Silhouette Detection.\nBe sure to use the SAM_MODEL loaded through the SAMLoader (Impact) node as input.\nGiven this input, it refines the rectangular areas detected by BBOX_DETECTOR into silhouette shapes through SAM.\nsam_model_opt takes priority over segm_detector_opt."}], "segm_detector_opt": ["SEGM_DETECTOR"]}}, "input_order": {"required": ["bbox_detector", "image_frames", "bbox_threshold", "bbox_dilation", "crop_factor", "drop_size", "sub_threshold", "sub_dilation", "sub_bbox_expansion", "sam_mask_hint_threshold"], "optional": ["masking_mode", "segs_pivot", "sam_model_opt", "segm_detector_opt"]}, "output": ["SEGS"], "output_is_list": [false], "output_name": ["SEGS"], "name": "ImpactSimpleDetectorSEGS_for_AD", "display_name": "Simple Detector for Video (SEGS)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Detector", "output_node": false}, "ImpactSAM2VideoDetectorSEGS": {"input": {"required": {"image_frames": ["IMAGE"], "bbox_detector": ["BBOX_DETECTOR"], "sam2_model": ["SAM_MODEL"], "bbox_threshold": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 1.0, "step": 0.01}], "sam2_threshold": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 1.0, "step": 0.01}], "crop_factor": ["FLOAT", {"default": 3.0, "min": 1.0, "max": 100, "step": 0.1}], "drop_size": ["INT", {"min": 1, "max": 16384, "step": 1, "default": 10}]}}, "input_order": {"required": ["image_frames", "bbox_detector", "sam2_model", "bbox_threshold", "sam2_threshold", "crop_factor", "drop_size"]}, "output": ["SEGS"], "output_is_list": [false], "output_name": ["SEGS"], "name": "ImpactSAM2VideoDetectorSEGS", "display_name": "SAM2 Video Detector (SEGS)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Detector", "output_node": false}, "ImpactSimpleDetectorSEGS": {"input": {"required": {"bbox_detector": ["BBOX_DETECTOR"], "image": ["IMAGE"], "bbox_threshold": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 1.0, "step": 0.01}], "bbox_dilation": ["INT", {"default": 0, "min": -512, "max": 512, "step": 1}], "crop_factor": ["FLOAT", {"default": 3.0, "min": 1.0, "max": 100, "step": 0.1}], "drop_size": ["INT", {"min": 1, "max": 16384, "step": 1, "default": 10}], "sub_threshold": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 1.0, "step": 0.01}], "sub_dilation": ["INT", {"default": 0, "min": -512, "max": 512, "step": 1}], "sub_bbox_expansion": ["INT", {"default": 0, "min": 0, "max": 1000, "step": 1}], "sam_mask_hint_threshold": ["FLOAT", {"default": 0.7, "min": 0.0, "max": 1.0, "step": 0.01}]}, "optional": {"post_dilation": ["INT", {"default": 0, "min": -512, "max": 512, "step": 1}], "sam_model_opt": ["SAM_MODEL", {"tooltip": "[OPTIONAL]\nSegment Anything Model for Silhouette Detection.\nBe sure to use the SAM_MODEL loaded through the SAMLoader (Impact) node as input.\nGiven this input, it refines the rectangular areas detected by BBOX_DETECTOR into silhouette shapes through SAM.\nsam_model_opt takes priority over segm_detector_opt."}], "segm_detector_opt": ["SEGM_DETECTOR"]}}, "input_order": {"required": ["bbox_detector", "image", "bbox_threshold", "bbox_dilation", "crop_factor", "drop_size", "sub_threshold", "sub_dilation", "sub_bbox_expansion", "sam_mask_hint_threshold"], "optional": ["post_dilation", "sam_model_opt", "segm_detector_opt"]}, "output": ["SEGS"], "output_is_list": [false], "output_name": ["SEGS"], "name": "ImpactSimpleDetectorSEGS", "display_name": "Simple Detector (SEGS)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Detector", "output_node": false}, "ImpactSimpleDetectorSEGSPipe": {"input": {"required": {"detailer_pipe": ["DETAILER_PIPE"], "image": ["IMAGE"], "bbox_threshold": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 1.0, "step": 0.01}], "bbox_dilation": ["INT", {"default": 0, "min": -512, "max": 512, "step": 1}], "crop_factor": ["FLOAT", {"default": 3.0, "min": 1.0, "max": 100, "step": 0.1}], "drop_size": ["INT", {"min": 1, "max": 16384, "step": 1, "default": 10}], "sub_threshold": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 1.0, "step": 0.01}], "sub_dilation": ["INT", {"default": 0, "min": -512, "max": 512, "step": 1}], "sub_bbox_expansion": ["INT", {"default": 0, "min": 0, "max": 1000, "step": 1}], "sam_mask_hint_threshold": ["FLOAT", {"default": 0.7, "min": 0.0, "max": 1.0, "step": 0.01}]}, "optional": {"post_dilation": ["INT", {"default": 0, "min": -512, "max": 512, "step": 1}]}}, "input_order": {"required": ["detailer_pipe", "image", "bbox_threshold", "bbox_dilation", "crop_factor", "drop_size", "sub_threshold", "sub_dilation", "sub_bbox_expansion", "sam_mask_hint_threshold"], "optional": ["post_dilation"]}, "output": ["SEGS"], "output_is_list": [false], "output_name": ["SEGS"], "name": "ImpactSimpleDetectorSEGSPipe", "display_name": "Simple Detector (SEGS/pipe)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Detector", "output_node": false}, "ImpactControlNetApplySEGS": {"input": {"required": {"segs": ["SEGS"], "control_net": ["CONTROL_NET"], "strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}]}, "optional": {"segs_preprocessor": ["SEGS_PREPROCESSOR"], "control_image": ["IMAGE"]}}, "input_order": {"required": ["segs", "control_net", "strength"], "optional": ["segs_preprocessor", "control_image"]}, "output": ["SEGS"], "output_is_list": [false], "output_name": ["SEGS"], "name": "ImpactControlNetApplySEGS", "display_name": "ControlNetApply (SEGS) - DEPRECATED", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false, "deprecated": true}, "ImpactControlNetApplyAdvancedSEGS": {"input": {"required": {"segs": ["SEGS"], "control_net": ["CONTROL_NET"], "strength": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01}], "start_percent": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.001}], "end_percent": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.001}]}, "optional": {"segs_preprocessor": ["SEGS_PREPROCESSOR"], "control_image": ["IMAGE"], "vae": ["VAE"]}}, "input_order": {"required": ["segs", "control_net", "strength", "start_percent", "end_percent"], "optional": ["segs_preprocessor", "control_image", "vae"]}, "output": ["SEGS"], "output_is_list": [false], "output_name": ["SEGS"], "name": "ImpactControlNetApplyAdvancedSEGS", "display_name": "ControlNetApply (SEGS)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactControlNetClearSEGS": {"input": {"required": {"segs": ["SEGS"]}}, "input_order": {"required": ["segs"]}, "output": ["SEGS"], "output_is_list": [false], "output_name": ["SEGS"], "name": "ImpactControlNetClearSEGS", "display_name": "ImpactControlNetClearSEGS", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactIPAdapterApplySEGS": {"input": {"required": {"segs": ["SEGS"], "ipadapter_pipe": ["IPADAPTER_PIPE"], "weight": ["FLOAT", {"default": 0.7, "min": -1, "max": 3, "step": 0.05}], "noise": ["FLOAT", {"default": 0.4, "min": 0.0, "max": 1.0, "step": 0.01}], "weight_type": [["original", "linear", "channel penalty"], {"default": "channel penalty"}], "start_at": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.001}], "end_at": ["FLOAT", {"default": 0.9, "min": 0.0, "max": 1.0, "step": 0.001}], "unfold_batch": ["BOOLEAN", {"default": false}], "faceid_v2": ["BOOLEAN", {"default": false}], "weight_v2": ["FLOAT", {"default": 1.0, "min": -1, "max": 3, "step": 0.05}], "context_crop_factor": ["FLOAT", {"default": 1.2, "min": 1.0, "max": 100, "step": 0.1}], "reference_image": ["IMAGE"]}, "optional": {"combine_embeds": [["concat", "add", "subtract", "average", "norm average"]], "neg_image": ["IMAGE"]}}, "input_order": {"required": ["segs", "ipadapter_pipe", "weight", "noise", "weight_type", "start_at", "end_at", "unfold_batch", "faceid_v2", "weight_v2", "context_crop_factor", "reference_image"], "optional": ["combine_embeds", "neg_image"]}, "output": ["SEGS"], "output_is_list": [false], "output_name": ["SEGS"], "name": "ImpactIPAdapterApplySEGS", "display_name": "IPAdapterApply (SEGS)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactDecomposeSEGS": {"input": {"required": {"segs": ["SEGS"]}}, "input_order": {"required": ["segs"]}, "output": ["SEGS_HEADER", "SEG_ELT"], "output_is_list": [false, true], "output_name": ["SEGS_HEADER", "SEG_ELT"], "name": "ImpactDecomposeSEGS", "display_name": "Decompose (SEGS)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactAssembleSEGS": {"input": {"required": {"seg_header": ["SEGS_HEADER"], "seg_elt": ["SEG_ELT"]}}, "input_order": {"required": ["seg_header", "seg_elt"]}, "output": ["SEGS"], "output_is_list": [false], "output_name": ["SEGS"], "name": "ImpactAssembleSEGS", "display_name": "Assemble (SEGS)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactFrom_SEG_ELT": {"input": {"required": {"seg_elt": ["SEG_ELT"]}}, "input_order": {"required": ["seg_elt"]}, "output": ["SEG_ELT", "IMAGE", "MASK", "SEG_ELT_crop_region", "SEG_ELT_bbox", "SEG_ELT_control_net_wrapper", "FLOAT", "STRING"], "output_is_list": [false, false, false, false, false, false, false, false], "output_name": ["seg_elt", "cropped_image", "cropped_mask", "crop_region", "bbox", "control_net_wrapper", "confidence", "label"], "name": "ImpactFrom_SEG_ELT", "display_name": "From SEG_ELT", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactEdit_SEG_ELT": {"input": {"required": {"seg_elt": ["SEG_ELT"]}, "optional": {"cropped_image_opt": ["IMAGE"], "cropped_mask_opt": ["MASK"], "crop_region_opt": ["SEG_ELT_crop_region"], "bbox_opt": ["SEG_ELT_bbox"], "control_net_wrapper_opt": ["SEG_ELT_control_net_wrapper"], "confidence_opt": ["FLOAT", {"min": 0, "max": 1.0, "step": 0.1, "forceInput": true}], "label_opt": ["STRING", {"multiline": false, "forceInput": true}]}}, "input_order": {"required": ["seg_elt"], "optional": ["cropped_image_opt", "cropped_mask_opt", "crop_region_opt", "bbox_opt", "control_net_wrapper_opt", "confidence_opt", "label_opt"]}, "output": ["SEG_ELT"], "output_is_list": [false], "output_name": ["SEG_ELT"], "name": "ImpactEdit_SEG_ELT", "display_name": "Edit SEG_ELT", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactDilate_Mask_SEG_ELT": {"input": {"required": {"seg_elt": ["SEG_ELT"], "dilation": ["INT", {"default": 10, "min": -512, "max": 512, "step": 1}]}}, "input_order": {"required": ["seg_elt", "dilation"]}, "output": ["SEG_ELT"], "output_is_list": [false], "output_name": ["SEG_ELT"], "name": "ImpactDilate_Mask_SEG_ELT", "display_name": "Dilate Mask (SEG_ELT)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactDilateMask": {"input": {"required": {"mask": ["MASK"], "dilation": ["INT", {"default": 10, "min": -512, "max": 512, "step": 1}]}}, "input_order": {"required": ["mask", "dilation"]}, "output": ["MASK"], "output_is_list": [false], "output_name": ["MASK"], "name": "ImpactDilateMask", "display_name": "Dilate Mask", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactGaussianBlurMask": {"input": {"required": {"mask": ["MASK"], "kernel_size": ["INT", {"default": 10, "min": 0, "max": 100, "step": 1}], "sigma": ["FLOAT", {"default": 10.0, "min": 0.1, "max": 100.0, "step": 0.1}]}}, "input_order": {"required": ["mask", "kernel_size", "sigma"]}, "output": ["MASK"], "output_is_list": [false], "output_name": ["MASK"], "name": "ImpactGaussianBlurMask", "display_name": "Gaussian Blur Mask", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactDilateMaskInSEGS": {"input": {"required": {"segs": ["SEGS"], "dilation": ["INT", {"default": 10, "min": -512, "max": 512, "step": 1}]}}, "input_order": {"required": ["segs", "dilation"]}, "output": ["SEGS"], "output_is_list": [false], "output_name": ["SEGS"], "name": "ImpactDilateMaskInSEGS", "display_name": "Dilate Mask (SEGS)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactGaussianBlurMaskInSEGS": {"input": {"required": {"segs": ["SEGS"], "kernel_size": ["INT", {"default": 10, "min": 0, "max": 100, "step": 1}], "sigma": ["FLOAT", {"default": 10.0, "min": 0.1, "max": 100.0, "step": 0.1}]}}, "input_order": {"required": ["segs", "kernel_size", "sigma"]}, "output": ["SEGS"], "output_is_list": [false], "output_name": ["SEGS"], "name": "ImpactGaussianBlurMaskInSEGS", "display_name": "Gaussian Blur Mask (SEGS)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactScaleBy_BBOX_SEG_ELT": {"input": {"required": {"seg": ["SEG_ELT"], "scale_by": ["FLOAT", {"default": 1.0, "min": 0.01, "max": 8.0, "step": 0.01}]}}, "input_order": {"required": ["seg", "scale_by"]}, "output": ["SEG_ELT"], "output_is_list": [false], "output_name": ["SEG_ELT"], "name": "ImpactScaleBy_BBOX_SEG_ELT", "display_name": "ScaleBy BBOX (SEG_ELT)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactFrom_SEG_ELT_bbox": {"input": {"required": {"bbox": ["SEG_ELT_bbox"]}}, "input_order": {"required": ["bbox"]}, "output": ["INT", "INT", "INT", "INT"], "output_is_list": [false, false, false, false], "output_name": ["left", "top", "right", "bottom"], "name": "ImpactFrom_SEG_ELT_bbox", "display_name": "From SEG_ELT bbox", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactFrom_SEG_ELT_crop_region": {"input": {"required": {"crop_region": ["SEG_ELT_crop_region"]}}, "input_order": {"required": ["crop_region"]}, "output": ["INT", "INT", "INT", "INT"], "output_is_list": [false, false, false, false], "output_name": ["left", "top", "right", "bottom"], "name": "ImpactFrom_SEG_ELT_crop_region", "display_name": "From SEG_ELT crop_region", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactCount_Elts_in_SEGS": {"input": {"required": {"segs": ["SEGS"]}}, "input_order": {"required": ["segs"]}, "output": ["INT"], "output_is_list": [false], "output_name": ["INT"], "name": "ImpactCount_Elts_in_SEGS", "display_name": "Count Elts in SEGS", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "BboxDetectorCombined_v2": {"input": {"required": {"bbox_detector": ["BBOX_DETECTOR"], "image": ["IMAGE"], "threshold": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 1.0, "step": 0.01}], "dilation": ["INT", {"default": 4, "min": -512, "max": 512, "step": 1}]}}, "input_order": {"required": ["bbox_detector", "image", "threshold", "dilation"]}, "output": ["MASK"], "output_is_list": [false], "output_name": ["MASK"], "name": "BboxDetectorCombined_v2", "display_name": "BBOX Detector (combined)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Detector", "output_node": false}, "SegmDetectorCombined_v2": {"input": {"required": {"segm_detector": ["SEGM_DETECTOR"], "image": ["IMAGE"], "threshold": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 1.0, "step": 0.01}], "dilation": ["INT", {"default": 0, "min": -512, "max": 512, "step": 1}]}}, "input_order": {"required": ["segm_detector", "image", "threshold", "dilation"]}, "output": ["MASK"], "output_is_list": [false], "output_name": ["MASK"], "name": "SegmDetectorCombined_v2", "display_name": "SEGM Detector (combined)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Detector", "output_node": false}, "SegsToCombinedMask": {"input": {"required": {"segs": ["SEGS"]}}, "input_order": {"required": ["segs"]}, "output": ["MASK"], "output_is_list": [false], "output_name": ["MASK"], "name": "SegsToCombinedMask", "display_name": "SEGS to MASK (combined)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Operation", "output_node": false}, "KSamplerProvider": {"input": {"required": {"seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "tooltip": "Random seed to use for generating CPU noise for sampling."}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000, "tooltip": "total sampling steps"}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0, "tooltip": "classifier free guidance value"}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"], {"tooltip": "sampler"}], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "AYS SDXL", "AYS SD1", "AYS SVD", "GITS[coeff=1.2]", "LTXV[default]", "OSS FLUX", "OSS Wan", "OSS Chroma"], {"tooltip": "noise schedule"}], "denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01, "tooltip": "The amount of noise to remove. This amount is the noise added at the start, and the higher it is, the more the input latent will be modified before being returned."}], "basic_pipe": ["BASIC_PIPE", {"tooltip": "basic_pipe input for sampling"}]}, "optional": {"scheduler_func_opt": ["SCHEDULER_FUNC", {"tooltip": "[OPTIONAL] Noise schedule generation function. If this is set, the scheduler widget will be ignored."}]}}, "input_order": {"required": ["seed", "steps", "cfg", "sampler_name", "scheduler", "denoise", "basic_pipe"], "optional": ["scheduler_func_opt"]}, "output": ["KSAMPLER"], "output_is_list": [false], "output_name": ["KSAMPLER"], "name": "KSamplerProvider", "display_name": "KSamplerProvider", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Sampler", "output_node": false, "output_tooltips": ["sampler wrapper. (Can be used when generating a regional_prompt.)"]}, "TwoSamplersForMask": {"input": {"required": {"latent_image": ["LATENT", {"tooltip": "input latent image"}], "base_sampler": ["KSAMPLER", {"tooltip": "Sampler to apply to the region outside the mask."}], "mask_sampler": ["KSAMPLER", {"tooltip": "Sampler to apply to the masked region."}], "mask": ["MASK", {"tooltip": "region mask"}]}}, "input_order": {"required": ["latent_image", "base_sampler", "mask_sampler", "mask"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "TwoSamplersForMask", "display_name": "TwoSamplersForMask", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Sampler", "output_node": false, "output_tooltips": ["result latent"]}, "TiledKSamplerProvider": {"input": {"required": {"seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "tooltip": "Random seed to use for generating CPU noise for sampling."}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000, "tooltip": "total sampling steps"}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0, "tooltip": "classifier free guidance value"}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"], {"tooltip": "sampler"}], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"], {"tooltip": "noise schedule"}], "denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01, "tooltip": "The amount of noise to remove. This amount is the noise added at the start, and the higher it is, the more the input latent will be modified before being returned."}], "tile_width": ["INT", {"default": 512, "min": 320, "max": 16384, "step": 64, "tooltip": "Sets the width of the tile to be used in TiledKSampler."}], "tile_height": ["INT", {"default": 512, "min": 320, "max": 16384, "step": 64, "tooltip": "Sets the height of the tile to be used in TiledKSampler."}], "tiling_strategy": [["random", "padded", "simple"], {"tooltip": "Sets the tiling strategy for TiledKSampler."}], "basic_pipe": ["BASIC_PIPE", {"tooltip": "basic_pipe input for sampling"}]}}, "input_order": {"required": ["seed", "steps", "cfg", "sampler_name", "scheduler", "denoise", "tile_width", "tile_height", "tiling_strategy", "basic_pipe"]}, "output": ["KSAMPLER"], "output_is_list": [false], "output_name": ["KSAMPLER"], "name": "TiledKSamplerProvider", "display_name": "TiledKSamplerProvider", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Sampler", "output_node": false, "output_tooltips": ["sampler wrapper. (Can be used when generating a regional_prompt.)"]}, "KSamplerAdvancedProvider": {"input": {"required": {"cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0, "toolip": "classifier free guidance value"}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"], {"toolip": "sampler"}], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "AYS SDXL", "AYS SD1", "AYS SVD", "GITS[coeff=1.2]", "LTXV[default]", "OSS FLUX", "OSS Wan", "OSS Chroma"], {"toolip": "noise schedule"}], "sigma_factor": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 10.0, "step": 0.01, "toolip": "Multiplier of noise schedule"}], "basic_pipe": ["BASIC_PIPE", {"toolip": "basic_pipe input for sampling"}]}, "optional": {"sampler_opt": ["SAMPLER", {"toolip": "[OPTIONAL] Uses the passed sampler instead of internal impact_sampler."}], "scheduler_func_opt": ["SCHEDULER_FUNC", {"toolip": "[OPTIONAL] Noise schedule generation function. If this is set, the scheduler widget will be ignored."}]}}, "input_order": {"required": ["cfg", "sampler_name", "scheduler", "sigma_factor", "basic_pipe"], "optional": ["sampler_opt", "scheduler_func_opt"]}, "output": ["KSAMPLER_ADVANCED"], "output_is_list": [false], "output_name": ["KSAMPLER_ADVANCED"], "name": "KSamplerAdvancedProvider", "display_name": "KSamplerAdvancedProvider", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Sampler", "output_node": false, "output_tooltips": ["sampler wrapper. (Can be used when generating a regional_prompt.)"]}, "TwoAdvancedSamplersForMask": {"input": {"required": {"seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "tooltip": "Random seed to use for generating CPU noise for sampling."}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000, "tooltip": "total sampling steps"}], "denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01, "tooltip": "The amount of noise to remove. This amount is the noise added at the start, and the higher it is, the more the input latent will be modified before being returned."}], "samples": ["LATENT", {"tooltip": "input latent image"}], "base_sampler": ["KSAMPLER_ADVANCED", {"tooltip": "Sampler to apply to the region outside the mask."}], "mask_sampler": ["KSAMPLER_ADVANCED", {"tooltip": "Sampler to apply to the masked region."}], "mask": ["MASK", {"tooltip": "region mask"}], "overlap_factor": ["INT", {"default": 10, "min": 0, "max": 10000, "tooltip": "To smooth the seams of the region boundaries, expand the mask by the overlap_factor amount to overlap with other regions."}]}}, "input_order": {"required": ["seed", "steps", "denoise", "samples", "base_sampler", "mask_sampler", "mask", "overlap_factor"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "TwoAdvancedSamplersForMask", "display_name": "TwoAdvancedSamplersForMask", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Sampler", "output_node": false, "output_tooltips": ["result latent"]}, "ImpactNegativeConditioningPlaceholder": {"input": {"required": {}}, "input_order": {"required": []}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "ImpactNegativeConditioningPlaceholder", "display_name": "Negative Cond Placeholder", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/sampling", "output_node": false, "output_tooltips": ["This is a Placeholder for the FLUX model that does not use Negative Conditioning."]}, "PreviewBridge": {"input": {"required": {"images": ["IMAGE"], "image": ["STRING", {"default": ""}]}, "optional": {"block": ["BOOLEAN", {"default": false, "label_on": "if_empty_mask", "label_off": "never", "tooltip": "is_empty_mask: If the mask is empty, the execution is stopped.\nnever: The execution is never stopped."}], "restore_mask": [["never", "always", "if_same_size"], {"tooltip": "if_same_size: If the changed input image is the same size as the previous image, restore using the last saved mask\nalways: Whenever the input image changes, always restore using the last saved mask\nnever: Do not restore the mask.\n`restore_mask` has higher priority than `block`"}]}, "hidden": {"unique_id": "UNIQUE_ID", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["images", "image"], "optional": ["block", "restore_mask"], "hidden": ["unique_id", "extra_pnginfo"]}, "output": ["IMAGE", "MASK"], "output_is_list": [false, false], "output_name": ["IMAGE", "MASK"], "name": "PreviewBridge", "display_name": "Preview Bridge (Image)", "description": "This is a feature that allows you to edit and send a Mask over a image.\nIf the block is set to 'is_empty_mask', the execution is stopped when the mask is empty.", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": true}, "PreviewBridgeLatent": {"input": {"required": {"latent": ["LATENT"], "image": ["STRING", {"default": ""}], "preview_method": [["Latent2RGB-FLUX.1", "Latent2RGB-SDXL", "Latent2RGB-SD15", "Latent2RGB-SD3", "Latent2RGB-SD-X4", "Latent2RGB-Playground-2.5", "Latent2RGB-SC-Prior", "Latent2RGB-SC-B", "Latent2RGB-LTXV", "TAEF1", "TAESDXL", "TAESD15", "TAESD3"]]}, "optional": {"vae_opt": ["VAE"], "block": ["BOOLEAN", {"default": false, "label_on": "if_empty_mask", "label_off": "never", "tooltip": "is_empty_mask: If the mask is empty, the execution is stopped.\nnever: The execution is never stopped. Instead, it returns a white mask."}], "restore_mask": [["never", "always", "if_same_size"], {"tooltip": "if_same_size: If the changed input latent is the same size as the previous latent, restore using the last saved mask\nalways: Whenever the input latent changes, always restore using the last saved mask\nnever: Do not restore the mask.\n`restore_mask` has higher priority than `block`\nIf the input latent already has a mask, do not restore mask."}]}, "hidden": {"unique_id": "UNIQUE_ID", "prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["latent", "image", "preview_method"], "optional": ["vae_opt", "block", "restore_mask"], "hidden": ["unique_id", "prompt", "extra_pnginfo"]}, "output": ["LATENT", "MASK"], "output_is_list": [false, false], "output_name": ["LATENT", "MASK"], "name": "PreviewBridgeLatent", "display_name": "Preview Bridge (Latent)", "description": "This is a feature that allows you to edit and send a Mask over a latent image.\nIf the block is set to 'is_empty_mask', the execution is stopped when the mask is empty.", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": true}, "ImageSender": {"input": {"required": {"images": ["IMAGE"], "filename_prefix": ["STRING", {"default": "ImgSender"}], "link_id": ["INT", {"default": 0, "min": 0, "max": 9223372036854775807, "step": 1}]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["images", "filename_prefix", "link_id"], "hidden": ["prompt", "extra_pnginfo"]}, "output": [], "output_is_list": [], "output_name": [], "name": "ImageSender", "display_name": "Image Sender", "description": "Saves the input images to your ComfyUI output directory.", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": true}, "ImageReceiver": {"input": {"required": {"image": [["06d0d6e92e43f12050a047b7e9c0ad1b280a78206072fab30c9f0556155e870b.m4a"]], "link_id": ["INT", {"default": 0, "min": 0, "max": 9223372036854775807, "step": 1}], "save_to_workflow": ["BOOLEAN", {"default": false}], "image_data": ["STRING", {"multiline": false}], "trigger_always": ["BOOLEAN", {"default": false, "label_on": "enable", "label_off": "disable"}]}}, "input_order": {"required": ["image", "link_id", "save_to_workflow", "image_data", "trigger_always"]}, "output": ["IMAGE", "MASK"], "output_is_list": [false, false], "output_name": ["IMAGE", "MASK"], "name": "ImageReceiver", "display_name": "Image Receiver", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "LatentSender": {"input": {"required": {"samples": ["LATENT"], "filename_prefix": ["STRING", {"default": "latents/LatentSender"}], "link_id": ["INT", {"default": 0, "min": 0, "max": 9223372036854775807, "step": 1}], "preview_method": [["Latent2RGB-FLUX.1", "Latent2RGB-SDXL", "Latent2RGB-SD15", "Latent2RGB-SD3", "Latent2RGB-SD-X4", "Latent2RGB-Playground-2.5", "Latent2RGB-SC-Prior", "Latent2RGB-SC-B", "Latent2RGB-LTXV", "TAEF1", "TAESDXL", "TAESD15", "TAESD3"]]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["samples", "filename_prefix", "link_id", "preview_method"], "hidden": ["prompt", "extra_pnginfo"]}, "output": [], "output_is_list": [], "output_name": [], "name": "LatentSender", "display_name": "LatentSender", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": true}, "LatentReceiver": {"input": {"required": {"latent": [[]], "link_id": ["INT", {"default": 0, "min": 0, "max": 9223372036854775807, "step": 1}], "trigger_always": ["BOOLEAN", {"default": false, "label_on": "enable", "label_off": "disable"}]}}, "input_order": {"required": ["latent", "link_id", "trigger_always"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "LatentReceiver", "display_name": "LatentReceiver", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImageMaskSwitch": {"input": {"required": {"select": ["INT", {"default": 1, "min": 1, "max": 4, "step": 1}], "images1": ["IMAGE"]}, "optional": {"mask1_opt": ["MASK"], "images2_opt": ["IMAGE"], "mask2_opt": ["MASK"], "images3_opt": ["IMAGE"], "mask3_opt": ["MASK"], "images4_opt": ["IMAGE"], "mask4_opt": ["MASK"]}}, "input_order": {"required": ["select", "images1"], "optional": ["mask1_opt", "images2_opt", "mask2_opt", "images3_opt", "mask3_opt", "images4_opt", "mask4_opt"]}, "output": ["IMAGE", "MASK"], "output_is_list": [false, false], "output_name": ["IMAGE", "MASK"], "name": "ImageMaskSwitch", "display_name": "Switch (images, mask)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": true}, "LatentSwitch": {"input": {"required": {"select": ["INT", {"default": 1, "min": 1, "max": 999999, "step": 1, "tooltip": "The input number you want to output among the inputs"}], "sel_mode": ["BOOLEAN", {"default": false, "label_on": "select_on_prompt", "label_off": "select_on_execution", "forceInput": false, "tooltip": "In the case of 'select_on_execution', the selection is dynamically determined at the time of workflow execution. 'select_on_prompt' is an option that exists for older versions of ComfyUI, and it makes the decision before the workflow execution."}]}, "optional": {"input1": ["*", {"lazy": true, "tooltip": "Any input. When connected, one more input slot is added."}]}, "hidden": {"unique_id": "UNIQUE_ID", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["select", "sel_mode"], "optional": ["input1"], "hidden": ["unique_id", "extra_pnginfo"]}, "output": ["*", "STRING", "INT"], "output_is_list": [false, false, false], "output_name": ["selected_value", "selected_label", "selected_index"], "name": "LatentSwitch", "display_name": "Switch (latent/legacy)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false, "output_tooltips": ["Output is generated only from the input chosen by the 'select' value.", "Slot label of the selected input slot", "Outputs the select value as is"]}, "SEGSSwitch": {"input": {"required": {"select": ["INT", {"default": 1, "min": 1, "max": 999999, "step": 1, "tooltip": "The input number you want to output among the inputs"}], "sel_mode": ["BOOLEAN", {"default": false, "label_on": "select_on_prompt", "label_off": "select_on_execution", "forceInput": false, "tooltip": "In the case of 'select_on_execution', the selection is dynamically determined at the time of workflow execution. 'select_on_prompt' is an option that exists for older versions of ComfyUI, and it makes the decision before the workflow execution."}]}, "optional": {"input1": ["*", {"lazy": true, "tooltip": "Any input. When connected, one more input slot is added."}]}, "hidden": {"unique_id": "UNIQUE_ID", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["select", "sel_mode"], "optional": ["input1"], "hidden": ["unique_id", "extra_pnginfo"]}, "output": ["*", "STRING", "INT"], "output_is_list": [false, false, false], "output_name": ["selected_value", "selected_label", "selected_index"], "name": "SEGSSwitch", "display_name": "Switch (SEGS/legacy)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false, "output_tooltips": ["Output is generated only from the input chosen by the 'select' value.", "Slot label of the selected input slot", "Outputs the select value as is"]}, "ImpactSwitch": {"input": {"required": {"select": ["INT", {"default": 1, "min": 1, "max": 999999, "step": 1, "tooltip": "The input number you want to output among the inputs"}], "sel_mode": ["BOOLEAN", {"default": false, "label_on": "select_on_prompt", "label_off": "select_on_execution", "forceInput": false, "tooltip": "In the case of 'select_on_execution', the selection is dynamically determined at the time of workflow execution. 'select_on_prompt' is an option that exists for older versions of ComfyUI, and it makes the decision before the workflow execution."}]}, "optional": {"input1": ["*", {"lazy": true, "tooltip": "Any input. When connected, one more input slot is added."}]}, "hidden": {"unique_id": "UNIQUE_ID", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["select", "sel_mode"], "optional": ["input1"], "hidden": ["unique_id", "extra_pnginfo"]}, "output": ["*", "STRING", "INT"], "output_is_list": [false, false, false], "output_name": ["selected_value", "selected_label", "selected_index"], "name": "ImpactSwitch", "display_name": "Switch (Any)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false, "output_tooltips": ["Output is generated only from the input chosen by the 'select' value.", "Slot label of the selected input slot", "Outputs the select value as is"]}, "ImpactInversedSwitch": {"input": {"required": {"select": ["INT", {"default": 1, "min": 1, "max": 999999, "step": 1, "tooltip": "The output number you want to send from the input"}], "input": ["*", {"tooltip": "Any input. When connected, one more input slot is added."}]}, "optional": {"sel_mode": ["BOOLEAN", {"default": false, "label_on": "select_on_prompt", "label_off": "select_on_execution", "forceInput": false, "tooltip": "In the case of 'select_on_execution', the selection is dynamically determined at the time of workflow execution. 'select_on_prompt' is an option that exists for older versions of ComfyUI, and it makes the decision before the workflow execution."}]}, "hidden": {"prompt": "PROMPT", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["select", "input"], "optional": ["sel_mode"], "hidden": ["prompt", "unique_id"]}, "output": ["*"], "output_is_list": [false], "output_name": ["*"], "name": "ImpactInversedSwitch", "display_name": "Inversed Switch (Any)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false, "output_tooltips": ["Output occurs only from the output selected by the 'select' value.\nWhen slots are connected, additional slots are created."]}, "ImpactWildcardProcessor": {"input": {"required": {"wildcard_text": ["STRING", {"multiline": true, "dynamicPrompts": false, "tooltip": "Enter a prompt using wildcard syntax."}], "populated_text": ["STRING", {"multiline": true, "dynamicPrompts": false, "tooltip": "The actual value passed during the execution of 'ImpactWildcardProcessor' is what is shown here. The behavior varies slightly depending on the mode. Wildcard syntax can also be used in 'populated_text'."}], "mode": [["populate", "fixed", "reproduce"], {"default": "populate", "tooltip": "populate: Before running the workflow, it overwrites the existing value of 'populated_text' with the prompt processed from 'wildcard_text'. In this mode, 'populated_text' cannot be edited.\nfixed: Ignores wildcard_text and keeps 'populated_text' as is. You can edit 'populated_text' in this mode.\nreproduce: This mode operates as 'fixed' mode only once for reproduction, and then it switches to 'populate' mode."}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "tooltip": "Determines the random seed to be used for wildcard processing."}], "Select to add Wildcard": [["Select the Wildcard to add to the text"]]}}, "input_order": {"required": ["wildcard_text", "populated_text", "mode", "seed", "Select to add Wildcard"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["processed text"], "name": "ImpactWildcardProcessor", "display_name": "ImpactWildcardProcessor", "description": "The 'ImpactWildcardProcessor' processes text prompts written in wildcard syntax and outputs the processed text prompt.\n\nTIP: Before the workflow is executed, the processing result of 'wildcard_text' is displayed in 'populated_text', and the populated text is saved along with the workflow. If you want to use a seed converted as input, write the prompt directly in 'populated_text' instead of 'wildcard_text', and set the mode to 'fixed'.", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Prompt", "output_node": false}, "ImpactWildcardEncode": {"input": {"required": {"model": ["MODEL"], "clip": ["CLIP"], "wildcard_text": ["STRING", {"multiline": true, "dynamicPrompts": false, "tooltip": "Enter a prompt using wildcard syntax."}], "populated_text": ["STRING", {"multiline": true, "dynamicPrompts": false, "tooltip": "The actual value passed during the execution of 'ImpactWildcardEncode' is what is shown here. The behavior varies slightly depending on the mode. Wildcard syntax can also be used in 'populated_text'."}], "mode": [["populate", "fixed", "reproduce"], {"tooltip": "populate: Before running the workflow, it overwrites the existing value of 'populated_text' with the prompt processed from 'wildcard_text'. In this mode, 'populated_text' cannot be edited.\nfixed: Ignores wildcard_text and keeps 'populated_text' as is. You can edit 'populated_text' in this mode\n.reproduce: This mode operates as 'fixed' mode only once for reproduction, and then it switches to 'populate' mode."}], "Select to add LoRA": [["Select the LoRA to add to the text", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "Select to add Wildcard": [["Select the Wildcard to add to the text"]], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "tooltip": "Determines the random seed to be used for wildcard processing."}]}}, "input_order": {"required": ["model", "clip", "wildcard_text", "populated_text", "mode", "Select to add LoRA", "Select to add Wildcard", "seed"]}, "output": ["MODEL", "CLIP", "CONDITIONING", "STRING"], "output_is_list": [false, false, false, false], "output_name": ["model", "clip", "conditioning", "populated_text"], "name": "ImpactWildcardEncode", "display_name": "ImpactWildcardEncode", "description": "The 'ImpactWildcardEncode' node processes text prompts written in wildcard syntax and outputs them as conditioning. It also supports LoRA syntax, with the applied LoRA reflected in the model's output.\n\nTIP1: Before the workflow is executed, the processing result of 'wildcard_text' is displayed in 'populated_text', and the populated text is saved along with the workflow. If you want to use a seed converted as input, write the prompt directly in 'populated_text' instead of 'wildcard_text', and set the mode to 'fixed'.\nTIP2: If the 'Inspire Pack' is installed, LBW(LoRA Block Weight) syntax can also be applied.", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Prompt", "output_node": false}, "SEGSUpscaler": {"input": {"required": {"image": ["IMAGE"], "segs": ["SEGS"], "model": ["MODEL"], "clip": ["CLIP"], "vae": ["VAE"], "rescale_factor": ["FLOAT", {"default": 2, "min": 0.01, "max": 100.0, "step": 0.01}], "resampling_method": [["lanczos", "nearest", "bilinear", "bicubic"]], "supersample": [["true", "false"]], "rounding_modulus": ["INT", {"default": 8, "min": 8, "max": 1024, "step": 8}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "AYS SDXL", "AYS SD1", "AYS SVD", "GITS[coeff=1.2]", "LTXV[default]", "OSS FLUX", "OSS Wan", "OSS Chroma"]], "positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "denoise": ["FLOAT", {"default": 0.5, "min": 0.0001, "max": 1.0, "step": 0.01}], "feather": ["INT", {"default": 5, "min": 0, "max": 100, "step": 1}], "inpaint_model": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}], "noise_mask_feather": ["INT", {"default": 20, "min": 0, "max": 100, "step": 1}]}, "optional": {"upscale_model_opt": ["UPSCALE_MODEL"], "upscaler_hook_opt": ["UPSCALER_HOOK"], "scheduler_func_opt": ["SCHEDULER_FUNC"]}}, "input_order": {"required": ["image", "segs", "model", "clip", "vae", "rescale_factor", "resampling_method", "supersample", "rounding_modulus", "seed", "steps", "cfg", "sampler_name", "scheduler", "positive", "negative", "denoise", "feather", "inpaint_model", "noise_mask_feather"], "optional": ["upscale_model_opt", "upscaler_hook_opt", "scheduler_func_opt"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "SEGSUpscaler", "display_name": "Upscaler (SEGS)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Upscale", "output_node": false}, "SEGSUpscalerPipe": {"input": {"required": {"image": ["IMAGE"], "segs": ["SEGS"], "basic_pipe": ["BASIC_PIPE"], "rescale_factor": ["FLOAT", {"default": 2, "min": 0.01, "max": 100.0, "step": 0.01}], "resampling_method": [["lanczos", "nearest", "bilinear", "bicubic"]], "supersample": [["true", "false"]], "rounding_modulus": ["INT", {"default": 8, "min": 8, "max": 1024, "step": 8}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "AYS SDXL", "AYS SD1", "AYS SVD", "GITS[coeff=1.2]", "LTXV[default]", "OSS FLUX", "OSS Wan", "OSS Chroma"]], "denoise": ["FLOAT", {"default": 0.5, "min": 0.0001, "max": 1.0, "step": 0.01}], "feather": ["INT", {"default": 5, "min": 0, "max": 100, "step": 1}], "inpaint_model": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}], "noise_mask_feather": ["INT", {"default": 20, "min": 0, "max": 100, "step": 1}]}, "optional": {"upscale_model_opt": ["UPSCALE_MODEL"], "upscaler_hook_opt": ["UPSCALER_HOOK"], "scheduler_func_opt": ["SCHEDULER_FUNC"]}}, "input_order": {"required": ["image", "segs", "basic_pipe", "rescale_factor", "resampling_method", "supersample", "rounding_modulus", "seed", "steps", "cfg", "sampler_name", "scheduler", "denoise", "feather", "inpaint_model", "noise_mask_feather"], "optional": ["upscale_model_opt", "upscaler_hook_opt", "scheduler_func_opt"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "SEGSUpscalerPipe", "display_name": "Upscaler (SEGS/pipe)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Upscale", "output_node": false}, "SEGSDetailer": {"input": {"required": {"image": ["IMAGE"], "segs": ["SEGS"], "guide_size": ["FLOAT", {"default": 512, "min": 64, "max": 16384, "step": 8}], "guide_size_for": ["BOOLEAN", {"default": true, "label_on": "bbox", "label_off": "crop_region"}], "max_size": ["FLOAT", {"default": 768, "min": 64, "max": 16384, "step": 8}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "AYS SDXL", "AYS SD1", "AYS SVD", "GITS[coeff=1.2]", "LTXV[default]", "OSS FLUX", "OSS Wan", "OSS Chroma"]], "denoise": ["FLOAT", {"default": 0.5, "min": 0.0001, "max": 1.0, "step": 0.01}], "noise_mask": ["BOOLEAN", {"default": true, "label_on": "enabled", "label_off": "disabled"}], "force_inpaint": ["BOOLEAN", {"default": true, "label_on": "enabled", "label_off": "disabled"}], "basic_pipe": ["BASIC_PIPE", {"tooltip": "If the `ImpactDummyInput` is connected to the model in the basic_pipe, the inference stage is skipped."}], "refiner_ratio": ["FLOAT", {"default": 0.2, "min": 0.0, "max": 1.0}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 100}], "cycle": ["INT", {"default": 1, "min": 1, "max": 10, "step": 1}]}, "optional": {"refiner_basic_pipe_opt": ["BASIC_PIPE"], "inpaint_model": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}], "noise_mask_feather": ["INT", {"default": 20, "min": 0, "max": 100, "step": 1}], "scheduler_func_opt": ["SCHEDULER_FUNC"]}}, "input_order": {"required": ["image", "segs", "guide_size", "guide_size_for", "max_size", "seed", "steps", "cfg", "sampler_name", "scheduler", "denoise", "noise_mask", "force_inpaint", "basic_pipe", "refiner_ratio", "batch_size", "cycle"], "optional": ["refiner_basic_pipe_opt", "inpaint_model", "noise_mask_feather", "scheduler_func_opt"]}, "output": ["SEGS", "IMAGE"], "output_is_list": [false, true], "output_name": ["segs", "cnet_images"], "name": "SEGSDetailer", "display_name": "SEGSDetailer", "description": "This node enhances details by inpainting each region within the detected area bundle (SEGS) after enlarging them based on the guide size.\nThis node is applied specifically to SEGS rather than the entire image. To apply it to the entire image, use the 'SEGS Paste' node.", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Detailer", "output_node": false}, "SEGSPaste": {"input": {"required": {"image": ["IMAGE"], "segs": ["SEGS"], "feather": ["INT", {"default": 5, "min": 0, "max": 100, "step": 1}], "alpha": ["INT", {"default": 255, "min": 0, "max": 255, "step": 1}]}, "optional": {"ref_image_opt": ["IMAGE"]}}, "input_order": {"required": ["image", "segs", "feather", "alpha"], "optional": ["ref_image_opt"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "SEGSPaste", "display_name": "SEGSPaste", "description": "This node provides a function to paste the enhanced SEGS, improved through the SEGS detailer, back onto the original image.", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Detailer", "output_node": false}, "SEGSPreview": {"input": {"required": {"segs": ["SEGS"], "alpha_mode": ["BOOLEAN", {"default": true, "label_on": "enable", "label_off": "disable"}], "min_alpha": ["FLOAT", {"default": 0.2, "min": 0.0, "max": 1.0, "step": 0.01}]}, "optional": {"fallback_image_opt": ["IMAGE"]}}, "input_order": {"required": ["segs", "alpha_mode", "min_alpha"], "optional": ["fallback_image_opt"]}, "output": ["IMAGE"], "output_is_list": [true], "output_name": ["IMAGE"], "name": "SEGSPreview", "display_name": "SEGSPreview", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": true}, "SEGSPreviewCNet": {"input": {"required": {"segs": ["SEGS"]}}, "input_order": {"required": ["segs"]}, "output": ["IMAGE"], "output_is_list": [true], "output_name": ["IMAGE"], "name": "SEGSPreviewCNet", "display_name": "SEGSPreview (CNET Image)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": true}, "SEGSToImageList": {"input": {"required": {"segs": ["SEGS"]}, "optional": {"fallback_image_opt": ["IMAGE"]}}, "input_order": {"required": ["segs"], "optional": ["fallback_image_opt"]}, "output": ["IMAGE"], "output_is_list": [true], "output_name": ["IMAGE"], "name": "SEGSToImageList", "display_name": "SEGSToImageList", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactSEGSToMaskList": {"input": {"required": {"segs": ["SEGS"]}}, "input_order": {"required": ["segs"]}, "output": ["MASK"], "output_is_list": [true], "output_name": ["MASK"], "name": "ImpactSEGSToMaskList", "display_name": "SEGS to Mask List", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactSEGSToMaskBatch": {"input": {"required": {"segs": ["SEGS"]}}, "input_order": {"required": ["segs"]}, "output": ["MASK"], "output_is_list": [false], "output_name": ["MASK"], "name": "ImpactSEGSToMaskBatch", "display_name": "SEGS to Mask Batch", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactSEGSConcat": {"input": {"required": {"segs1": ["SEGS"]}}, "input_order": {"required": ["segs1"]}, "output": ["SEGS"], "output_is_list": [false], "output_name": ["SEGS"], "name": "ImpactSEGSConcat", "display_name": "SEGS Concat", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactSEGSPicker": {"input": {"required": {"picks": ["STRING", {"multiline": true, "dynamicPrompts": false, "pysssss.autocomplete": false}], "segs": ["SEGS"]}, "optional": {"fallback_image_opt": ["IMAGE"]}, "hidden": {"unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["picks", "segs"], "optional": ["fallback_image_opt"], "hidden": ["unique_id"]}, "output": ["SEGS"], "output_is_list": [false], "output_name": ["SEGS"], "name": "ImpactSEGSPicker", "display_name": "Picker (SEGS)", "description": "This node provides a function to select only the chosen SEGS from the input SEGS.", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactMakeTileSEGS": {"input": {"required": {"images": ["IMAGE"], "bbox_size": ["INT", {"default": 512, "min": 64, "max": 4096, "step": 8}], "crop_factor": ["FLOAT", {"default": 3.0, "min": 1.0, "max": 10, "step": 0.01}], "min_overlap": ["INT", {"default": 5, "min": 0, "max": 512, "step": 1}], "filter_segs_dilation": ["INT", {"default": 20, "min": -255, "max": 255, "step": 1}], "mask_irregularity": ["FLOAT", {"default": 0, "min": 0, "max": 1.0, "step": 0.01}], "irregular_mask_mode": [["Reuse fast", "Reuse quality", "All random fast", "All random quality"]]}, "optional": {"filter_in_segs_opt": ["SEGS"], "filter_out_segs_opt": ["SEGS"]}}, "input_order": {"required": ["images", "bbox_size", "crop_factor", "min_overlap", "filter_segs_dilation", "mask_irregularity", "irregular_mask_mode"], "optional": ["filter_in_segs_opt", "filter_out_segs_opt"]}, "output": ["SEGS"], "output_is_list": [false], "output_name": ["SEGS"], "name": "ImpactMakeTileSEGS", "display_name": "Make Tile SEGS", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/__for_testing", "output_node": false}, "ImpactSEGSMerge": {"input": {"required": {"segs": ["SEGS"]}}, "input_order": {"required": ["segs"]}, "output": ["SEGS"], "output_is_list": [false], "output_name": ["SEGS"], "name": "ImpactSEGSMerge", "display_name": "SEGS Merge", "description": "SEGS contains multiple SEGs. SEGS Merge integrates several SEGs into a single merged SEG. The label is changed to `merged` and the confidence becomes the minimum confidence. The applied controlnet and cropped_image are removed.", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "SEGSDetailerForAnimateDiff": {"input": {"required": {"image_frames": ["IMAGE"], "segs": ["SEGS"], "guide_size": ["FLOAT", {"default": 512, "min": 64, "max": 16384, "step": 8}], "guide_size_for": ["BOOLEAN", {"default": true, "label_on": "bbox", "label_off": "crop_region"}], "max_size": ["FLOAT", {"default": 768, "min": 64, "max": 16384, "step": 8}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "AYS SDXL", "AYS SD1", "AYS SVD", "GITS[coeff=1.2]", "LTXV[default]", "OSS FLUX", "OSS Wan", "OSS Chroma"]], "denoise": ["FLOAT", {"default": 0.5, "min": 0.0001, "max": 1.0, "step": 0.01}], "basic_pipe": ["BASIC_PIPE", {"tooltip": "If the `ImpactDummyInput` is connected to the model in the basic_pipe, the inference stage is skipped."}], "refiner_ratio": ["FLOAT", {"default": 0.2, "min": 0.0, "max": 1.0}]}, "optional": {"refiner_basic_pipe_opt": ["BASIC_PIPE"], "noise_mask_feather": ["INT", {"default": 20, "min": 0, "max": 100, "step": 1}], "scheduler_func_opt": ["SCHEDULER_FUNC"]}}, "input_order": {"required": ["image_frames", "segs", "guide_size", "guide_size_for", "max_size", "seed", "steps", "cfg", "sampler_name", "scheduler", "denoise", "basic_pipe", "refiner_ratio"], "optional": ["refiner_basic_pipe_opt", "noise_mask_feather", "scheduler_func_opt"]}, "output": ["SEGS", "IMAGE"], "output_is_list": [false, true], "output_name": ["segs", "cnet_images"], "name": "SEGSDetailerForAnimateDiff", "display_name": "SEGSDetailer For Video (SEGS/pipe)", "description": "This node enhances details by inpainting each region within the detected area bundle (SEGS) after enlarging them based on the guide size.\nThis node is applied specifically to SEGS rather than the entire image. To apply it to the entire image, use the 'SEGS Paste' node.\nAs a specialized detailer node for improving video details, such as in AnimateDiff, this node can handle cases where the masks contained in SEGS serve as batch masks spanning multiple frames.", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Detailer", "output_node": false}, "ImpactKSamplerBasicPipe": {"input": {"required": {"basic_pipe": ["BASIC_PIPE", {"tooltip": "basic_pipe input for sampling"}], "seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "tooltip": "Random seed to use for generating CPU noise for sampling."}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000, "tooltip": "total sampling steps"}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0, "tooltip": "classifier free guidance value"}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"], {"tooltip": "sampler"}], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "AYS SDXL", "AYS SD1", "AYS SVD", "GITS[coeff=1.2]", "LTXV[default]", "OSS FLUX", "OSS Wan", "OSS Chroma"], {"tooltip": "noise schedule"}], "latent_image": ["LATENT", {"tooltip": "input latent image"}], "denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01, "tooltip": "The amount of noise to remove. This amount is the noise added at the start, and the higher it is, the more the input latent will be modified before being returned."}]}, "optional": {"scheduler_func_opt": ["SCHEDULER_FUNC", {"tooltip": "[OPTIONAL] Noise schedule generation function. If this is set, the scheduler widget will be ignored."}]}}, "input_order": {"required": ["basic_pipe", "seed", "steps", "cfg", "sampler_name", "scheduler", "latent_image", "denoise"], "optional": ["scheduler_func_opt"]}, "output": ["BASIC_PIPE", "LATENT", "VAE"], "output_is_list": [false, false, false], "output_name": ["BASIC_PIPE", "LATENT", "VAE"], "name": "ImpactKSamplerBasicPipe", "display_name": "KSampler (pipe)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/sampling", "output_node": false, "output_tooltips": ["passthrough input basic_pipe", "result latent", "VAE in basic_pipe"]}, "ImpactKSamplerAdvancedBasicPipe": {"input": {"required": {"basic_pipe": ["BASIC_PIPE", {"tooltip": "basic_pipe input for sampling"}], "add_noise": ["BOOLEAN", {"default": true, "label_on": "enable", "label_off": "disable", "tooltip": "Whether to add noise"}], "noise_seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "tooltip": "Random seed to use for generating CPU noise for sampling."}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000, "tooltip": "total sampling steps"}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0, "tooltip": "classifier free guidance value"}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"], {"tooltip": "sampler"}], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "AYS SDXL", "AYS SD1", "AYS SVD", "GITS[coeff=1.2]", "LTXV[default]", "OSS FLUX", "OSS Wan", "OSS Chroma"], {"tooltip": "noise schedule"}], "latent_image": ["LATENT", {"tooltip": "input latent image"}], "start_at_step": ["INT", {"default": 0, "min": 0, "max": 10000, "tooltip": "The starting step of the sampling to be applied at this node within the range of 'steps'."}], "end_at_step": ["INT", {"default": 10000, "min": 0, "max": 10000, "tooltip": "The step at which sampling applied at this node will stop within the range of steps (if greater than steps, sampling will continue only up to steps)."}], "return_with_leftover_noise": ["BOOLEAN", {"default": false, "label_on": "enable", "label_off": "disable", "tooltip": "Whether to return the latent with noise remaining if the noise has not been completely removed according to the noise schedule, or to completely remove the noise before returning it."}]}, "optional": {"scheduler_func_opt": ["SCHEDULER_FUNC", {"tooltip": "[OPTIONAL] Noise schedule generation function. If this is set, the scheduler widget will be ignored."}]}}, "input_order": {"required": ["basic_pipe", "add_noise", "noise_seed", "steps", "cfg", "sampler_name", "scheduler", "latent_image", "start_at_step", "end_at_step", "return_with_leftover_noise"], "optional": ["scheduler_func_opt"]}, "output": ["BASIC_PIPE", "LATENT", "VAE"], "output_is_list": [false, false, false], "output_name": ["BASIC_PIPE", "LATENT", "VAE"], "name": "ImpactKSamplerAdvancedBasicPipe", "display_name": "KSampler (Advanced/pipe)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/sampling", "output_node": false, "output_tooltips": ["passthrough input basic_pipe", "result latent", "VAE in basic_pipe"]}, "ReencodeLatent": {"input": {"required": {"samples": ["LATENT"], "tile_mode": [["None", "Both", "Decode(input) only", "Encode(output) only"]], "input_vae": ["VAE"], "output_vae": ["VAE"], "tile_size": ["INT", {"default": 512, "min": 320, "max": 4096, "step": 64}]}, "optional": {"overlap": ["INT", {"default": 64, "min": 0, "max": 4096, "step": 32, "tooltip": "This setting applies when 'tile_mode' is enabled."}]}}, "input_order": {"required": ["samples", "tile_mode", "input_vae", "output_vae", "tile_size"], "optional": ["overlap"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "ReencodeLatent", "display_name": "Reencode Latent", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ReencodeLatentPipe": {"input": {"required": {"samples": ["LATENT"], "tile_mode": [["None", "Both", "Decode(input) only", "Encode(output) only"]], "input_basic_pipe": ["BASIC_PIPE"], "output_basic_pipe": ["BASIC_PIPE"]}}, "input_order": {"required": ["samples", "tile_mode", "input_basic_pipe", "output_basic_pipe"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "ReencodeLatentPipe", "display_name": "Reencode Latent (pipe)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactImageBatchToImageList": {"input": {"required": {"image": ["IMAGE"]}}, "input_order": {"required": ["image"]}, "output": ["IMAGE"], "output_is_list": [true], "output_name": ["IMAGE"], "name": "ImpactImageBatchToImageList", "display_name": "Image Batch to Image List", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactMakeImageList": {"input": {"optional": {"image1": ["IMAGE"]}}, "input_order": {"optional": ["image1"]}, "output": ["IMAGE"], "output_is_list": [true], "output_name": ["IMAGE"], "name": "ImpactMakeImageList", "display_name": "Make Image List", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactMakeImageBatch": {"input": {"optional": {"image1": ["IMAGE"]}}, "input_order": {"optional": ["image1"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "ImpactMakeImageBatch", "display_name": "Make Image Batch", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactMakeAnyList": {"input": {"required": {}, "optional": {"value1": ["*"]}}, "input_order": {"required": [], "optional": ["value1"]}, "output": ["*"], "output_is_list": [true], "output_name": ["*"], "name": "ImpactMakeAnyList", "display_name": "Make List (Any)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactMakeMaskList": {"input": {"required": {"mask1": ["MASK"]}}, "input_order": {"required": ["mask1"]}, "output": ["MASK"], "output_is_list": [true], "output_name": ["MASK"], "name": "ImpactMakeMaskList", "display_name": "Make Mask List", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactMakeMaskBatch": {"input": {"optional": {"mask1": ["MASK"]}}, "input_order": {"optional": ["mask1"]}, "output": ["MASK"], "output_is_list": [false], "output_name": ["MASK"], "name": "ImpactMakeMaskBatch", "display_name": "Make Mask Batch", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactSelectNthItemOfAnyList": {"input": {"required": {"any_list": ["*"], "index": ["INT", {"default": 0, "min": 0, "max": 9223372036854775807, "step": 1, "tooltip": "The index of the item you want to select from the list."}]}}, "input_order": {"required": ["any_list", "index"]}, "output": ["*"], "output_is_list": [false], "output_name": ["*"], "name": "ImpactSelectNthItemOfAnyList", "display_name": "Select Nth Item (Any list)", "description": "Selects the Nth item from a list. If the index is out of range, it returns the last item in the list.", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "RegionalSampler": {"input": {"required": {"seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "tooltip": "Random seed to use for generating CPU noise for sampling."}], "seed_2nd": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "tooltip": "Additional noise seed. The behavior is determined by seed_2nd_mode."}], "seed_2nd_mode": [["ignore", "fixed", "seed+seed_2nd", "seed-seed_2nd", "increment", "decrement", "randomize"], {"tooltip": "application method of seed_2nd. 1) ignore: Do not use seed_2nd. In the base only sampling stage, the seed is applied as a noise seed, and in the regional sampling stage, denoising is performed as it is without additional noise. 2) Others: In the base only sampling stage, the seed is applied as a noise seed, and once it is closed so that there is no leftover noise, new noise is added with seed_2nd and the regional samping stage is performed. a) fixed: Use seed_2nd as it is as an additional noise seed. b) seed+seed_2nd: Apply the value of seed+seed_2nd as an additional noise seed. c) seed-seed_2nd: Apply the value of seed-seed_2nd as an additional noise seed. d) increment: Not implemented yet. Same with fixed. e) decrement: Not implemented yet. Same with fixed. f) randomize: Not implemented yet. Same with fixed."}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000, "tooltip": "total sampling steps"}], "base_only_steps": ["INT", {"default": 2, "min": 0, "max": 10000, "tooltip": "total sampling steps"}], "denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01, "tooltip": "The amount of noise to remove. This amount is the noise added at the start, and the higher it is, the more the input latent will be modified before being returned."}], "samples": ["LATENT", {"tooltip": "input latent image"}], "base_sampler": ["KSAMPLER_ADVANCED", {"tooltip": "The sampler applied outside the area set by the regional_prompt."}], "regional_prompts": ["REGIONAL_PROMPTS", {"tooltip": "The prompt applied to each region"}], "overlap_factor": ["INT", {"default": 10, "min": 0, "max": 10000, "tooltip": "To smooth the seams of the region boundaries, expand the mask set in regional_prompts by the overlap_factor amount to overlap with other regions."}], "restore_latent": ["BOOLEAN", {"default": true, "label_on": "enabled", "label_off": "disabled", "tooltip": "At each step, restore the noise outside the mask area to its original state, as per the principle of inpainting. This option is provided for backward compatibility, and it is recommended to always set it to true."}], "additional_mode": [["DISABLE", "ratio additional", "ratio between"], {"default": "ratio between", "tooltip": "..._sde or uni_pc and other special samplers are used, the region is not properly denoised, and it causes a phenomenon that destroys the overall harmony. To compensate for this, a recovery operation is performed using another sampler. This requires a longer time for sampling because a second sampling is performed at each step in each region using a special sampler. 1) DISABLE: Disable this feature. 2) ratio additional: After performing the denoise amount to be performed in the step with the sampler set in the region, the recovery sampler is additionally applied by the additional_sigma_ratio. If you use this option, the total denoise amount increases by additional_sigma_ratio. 3) ratio between: The denoise amount to be performed in the step with the sampler set in the region and the denoise amount to be applied to the recovery sampler are divided by additional_sigma_ratio, and denoise is performed for each denoise amount. If you use this option, the total denoise amount does not change."}], "additional_sampler": [["AUTO", "euler", "heun", "heunpp2", "dpm_2", "dpm_fast", "dpmpp_2m", "ddpm"], {"tooltip": "1) AUTO: Automatically set the recovery sampler. If the sampler is uni_pc, uni_pc_bh2, dpmpp_sde, dpmpp_sde_gpu, the dpm_fast sampler is selected If the sampler is dpmpp_2m_sde, dpmpp_2m_sde_gpu, dpmpp_3m_sde, dpmpp_3m_sde_gpu, the dpmpp_2m sampler is selected. 2) Others: Manually set the recovery sampler."}], "additional_sigma_ratio": ["FLOAT", {"default": 0.3, "min": 0.0, "max": 1.0, "step": 0.01, "tooltip": "Multiplier of noise schedule to be applied according to additional_mode."}]}, "hidden": {"unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["seed", "seed_2nd", "seed_2nd_mode", "steps", "base_only_steps", "denoise", "samples", "base_sampler", "regional_prompts", "overlap_factor", "restore_latent", "additional_mode", "additional_sampler", "additional_sigma_ratio"], "hidden": ["unique_id"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "RegionalSampler", "display_name": "RegionalSampler", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Regional", "output_node": false, "output_tooltips": ["result latent"]}, "RegionalSamplerAdvanced": {"input": {"required": {"add_noise": ["BOOLEAN", {"default": true, "label_on": "enabled", "label_off": "disabled", "tooltip": "Whether to add noise"}], "noise_seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "tooltip": "Random seed to use for generating CPU noise for sampling."}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000, "tooltip": "total sampling steps"}], "start_at_step": ["INT", {"default": 0, "min": 0, "max": 10000, "tooltip": "The starting step of the sampling to be applied at this node within the range of 'steps'."}], "end_at_step": ["INT", {"default": 10000, "min": 0, "max": 10000, "tooltip": "The step at which sampling applied at this node will stop within the range of steps (if greater than steps, sampling will continue only up to steps)."}], "overlap_factor": ["INT", {"default": 10, "min": 0, "max": 10000, "tooltip": "To smooth the seams of the region boundaries, expand the mask set in regional_prompts by the overlap_factor amount to overlap with other regions."}], "restore_latent": ["BOOLEAN", {"default": true, "label_on": "enabled", "label_off": "disabled", "tooltip": "At each step, restore the noise outside the mask area to its original state, as per the principle of inpainting. This option is provided for backward compatibility, and it is recommended to always set it to true."}], "return_with_leftover_noise": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled", "tooltip": "Whether to return the latent with noise remaining if the noise has not been completely removed according to the noise schedule, or to completely remove the noise before returning it."}], "latent_image": ["LATENT", {"tooltip": "input latent image"}], "base_sampler": ["KSAMPLER_ADVANCED", {"tooltip": "The sampler applied outside the area set by the regional_prompt."}], "regional_prompts": ["REGIONAL_PROMPTS", {"tooltip": "The prompt applied to each region"}], "additional_mode": [["DISABLE", "ratio additional", "ratio between"], {"default": "ratio between", "tooltip": "..._sde or uni_pc and other special samplers are used, the region is not properly denoised, and it causes a phenomenon that destroys the overall harmony. To compensate for this, a recovery operation is performed using another sampler. This requires a longer time for sampling because a second sampling is performed at each step in each region using a special sampler. 1) DISABLE: Disable this feature. 2) ratio additional: After performing the denoise amount to be performed in the step with the sampler set in the region, the recovery sampler is additionally applied by the additional_sigma_ratio. If you use this option, the total denoise amount increases by additional_sigma_ratio. 3) ratio between: The denoise amount to be performed in the step with the sampler set in the region and the denoise amount to be applied to the recovery sampler are divided by additional_sigma_ratio, and denoise is performed for each denoise amount. If you use this option, the total denoise amount does not change."}], "additional_sampler": [["AUTO", "euler", "heun", "heunpp2", "dpm_2", "dpm_fast", "dpmpp_2m", "ddpm"], {"tooltip": "1) AUTO: Automatically set the recovery sampler. If the sampler is uni_pc, uni_pc_bh2, dpmpp_sde, dpmpp_sde_gpu, the dpm_fast sampler is selected If the sampler is dpmpp_2m_sde, dpmpp_2m_sde_gpu, dpmpp_3m_sde, dpmpp_3m_sde_gpu, the dpmpp_2m sampler is selected. 2) Others: Manually set the recovery sampler."}], "additional_sigma_ratio": ["FLOAT", {"default": 0.3, "min": 0.0, "max": 1.0, "step": 0.01, "tooltip": "Multiplier of noise schedule to be applied according to additional_mode."}]}, "hidden": {"unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["add_noise", "noise_seed", "steps", "start_at_step", "end_at_step", "overlap_factor", "restore_latent", "return_with_leftover_noise", "latent_image", "base_sampler", "regional_prompts", "additional_mode", "additional_sampler", "additional_sigma_ratio"], "hidden": ["unique_id"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "RegionalSamplerAdvanced", "display_name": "RegionalSamplerAdvanced", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Regional", "output_node": false, "output_tooltips": ["result latent"]}, "CombineRegionalPrompts": {"input": {"required": {"regional_prompts1": ["REGIONAL_PROMPTS", {"tooltip": "input regional_prompts. (Connecting to the input slot increases the number of additional slots.)"}]}}, "input_order": {"required": ["regional_prompts1"]}, "output": ["REGIONAL_PROMPTS"], "output_is_list": [false], "output_name": ["REGIONAL_PROMPTS"], "name": "CombineRegionalPrompts", "display_name": "CombineRegionalPrompts", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Regional", "output_node": false, "output_tooltips": ["Combined REGIONAL_PROMPTS"]}, "RegionalPrompt": {"input": {"required": {"mask": ["MASK", {"tooltip": "region mask"}], "advanced_sampler": ["KSAMPLER_ADVANCED", {"tooltip": "sampler for specified region"}]}, "optional": {"variation_seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "tooltip": "Sets the extra seed to be used for noise variation."}], "variation_strength": ["FLOAT", {"default": 0.0, "min": 0.0, "max": 1.0, "step": 0.01, "tooltip": "Sets the strength of the noise variation."}], "variation_method": [["linear", "slerp"], {"tooltip": "Sets how the original noise and extra noise are blended together."}]}}, "input_order": {"required": ["mask", "advanced_sampler"], "optional": ["variation_seed", "variation_strength", "variation_method"]}, "output": ["REGIONAL_PROMPTS"], "output_is_list": [false], "output_name": ["REGIONAL_PROMPTS"], "name": "RegionalPrompt", "display_name": "RegionalPrompt", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Regional", "output_node": false, "output_tooltips": ["regional prompts. (Can be used in the RegionalSampler.)"]}, "ImpactCombineConditionings": {"input": {"required": {"conditioning1": ["CONDITIONING", {"tooltip": "input conditionings. (Connecting to the input slot increases the number of additional slots.)"}]}}, "input_order": {"required": ["conditioning1"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "ImpactCombineConditionings", "display_name": "Combine Conditionings", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false, "output_tooltips": ["Combined conditioning"]}, "ImpactConcatConditionings": {"input": {"required": {"conditioning1": ["CONDITIONING", {"tooltip": "input conditionings. (Connecting to the input slot increases the number of additional slots.)"}]}}, "input_order": {"required": ["conditioning1"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "ImpactConcatConditionings", "display_name": "Concat Conditionings", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false, "output_tooltips": ["Concatenated conditioning"]}, "ImpactSEGSLabelAssign": {"input": {"required": {"segs": ["SEGS"], "labels": ["STRING", {"multiline": true, "placeholder": "List the label to be assigned in order of segs, separated by commas"}]}}, "input_order": {"required": ["segs", "labels"]}, "output": ["SEGS"], "output_is_list": [false], "output_name": ["SEGS"], "name": "ImpactSEGSLabelAssign", "display_name": "SEGS Assign (label)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactSEGSLabelFilter": {"input": {"required": {"segs": ["SEGS"], "preset": [["all", "hand", "face", "mouth", "eyes", "eyebrows", "pupils", "left_eyebrow", "left_eye", "left_pupil", "right_eyebrow", "right_eye", "right_pupil", "short_sleeved_shirt", "long_sleeved_shirt", "short_sleeved_outwear", "long_sleeved_outwear", "vest", "sling", "shorts", "trousers", "skirt", "short_sleeved_dress", "long_sleeved_dress", "vest_dress", "sling_dress", "person", "bicycle", "car", "motorcycle", "airplane", "bus", "train", "truck", "boat", "traffic light", "fire hydrant", "stop sign", "parking meter", "bench", "bird", "cat", "dog", "horse", "sheep", "cow", "elephant", "bear", "zebra", "giraffe", "backpack", "umbrella", "handbag", "tie", "suitcase", "frisbee", "skis", "snowboard", "sports ball", "kite", "baseball bat", "baseball glove", "skateboard", "surfboard", "tennis racket", "bottle", "wine glass", "cup", "fork", "knife", "spoon", "bowl", "banana", "apple", "sandwich", "orange", "broccoli", "carrot", "hot dog", "pizza", "donut", "cake", "chair", "couch", "potted plant", "bed", "dining table", "toilet", "tv", "laptop", "mouse", "remote", "keyboard", "cell phone", "microwave", "oven", "toaster", "sink", "refrigerator", "book", "clock", "vase", "scissors", "teddy bear", "hair drier", "toothbrush"]], "labels": ["STRING", {"multiline": true, "placeholder": "List the types of segments to be allowed, separated by commas"}]}}, "input_order": {"required": ["segs", "preset", "labels"]}, "output": ["SEGS", "SEGS"], "output_is_list": [false, false], "output_name": ["filtered_SEGS", "remained_SEGS"], "name": "ImpactSEGSLabelFilter", "display_name": "SEGS Filter (label)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactSEGSRangeFilter": {"input": {"required": {"segs": ["SEGS"], "target": [["area(=w*h)", "width", "height", "x1", "y1", "x2", "y2", "length_percent", "confidence(0-100)"]], "mode": ["BOOLEAN", {"default": true, "label_on": "inside", "label_off": "outside"}], "min_value": ["INT", {"default": 0, "min": 0, "max": 9223372036854775807, "step": 1}], "max_value": ["INT", {"default": 67108864, "min": 0, "max": 9223372036854775807, "step": 1}]}}, "input_order": {"required": ["segs", "target", "mode", "min_value", "max_value"]}, "output": ["SEGS", "SEGS"], "output_is_list": [false, false], "output_name": ["filtered_SEGS", "remained_SEGS"], "name": "ImpactSEGSRangeFilter", "display_name": "SEGS Filter (range)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactSEGSOrderedFilter": {"input": {"required": {"segs": ["SEGS"], "target": [["area(=w*h)", "width", "height", "x1", "y1", "x2", "y2", "confidence", "none"]], "order": ["BOOLEAN", {"default": true, "label_on": "descending", "label_off": "ascending"}], "take_start": ["INT", {"default": 0, "min": 0, "max": 9223372036854775807, "step": 1}], "take_count": ["INT", {"default": 1, "min": 0, "max": 9223372036854775807, "step": 1}]}}, "input_order": {"required": ["segs", "target", "order", "take_start", "take_count"]}, "output": ["SEGS", "SEGS"], "output_is_list": [false, false], "output_name": ["filtered_SEGS", "remained_SEGS"], "name": "ImpactSEGSOrderedFilter", "display_name": "SEGS Filter (ordered)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactSEGSIntersectionFilter": {"input": {"required": {"segs1": ["SEGS"], "segs2": ["SEGS"], "ioa_threshold": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["segs1", "segs2", "ioa_threshold"]}, "output": ["SEGS"], "output_is_list": [false], "output_name": ["filtered_SEGS"], "name": "ImpactSEGSIntersectionFilter", "display_name": "SEGS Filter (intersection)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactSEGSNMSFilter": {"input": {"required": {"segs": ["SEGS"], "iou_threshold": ["FLOAT", {"default": 0.5, "min": 0.0, "max": 1.0, "step": 0.01}]}}, "input_order": {"required": ["segs", "iou_threshold"]}, "output": ["SEGS"], "output_is_list": [false], "output_name": ["filtered_SEGS"], "name": "ImpactSEGSNMSFilter", "display_name": "SEGS Filter (non max suppression)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactCompare": {"input": {"required": {"cmp": [["a = b", "a <> b", "a > b", "a < b", "a >= b", "a <= b", "tt", "ff"]], "a": ["*"], "b": ["*"]}}, "input_order": {"required": ["cmp", "a", "b"]}, "output": ["BOOLEAN"], "output_is_list": [false], "output_name": ["BOOLEAN"], "name": "ImpactCompare", "display_name": "ImpactCompare", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Logic", "output_node": false}, "ImpactConditionalBranch": {"input": {"required": {"cond": ["BOOLEAN"], "tt_value": ["*", {"lazy": true}], "ff_value": ["*", {"lazy": true}]}}, "input_order": {"required": ["cond", "tt_value", "ff_value"]}, "output": ["*"], "output_is_list": [false], "output_name": ["*"], "name": "ImpactConditionalBranch", "display_name": "ImpactConditionalBranch", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Logic", "output_node": false}, "ImpactConditionalBranchSelMode": {"input": {"required": {"cond": ["BOOLEAN"]}, "optional": {"tt_value": ["*"], "ff_value": ["*"]}}, "input_order": {"required": ["cond"], "optional": ["tt_value", "ff_value"]}, "output": ["*"], "output_is_list": [false], "output_name": ["*"], "name": "ImpactConditionalBranchSelMode", "display_name": "ImpactConditionalBranchSelMode", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Logic", "output_node": false}, "ImpactIfNone": {"input": {"required": {}, "optional": {"signal": ["*"], "any_input": ["*"]}}, "input_order": {"required": [], "optional": ["signal", "any_input"]}, "output": ["*", "BOOLEAN"], "output_is_list": [false, false], "output_name": ["signal_opt", "bool"], "name": "ImpactIfNone", "display_name": "ImpactIfNone", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Logic", "output_node": false}, "ImpactConvertDataType": {"input": {"required": {"value": ["*"]}}, "input_order": {"required": ["value"]}, "output": ["STRING", "FLOAT", "INT", "BOOLEAN"], "output_is_list": [false, false, false, false], "output_name": ["STRING", "FLOAT", "INT", "BOOLEAN"], "name": "ImpactConvertDataType", "display_name": "ImpactConvertDataType", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Logic", "output_node": false}, "ImpactLogicalOperators": {"input": {"required": {"operator": [["and", "or", "xor"]], "bool_a": ["BOOLEAN", {"forceInput": true}], "bool_b": ["BOOLEAN", {"forceInput": true}]}}, "input_order": {"required": ["operator", "bool_a", "bool_b"]}, "output": ["BOOLEAN"], "output_is_list": [false], "output_name": ["BOOLEAN"], "name": "ImpactLogicalOperators", "display_name": "ImpactLogicalOperators", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Logic", "output_node": false}, "ImpactInt": {"input": {"required": {"value": ["INT", {"default": 0, "min": 0, "max": 9223372036854775807, "step": 1}]}}, "input_order": {"required": ["value"]}, "output": ["INT"], "output_is_list": [false], "output_name": ["INT"], "name": "ImpactInt", "display_name": "ImpactInt", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Logic", "output_node": false}, "ImpactFloat": {"input": {"required": {"value": ["FLOAT", {"default": 1.0, "min": -3.402823466e+38, "max": 3.402823466e+38}]}}, "input_order": {"required": ["value"]}, "output": ["FLOAT"], "output_is_list": [false], "output_name": ["FLOAT"], "name": "ImpactFloat", "display_name": "ImpactFloat", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Logic", "output_node": false}, "ImpactBoolean": {"input": {"required": {"value": ["BOOLEAN", {"default": false}]}}, "input_order": {"required": ["value"]}, "output": ["BOOLEAN"], "output_is_list": [false], "output_name": ["BOOLEAN"], "name": "ImpactBoolean", "display_name": "ImpactBoolean", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Logic", "output_node": false}, "ImpactValueSender": {"input": {"required": {"value": ["*"], "link_id": ["INT", {"default": 0, "min": 0, "max": 9223372036854775807, "step": 1}]}, "optional": {"signal_opt": ["*"]}}, "input_order": {"required": ["value", "link_id"], "optional": ["signal_opt"]}, "output": ["*"], "output_is_list": [false], "output_name": ["signal"], "name": "ImpactValueSender", "display_name": "ImpactValueSender", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Logic", "output_node": true}, "ImpactValueReceiver": {"input": {"required": {"typ": [["STRING", "INT", "FLOAT", "BOOLEAN"]], "value": ["STRING", {"default": ""}], "link_id": ["INT", {"default": 0, "min": 0, "max": 9223372036854775807, "step": 1}]}}, "input_order": {"required": ["typ", "value", "link_id"]}, "output": ["*"], "output_is_list": [false], "output_name": ["*"], "name": "ImpactValueReceiver", "display_name": "ImpactValueReceiver", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Logic", "output_node": false}, "ImpactImageInfo": {"input": {"required": {"value": ["IMAGE"]}}, "input_order": {"required": ["value"]}, "output": ["INT", "INT", "INT", "INT"], "output_is_list": [false, false, false, false], "output_name": ["batch", "height", "width", "channel"], "name": "ImpactImageInfo", "display_name": "ImpactImageInfo", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Logic/_for_test", "output_node": false}, "ImpactLatentInfo": {"input": {"required": {"value": ["LATENT"]}}, "input_order": {"required": ["value"]}, "output": ["INT", "INT", "INT", "INT"], "output_is_list": [false, false, false, false], "output_name": ["batch", "height", "width", "channel"], "name": "ImpactLatentInfo", "display_name": "ImpactLatentInfo", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Logic/_for_test", "output_node": false}, "ImpactMinMax": {"input": {"required": {"mode": ["BOOLEAN", {"default": true, "label_on": "max", "label_off": "min"}], "a": ["*"], "b": ["*"]}}, "input_order": {"required": ["mode", "a", "b"]}, "output": ["INT"], "output_is_list": [false], "output_name": ["INT"], "name": "ImpactMinMax", "display_name": "ImpactMinMax", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Logic/_for_test", "output_node": false}, "ImpactNeg": {"input": {"required": {"value": ["BOOLEAN", {"forceInput": true}]}}, "input_order": {"required": ["value"]}, "output": ["BOOLEAN"], "output_is_list": [false], "output_name": ["BOOLEAN"], "name": "ImpactNeg", "display_name": "ImpactNeg", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Logic", "output_node": false}, "ImpactConditionalStopIteration": {"input": {"required": {"cond": ["BOOLEAN", {"forceInput": true}]}}, "input_order": {"required": ["cond"]}, "output": [], "output_is_list": [], "output_name": [], "name": "ImpactConditionalStopIteration", "display_name": "ImpactConditionalStopIteration", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Logic", "output_node": true}, "ImpactStringSelector": {"input": {"required": {"strings": ["STRING", {"multiline": true}], "multiline": ["BOOLEAN", {"default": false, "label_on": "enabled", "label_off": "disabled"}], "select": ["INT", {"min": 0, "max": 9223372036854775807, "step": 1, "default": 0}]}}, "input_order": {"required": ["strings", "multiline", "select"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["STRING"], "name": "ImpactStringSelector", "display_name": "String Selector", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "StringListToString": {"input": {"required": {"join_with": ["STRING", {"default": "\\n"}], "string_list": ["STRING", {"forceInput": true}]}}, "input_order": {"required": ["join_with", "string_list"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["STRING"], "name": "StringListToString", "display_name": "String List to String", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "WildcardPromptFromString": {"input": {"required": {"string": ["STRING", {"forceInput": true}], "delimiter": ["STRING", {"multiline": false, "default": "\\n"}], "prefix_all": ["STRING", {"multiline": false}], "postfix_all": ["STRING", {"multiline": false}], "restrict_to_tags": ["STRING", {"multiline": false}], "exclude_tags": ["STRING", {"multiline": false}]}}, "input_order": {"required": ["string", "delimiter", "prefix_all", "postfix_all", "restrict_to_tags", "exclude_tags"]}, "output": ["STRING", "STRING"], "output_is_list": [false, false], "output_name": ["wildcard", "segs_labels"], "name": "WildcardPromptFromString", "display_name": "Wildcard Prompt from String", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactExecutionOrderController": {"input": {"required": {"signal": ["*"], "value": ["*"]}}, "input_order": {"required": ["signal", "value"]}, "output": ["*", "*"], "output_is_list": [false, false], "output_name": ["signal", "value"], "name": "ImpactExecutionOrderController", "display_name": "Execution Order Controller", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactListBridge": {"input": {"required": {"list_input": ["*"]}}, "input_order": {"required": ["list_input"]}, "output": ["*"], "output_is_list": [true], "output_name": ["list_output"], "name": "ImpactListBridge", "display_name": "List Bridge", "description": "When passing the list output through this node, it collects and organizes the data before forwarding it, which ensures that the previous stage's sub-workflow has been completed.", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "RemoveNoiseMask": {"input": {"required": {"samples": ["LATENT"]}}, "input_order": {"required": ["samples"]}, "output": ["LATENT"], "output_is_list": [false], "output_name": ["LATENT"], "name": "RemoveNoiseMask", "display_name": "Remove Noise Mask", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "ImpactLogger": {"input": {"required": {"data": ["*"], "text": ["STRING", {"multiline": true}]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["data", "text"], "hidden": ["prompt", "extra_pnginfo", "unique_id"]}, "output": [], "output_is_list": [], "output_name": [], "name": "ImpactLogger", "display_name": "ImpactLogger", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Debug", "output_node": true}, "ImpactDummyInput": {"input": {"required": {}}, "input_order": {"required": []}, "output": ["*"], "output_is_list": [false], "output_name": ["*"], "name": "ImpactDummyInput", "display_name": "ImpactDummyInput", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Debug", "output_node": false}, "ImpactQueueTrigger": {"input": {"required": {"signal": ["*"], "mode": ["BOOLEAN", {"default": true, "label_on": "Trigger", "label_off": "Don't trigger"}]}}, "input_order": {"required": ["signal", "mode"]}, "output": ["*"], "output_is_list": [false], "output_name": ["signal_opt"], "name": "ImpactQueueTrigger", "display_name": "Queue Trigger", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Logic/_for_test", "output_node": true}, "ImpactQueueTriggerCountdown": {"input": {"required": {"count": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "total": ["INT", {"default": 10, "min": 1, "max": 18446744073709551615}], "mode": ["BOOLEAN", {"default": true, "label_on": "Trigger", "label_off": "Don't trigger"}]}, "optional": {"signal": ["*"]}, "hidden": {"unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["count", "total", "mode"], "optional": ["signal"], "hidden": ["unique_id"]}, "output": ["*", "INT", "INT"], "output_is_list": [false, false, false], "output_name": ["signal_opt", "count", "total"], "name": "ImpactQueueTriggerCountdown", "display_name": "Queue Trigger (Countdown)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Logic/_for_test", "output_node": true}, "ImpactSetWidgetValue": {"input": {"required": {"signal": ["*"], "node_id": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "widget_name": ["STRING", {"multiline": false}]}, "optional": {"boolean_value": ["BOOLEAN", {"forceInput": true}], "int_value": ["INT", {"forceInput": true}], "float_value": ["FLOAT", {"forceInput": true}], "string_value": ["STRING", {"forceInput": true}]}}, "input_order": {"required": ["signal", "node_id", "widget_name"], "optional": ["boolean_value", "int_value", "float_value", "string_value"]}, "output": ["*"], "output_is_list": [false], "output_name": ["signal_opt"], "name": "ImpactSetWidgetValue", "display_name": "Set Widget Value", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Logic/_for_test", "output_node": true}, "ImpactNodeSetMuteState": {"input": {"required": {"signal": ["*"], "node_id": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "set_state": ["BOOLEAN", {"default": true, "label_on": "active", "label_off": "mute"}]}}, "input_order": {"required": ["signal", "node_id", "set_state"]}, "output": ["*"], "output_is_list": [false], "output_name": ["signal_opt"], "name": "ImpactNodeSetMuteState", "display_name": "Set Mute State", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Logic/_for_test", "output_node": true}, "ImpactControlBridge": {"input": {"required": {"value": ["*"], "mode": ["BOOLEAN", {"default": true, "label_on": "Active", "label_off": "Stop/Mute/Bypass"}], "behavior": [["Stop", "Mute", "Bypass"]]}, "hidden": {"unique_id": "UNIQUE_ID", "prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["value", "mode", "behavior"], "hidden": ["unique_id", "prompt", "extra_pnginfo"]}, "output": ["*"], "output_is_list": [false], "output_name": ["value"], "name": "ImpactControlBridge", "display_name": "Control Bridge", "description": "When behavior is Stop and mode is active, the input value is passed directly to the output.\nWhen behavior is Mute/Bypass and mode is active, the node connected to the output is changed to active state.\nWhen behavior is Stop and mode is Stop/Mute/Bypass, the workflow execution of the current node is halted.\nWhen behavior is Mute/Bypass and mode is Stop/Mute/Bypass, the node connected to the output is changed to Mute/Bypass state.", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Logic", "output_node": true}, "ImpactIsNotEmptySEGS": {"input": {"required": {"segs": ["SEGS"]}}, "input_order": {"required": ["segs"]}, "output": ["BOOLEAN"], "output_is_list": [false], "output_name": ["BOOLEAN"], "name": "ImpactIsNotEmptySEGS", "display_name": "SEGS isn't Empty", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Logic", "output_node": false}, "ImpactSleep": {"input": {"required": {"signal": ["*"], "seconds": ["FLOAT", {"default": 0.5, "min": 0, "max": 3600}]}}, "input_order": {"required": ["signal", "seconds"]}, "output": ["*"], "output_is_list": [false], "output_name": ["signal_opt"], "name": "ImpactSleep", "display_name": "Sleep", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Logic/_for_test", "output_node": true}, "ImpactRemoteBoolean": {"input": {"required": {"node_id": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "widget_name": ["STRING", {"multiline": false}], "value": ["BOOLEAN", {"default": true, "label_on": "True", "label_off": "False"}]}}, "input_order": {"required": ["node_id", "widget_name", "value"]}, "output": [], "output_is_list": [], "output_name": [], "name": "ImpactRemoteBoolean", "display_name": "Remote Boolean (on prompt)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Logic/_for_test", "output_node": true}, "ImpactRemoteInt": {"input": {"required": {"node_id": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615}], "widget_name": ["STRING", {"multiline": false}], "value": ["INT", {"default": 0, "min": -18446744073709551615, "max": 18446744073709551615}]}}, "input_order": {"required": ["node_id", "widget_name", "value"]}, "output": [], "output_is_list": [], "output_name": [], "name": "ImpactRemoteInt", "display_name": "Remote Int (on prompt)", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Logic/_for_test", "output_node": true}, "ImpactHFTransformersClassifierProvider": {"input": {"required": {"preset_repo_id": [["rizvandwiki/gender-classification-2", "NTQAI/pedestrian_gender_recognition", "Leilab/gender_class", "ProjectPersonal/GenderClassifier", "crangana/trained-gender", "cledoux42/GenderNew_v002", "ivensamdh/genderage2", "Manual repo id"]], "manual_repo_id": ["STRING", {"multiline": false}], "device_mode": [["AUTO", "Prefer GPU", "CPU"]]}}, "input_order": {"required": ["preset_repo_id", "manual_repo_id", "device_mode"]}, "output": ["TRANSFORMERS_CLASSIFIER"], "output_is_list": [false], "output_name": ["TRANSFORMERS_CLASSIFIER"], "name": "ImpactHFTransformersClassifierProvider", "display_name": "HF Transformers Classifier Provider", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/HuggingFace", "output_node": false}, "ImpactSEGSClassify": {"input": {"required": {"classifier": ["TRANSFORMERS_CLASSIFIER"], "segs": ["SEGS"], "preset_expr": [["#Female > #Male", "#Female < #Male", "female > 0.5", "male > 0.5", "Age16to25 > 0.1", "Age50to69 > 0.1", "Manual expr"]], "manual_expr": ["STRING", {"multiline": false}]}, "optional": {"ref_image_opt": ["IMAGE"]}}, "input_order": {"required": ["classifier", "segs", "preset_expr", "manual_expr"], "optional": ["ref_image_opt"]}, "output": ["SEGS", "SEGS", "STRING"], "output_is_list": [false, false, true], "output_name": ["filtered_SEGS", "remained_SEGS", "detected_labels"], "name": "ImpactSEGSClassify", "display_name": "SEGS Classify", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/HuggingFace", "output_node": false}, "ImpactSchedulerAdapter": {"input": {"required": {"scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"], {"defaultInput": true}], "extra_scheduler": [["None", "AYS SDXL", "AYS SD1", "AYS SVD", "GITS[coeff=1.2]", "LTXV[default]", "OSS FLUX", "OSS Wan", "OSS Chroma"]]}}, "input_order": {"required": ["scheduler", "extra_scheduler"]}, "output": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "AYS SDXL", "AYS SD1", "AYS SVD", "GITS[coeff=1.2]", "LTXV[default]", "OSS FLUX", "OSS Wan", "OSS Chroma"]], "output_is_list": [false], "output_name": ["scheduler"], "name": "ImpactSchedulerAdapter", "display_name": "Impact Scheduler Adapter", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/Util", "output_node": false}, "GITSSchedulerFuncProvider": {"input": {"required": {"coeff": ["FLOAT", {"default": 1.2, "min": 0.8, "max": 1.5, "step": 0.05, "tooltip": "coeff factor of GITS Scheduler"}], "denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01, "tooltip": "denoise amount for noise schedule"}]}}, "input_order": {"required": ["coeff", "denoise"]}, "output": ["SCHEDULER_FUNC"], "output_is_list": [false], "output_name": ["SCHEDULER_FUNC"], "name": "GITSSchedulerFuncProvider", "display_name": "GITSScheduler Func Provider", "description": "", "python_module": "custom_nodes.ComfyUI-Impact-Pack", "category": "ImpactPack/sampling", "output_node": false, "output_tooltips": ["Returns a function that generates a noise schedule using GITSScheduler. This can be used in place of a predetermined noise schedule to dynamically generate a noise schedule based on the steps."]}, "mxSeed": {"input": {"required": {"X": ["INT", {"default": 0, "min": 0, "max": 4294967296}]}}, "input_order": {"required": ["X"]}, "output": ["INT"], "output_is_list": [false], "output_name": ["X"], "name": "mxSeed", "display_name": "Seed", "description": "", "python_module": "custom_nodes.ComfyUI-mxToolkit", "category": "utils/mxToolkit", "output_node": false}, "mxStop": {"input": {"required": {"In": ["*"]}}, "input_order": {"required": ["In"]}, "output": ["*"], "output_is_list": [false], "output_name": ["*"], "name": "mxStop", "display_name": "Stop", "description": "", "python_module": "custom_nodes.ComfyUI-mxToolkit", "category": "utils/mxToolkit", "output_node": false}, "mxSlider": {"input": {"required": {"Xi": ["INT", {"default": 20, "min": -4294967296, "max": 4294967296}], "Xf": ["FLOAT", {"default": 20, "min": -4294967296, "max": 4294967296}], "isfloatX": ["INT", {"default": 0, "min": 0, "max": 1}]}}, "input_order": {"required": ["Xi", "Xf", "isfloatX"]}, "output": ["*"], "output_is_list": [false], "output_name": ["X"], "name": "mxSlider", "display_name": "Slider", "description": "", "python_module": "custom_nodes.ComfyUI-mxToolkit", "category": "utils/mxToolkit", "output_node": false}, "mxSlider2D": {"input": {"required": {"Xi": ["INT", {"default": 512, "min": -4294967296, "max": 4294967296}], "Xf": ["FLOAT", {"default": 512, "min": -4294967296, "max": 4294967296}], "Yi": ["INT", {"default": 512, "min": -4294967296, "max": 4294967296}], "Yf": ["FLOAT", {"default": 512, "min": -4294967296, "max": 4294967296}], "isfloatX": ["INT", {"default": 0, "min": 0, "max": 1}], "isfloatY": ["INT", {"default": 0, "min": 0, "max": 1}]}}, "input_order": {"required": ["Xi", "Xf", "Yi", "Yf", "isfloatX", "isfloatY"]}, "output": ["*", "*"], "output_is_list": [false, false], "output_name": ["X", "Y"], "name": "mxSlider2D", "display_name": "Slider 2D", "description": "", "python_module": "custom_nodes.ComfyUI-mxToolkit", "category": "utils/mxToolkit", "output_node": false}, "Checkpoint Loader with Name (Image Saver)": {"input": {"required": {"ckpt_name": [["3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"], {"tooltip": "checkpoint"}]}}, "input_order": {"required": ["ckpt_name"]}, "output": ["MODEL", "CLIP", "VAE", "STRING"], "output_is_list": [false, false, false, false], "output_name": ["MODEL", "CLIP", "VAE", "model_name"], "name": "Checkpoint Loader with Name (Image Saver)", "display_name": "Checkpoint Loader with Name (Image Saver)", "description": "Loads U-Net model, CLIP model and VAE model from a checkpoint file", "python_module": "custom_nodes.ComfyUI-Image-Saver", "category": "ImageSaver/utils", "output_node": false, "output_tooltips": ["U-Net model (denoising latents)", "CLIP (Contrastive Language-Image Pre-Training) model (encoding text prompts)", "VAE (Variational autoencoder) model (latent<->pixel encoding/decoding)", "checkpoint name"]}, "UNet loader with Name (Image Saver)": {"input": {"required": {"unet_name": [["flux1-krea-dev_fp8_scaled.safetensors", "flux1-schnell.safetensors", "hidream_i1_dev_fp8.safetensors", "hidream_i1_fast_fp8.safetensors"]], "weight_dtype": [["default", "fp8_e4m3fn", "fp8_e4m3fn_fast", "fp8_e5m2"]]}}, "input_order": {"required": ["unet_name", "weight_dtype"]}, "output": ["MODEL", "STRING"], "output_is_list": [false, false], "output_name": ["model", "filename"], "name": "UNet loader with Name (Image Saver)", "display_name": "UNet loader with Name (Image Saver)", "description": "Loads U-Net model and outputs it's filename", "python_module": "custom_nodes.ComfyUI-Image-Saver", "category": "ImageSaver/utils", "output_node": false, "output_tooltips": ["U-Net model (denoising latents)", "model filename"]}, "Image Saver": {"input": {"required": {"images": ["IMAGE", {"tooltip": "image(s) to save"}], "filename": ["STRING", {"default": "%time_%basemodelname_%seed", "multiline": false, "tooltip": "filename (available variables: %date, %time, %model, %width, %height, %seed, %counter, %sampler_name, %steps, %cfg, %scheduler, %basemodelname, %denoise, %clip_skip)"}], "path": ["STRING", {"default": "", "multiline": false, "tooltip": "path to save the images (under Comfy's save directory)"}], "extension": [["png", "jpeg", "jpg", "webp"], {"tooltip": "file extension/type to save image as"}]}, "optional": {"steps": ["INT", {"default": 20, "min": 1, "max": 10000, "tooltip": "number of steps"}], "cfg": ["FLOAT", {"default": 7.0, "min": 0.0, "max": 100.0, "tooltip": "CFG value"}], "modelname": ["STRING", {"default": "", "multiline": false, "tooltip": "model name (can be multiple, separated by commas)"}], "sampler_name": ["STRING", {"default": "", "multiline": false, "tooltip": "sampler name (as string)"}], "scheduler_name": ["STRING", {"default": "normal", "multiline": false, "tooltip": "scheduler name (as string)"}], "positive": ["STRING", {"default": "unknown", "multiline": true, "tooltip": "positive prompt"}], "negative": ["STRING", {"default": "unknown", "multiline": true, "tooltip": "negative prompt"}], "seed_value": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "tooltip": "seed"}], "width": ["INT", {"default": 512, "min": 0, "max": 16384, "step": 8, "tooltip": "image width"}], "height": ["INT", {"default": 512, "min": 0, "max": 16384, "step": 8, "tooltip": "image height"}], "lossless_webp": ["BOOLEAN", {"default": true, "tooltip": "if True, saved WEBP files will be lossless"}], "quality_jpeg_or_webp": ["INT", {"default": 100, "min": 1, "max": 100, "tooltip": "quality setting of JPEG/WEBP"}], "optimize_png": ["BOOLEAN", {"default": false, "tooltip": "if True, saved PNG files will be optimized (can reduce file size but is slower)"}], "counter": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "tooltip": "counter"}], "denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "tooltip": "denoise value"}], "clip_skip": ["INT", {"default": 0, "min": -24, "max": 24, "tooltip": "skip last CLIP layers (positive or negative value, 0 for no skip)"}], "time_format": ["STRING", {"default": "%Y-%m-%d-%H%M%S", "multiline": false, "tooltip": "timestamp format"}], "save_workflow_as_json": ["BOOLEAN", {"default": false, "tooltip": "if True, also saves the workflow as a separate JSON file"}], "embed_workflow": ["BOOLEAN", {"default": true, "tooltip": "if True, embeds the workflow in the saved image files.\nStable for PNG, experimental for WEBP.\nJPEG experimental and only if metadata size is below 65535 bytes"}], "additional_hashes": ["STRING", {"default": "", "multiline": false, "tooltip": "hashes separated by commas, optionally with names. 'Name:HASH' (e.g., 'MyLoRA:FF735FF83F98')\nWith download_civitai_data set to true, weights can be added as well. (e.g., 'HASH:Weight', 'Name:HASH:Weight')"}], "download_civitai_data": ["BOOLEAN", {"default": true, "tooltip": "Download and cache data from civitai.com to save correct metadata. Allows LoRA weights to be saved to the metadata."}], "easy_remix": ["BOOLEAN", {"default": true, "tooltip": "Strip LoRAs and simplify 'embedding:path' from the prompt to make the Remix option on civitai.com more seamless."}], "show_preview": ["BOOLEAN", {"default": true, "tooltip": "if True, displays saved images in the UI preview"}], "custom": ["STRING", {"default": "", "multiline": false, "tooltip": "custom string to add to the metadata, inserted into the a111 string between clip skip and model hash"}]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["images", "filename", "path", "extension"], "optional": ["steps", "cfg", "modelname", "sampler_name", "scheduler_name", "positive", "negative", "seed_value", "width", "height", "lossless_webp", "quality_jpeg_or_webp", "optimize_png", "counter", "denoise", "clip_skip", "time_format", "save_workflow_as_json", "embed_workflow", "additional_hashes", "download_civitai_data", "easy_remix", "show_preview", "custom"], "hidden": ["prompt", "extra_pnginfo"]}, "output": ["STRING", "STRING"], "output_is_list": [false, false], "output_name": ["hashes", "a1111_params"], "name": "Image Saver", "display_name": "Image Saver", "description": "Save images with civitai-compatible generation metadata", "python_module": "custom_nodes.ComfyUI-Image-Saver", "category": "ImageSaver", "output_node": true, "output_tooltips": ["Comma-separated list of the hashes to chain with other Image Saver additional_hashes", "Written parameters to the image metadata"]}, "Image Saver Simple": {"input": {"required": {"images": ["IMAGE", {"tooltip": "image(s) to save"}], "filename": ["STRING", {"default": "%time_%basemodelname_%seed", "multiline": false, "tooltip": "filename (available variables: %date, %time, %model, %width, %height, %seed, %counter, %sampler_name, %steps, %cfg, %scheduler_name, %basemodelname, %denoise, %clip_skip)"}], "path": ["STRING", {"default": "", "multiline": false, "tooltip": "path to save the images (under Comfy's save directory)"}], "extension": [["png", "jpeg", "jpg", "webp"], {"tooltip": "file extension/type to save image as"}], "lossless_webp": ["BOOLEAN", {"default": true, "tooltip": "if True, saved WEBP files will be lossless"}], "quality_jpeg_or_webp": ["INT", {"default": 100, "min": 1, "max": 100, "tooltip": "quality setting of JPEG/WEBP"}], "optimize_png": ["BOOLEAN", {"default": false, "tooltip": "if True, saved PNG files will be optimized (can reduce file size but is slower)"}], "embed_workflow": ["BOOLEAN", {"default": true, "tooltip": "if True, embeds the workflow in the saved image files.\nStable for PNG, experimental for WEBP.\nJPEG experimental and only if metadata size is below 65535 bytes"}], "save_workflow_as_json": ["BOOLEAN", {"default": false, "tooltip": "if True, also saves the workflow as a separate JSON file"}]}, "optional": {"metadata": ["METADATA", {"default": null, "tooltip": "metadata to embed in the image"}], "counter": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "tooltip": "counter"}], "time_format": ["STRING", {"default": "%Y-%m-%d-%H%M%S", "multiline": false, "tooltip": "timestamp format"}], "show_preview": ["BOOLEAN", {"default": true, "tooltip": "if True, displays saved images in the UI preview"}]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["images", "filename", "path", "extension", "lossless_webp", "quality_jpeg_or_webp", "optimize_png", "embed_workflow", "save_workflow_as_json"], "optional": ["metadata", "counter", "time_format", "show_preview"], "hidden": ["prompt", "extra_pnginfo"]}, "output": ["STRING", "STRING"], "output_is_list": [false, false], "output_name": ["hashes", "a1111_params"], "name": "Image Saver Simple", "display_name": "Image Saver Simple", "description": "Save images with civitai-compatible generation metadata", "python_module": "custom_nodes.ComfyUI-Image-Saver", "category": "ImageSaver", "output_node": true, "output_tooltips": ["Comma-separated list of the hashes to chain with other Image Saver additional_hashes", "Written parameters to the image metadata"]}, "Image Saver Metadata": {"input": {"optional": {"modelname": ["STRING", {"default": "", "multiline": false, "tooltip": "model name (can be multiple, separated by commas)"}], "positive": ["STRING", {"default": "unknown", "multiline": true, "tooltip": "positive prompt"}], "negative": ["STRING", {"default": "unknown", "multiline": true, "tooltip": "negative prompt"}], "width": ["INT", {"default": 512, "min": 0, "max": 16384, "step": 8, "tooltip": "image width"}], "height": ["INT", {"default": 512, "min": 0, "max": 16384, "step": 8, "tooltip": "image height"}], "seed_value": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "tooltip": "seed"}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000, "tooltip": "number of steps"}], "cfg": ["FLOAT", {"default": 7.0, "min": 0.0, "max": 100.0, "tooltip": "CFG value"}], "sampler_name": ["STRING", {"default": "", "multiline": false, "tooltip": "sampler name (as string)"}], "scheduler_name": ["STRING", {"default": "normal", "multiline": false, "tooltip": "scheduler name (as string)"}], "denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "tooltip": "denoise value"}], "clip_skip": ["INT", {"default": 0, "min": -24, "max": 24, "tooltip": "skip last CLIP layers (positive or negative value, 0 for no skip)"}], "additional_hashes": ["STRING", {"default": "", "multiline": false, "tooltip": "hashes separated by commas, optionally with names. 'Name:HASH' (e.g., 'MyLoRA:FF735FF83F98')\nWith download_civitai_data set to true, weights can be added as well. (e.g., 'HASH:Weight', 'Name:HASH:Weight')"}], "download_civitai_data": ["BOOLEAN", {"default": true, "tooltip": "Download and cache data from civitai.com to save correct metadata. Allows LoRA weights to be saved to the metadata."}], "easy_remix": ["BOOLEAN", {"default": true, "tooltip": "Strip LoRAs and simplify 'embedding:path' from the prompt to make the Remix option on civitai.com more seamless."}], "custom": ["STRING", {"default": "", "multiline": false, "tooltip": "custom string to add to the metadata, inserted into the a111 string between clip skip and model hash"}]}}, "input_order": {"optional": ["modelname", "positive", "negative", "width", "height", "seed_value", "steps", "cfg", "sampler_name", "scheduler_name", "denoise", "clip_skip", "additional_hashes", "download_civitai_data", "easy_remix", "custom"]}, "output": ["METADATA", "STRING", "STRING"], "output_is_list": [false, false, false], "output_name": ["metadata", "hashes", "a1111_params"], "name": "Image Saver Metadata", "display_name": "Image Saver Metadata", "description": "Prepare metadata for Image Saver Simple", "python_module": "custom_nodes.ComfyUI-Image-Saver", "category": "ImageSaver", "output_node": false, "output_tooltips": ["metadata for Image Saver Simple", "Comma-separated list of the hashes to chain with other Image Saver additional_hashes", "Written parameters to the image metadata"]}, "Sampler Selector (Image Saver)": {"input": {"required": {"sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"], {"tooltip": "sampler (Comfy's standard)"}]}}, "input_order": {"required": ["sampler_name"]}, "output": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"], "STRING"], "output_is_list": [false, false], "output_name": ["sampler", "sampler_name"], "name": "Sampler Selector (Image Saver)", "display_name": "Sampler Selector (Image Saver)", "description": "Provides one of the available ComfyUI samplers", "python_module": "custom_nodes.ComfyUI-Image-Saver", "category": "ImageSaver/utils", "output_node": false, "output_tooltips": ["sampler (SAMPLERS)", "sampler name (STRING)"]}, "Scheduler Selector (Image Saver)": {"input": {"required": {"scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"], {"tooltip": "scheduler (Comfy's standard)"}]}}, "input_order": {"required": ["scheduler"]}, "output": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"], "STRING"], "output_is_list": [false, false], "output_name": ["scheduler", "scheduler_name"], "name": "Scheduler Selector (Image Saver)", "display_name": "Scheduler Selector (Image Saver)", "description": "Provides one of the standard KSampler schedulers", "python_module": "custom_nodes.ComfyUI-Image-Saver", "category": "ImageSaver/utils", "output_node": false, "output_tooltips": ["scheduler (SCHEDULERS)", "scheduler name (STRING)"]}, "Scheduler Selector (inspire) (Image Saver)": {"input": {"required": {"scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "AYS SDXL", "AYS SD1", "AYS SVD", "GITS[coeff=1.2]", "OSS FLUX", "OSS Wan", "OSS Chroma"], {"tooltip": "scheduler (Comfy's standard + extras)"}]}}, "input_order": {"required": ["scheduler"]}, "output": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "AYS SDXL", "AYS SD1", "AYS SVD", "GITS[coeff=1.2]", "OSS FLUX", "OSS Wan", "OSS Chroma"], "STRING"], "output_is_list": [false, false], "output_name": ["scheduler", "scheduler_name"], "name": "Scheduler Selector (inspire) (Image Saver)", "display_name": "Scheduler Selector (inspire) (Image Saver)", "description": "Provides one of the KSampler (inspire) schedulers", "python_module": "custom_nodes.ComfyUI-Image-Saver", "category": "ImageSaver/utils", "output_node": false, "output_tooltips": ["scheduler (ComfyUI + Inspire Pack Schedulers)", "scheduler name (STRING)"]}, "Scheduler Selector (Eff.) (Image Saver)": {"input": {"required": {"scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "AYS SD1", "AYS SDXL", "AYS SVD", "GITS"], {"tooltip": "scheduler (Comfy's standard + Efficiency nodes)"}]}}, "input_order": {"required": ["scheduler"]}, "output": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "AYS SD1", "AYS SDXL", "AYS SVD", "GITS"], "STRING"], "output_is_list": [false, false], "output_name": ["scheduler", "scheduler_name"], "name": "Scheduler Selector (Eff.) (Image Saver)", "display_name": "Scheduler Selector (Eff.) (Image Saver)", "description": "Provides one of the KSampler (Eff.) schedulers", "python_module": "custom_nodes.ComfyUI-Image-Saver", "category": "ImageSaver/utils", "output_node": false, "output_tooltips": ["scheduler (ComfyUI + Efficiency Pack Schedulers)", "scheduler name (STRING)"]}, "Input Parameters (Image Saver)": {"input": {"required": {"seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "control_after_generate": true, "tooltip": "The random seed used for creating the noise."}], "steps": ["INT", {"default": 20, "min": 1, "max": 10000, "tooltip": "The number of steps used in the denoising process."}], "cfg": ["FLOAT", {"default": 7.0, "min": 0.0, "max": 100.0, "step": 0.1, "round": 0.01, "tooltip": "The Classifier-Free Guidance scale balances creativity and adherence to the prompt. Higher values result in images more closely matching the prompt however too high values will negatively impact quality."}], "sampler": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"], {"tooltip": "The algorithm used when sampling, this can affect the quality, speed, and style of the generated output."}], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"], {"tooltip": "The scheduler controls how noise is gradually removed to form the image."}], "denoise": ["FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01, "tooltip": "The amount of denoising applied, lower values will maintain the structure of the initial image allowing for image to image sampling."}]}}, "input_order": {"required": ["seed", "steps", "cfg", "sampler", "scheduler", "denoise"]}, "output": ["INT", "INT", "FLOAT", ["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"], "STRING", ["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"], "STRING", "FLOAT"], "output_is_list": [false, false, false, false, false, false, false, false], "output_name": ["seed", "steps", "cfg", "sampler", "sampler_name", "scheduler", "scheduler_name", "denoise"], "name": "Input Parameters (Image Saver)", "display_name": "Input Parameters (Image Saver)", "description": "Combined node for seed, steps, cfg, sampler, scheduler and denoise.", "python_module": "custom_nodes.ComfyUI-Image-Saver", "category": "ImageSaver/utils", "output_node": false, "output_tooltips": ["seed (INT)", "steps (INT)", "cfg (FLOAT)", "sampler (SAMPLERS)", "sampler name (STRING)", "scheduler (SCHEDULERS)", "scheduler name (STRING)", "denoise (FLOAT)"]}, "Seed Generator (Image Saver)": {"input": {"required": {"seed": ["INT", {"default": 0, "min": 0, "max": 18446744073709551615, "control_after_generate": true, "tooltip": "The random seed used for creating the noise."}], "increment": ["INT", {"default": 0, "min": -18446744073709551615, "max": 18446744073709551615, "tooltip": "number to add to the final seed value"}]}}, "input_order": {"required": ["seed", "increment"]}, "output": ["INT"], "output_is_list": [false], "output_name": ["INT"], "name": "Seed Generator (Image Saver)", "display_name": "Seed Generator (Image Saver)", "description": "Provides seed as integer", "python_module": "custom_nodes.ComfyUI-Image-Saver", "category": "ImageSaver/utils", "output_node": false, "output_tooltips": ["seed (INT)"]}, "String Literal (Image Saver)": {"input": {"required": {"string": ["STRING", {"default": "", "multiline": true, "tooltip": "string"}]}}, "input_order": {"required": ["string"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["STRING"], "name": "String Literal (Image Saver)", "display_name": "String Literal (Image Saver)", "description": "Provides a string", "python_module": "custom_nodes.ComfyUI-Image-Saver", "category": "ImageSaver/utils", "output_node": false, "output_tooltips": ["string (STRING)"]}, "Width/Height Literal (Image Saver)": {"input": {"required": {"size": ["INT", {"default": 512, "min": 0, "max": 16384, "step": 8, "tooltip": "size as integer (in steps of 8)"}]}}, "input_order": {"required": ["size"]}, "output": ["INT"], "output_is_list": [false], "output_name": ["size"], "name": "Width/Height Literal (Image Saver)", "display_name": "Width/Height Literal (Image Saver)", "description": "Provides integer number between 0 and 16384 (step=8)", "python_module": "custom_nodes.ComfyUI-Image-Saver", "category": "ImageSaver/utils", "output_node": false, "output_tooltips": ["size (INT)"]}, "Cfg Literal (Image Saver)": {"input": {"required": {"cfg": ["FLOAT", {"default": 7.0, "min": 0.0, "max": 100.0, "tooltip": "CFG as a floating point number"}]}}, "input_order": {"required": ["cfg"]}, "output": ["FLOAT"], "output_is_list": [false], "output_name": ["value"], "name": "Cfg Literal (Image Saver)", "display_name": "Cfg Literal (Image Saver)", "description": "Provides CFG value between 0.0 and 100.0", "python_module": "custom_nodes.ComfyUI-Image-Saver", "category": "ImageSaver/utils", "output_node": false, "output_tooltips": ["cfg (FLOAT)"]}, "Int Literal (Image Saver)": {"input": {"required": {"int": ["INT", {"default": 0, "min": 0, "max": 1000000, "tooltip": "integer number"}]}}, "input_order": {"required": ["int"]}, "output": ["INT"], "output_is_list": [false], "output_name": ["INT"], "name": "Int Literal (Image Saver)", "display_name": "Int Literal (Image Saver)", "description": "Provides integer number between 0 and 1000000", "python_module": "custom_nodes.ComfyUI-Image-Saver", "category": "ImageSaver/utils", "output_node": false, "output_tooltips": ["int (INT)"]}, "Float Literal (Image Saver)": {"input": {"required": {"float": ["FLOAT", {"default": 1.0, "min": 2.2250738585072014e-308, "max": 1.7976931348623157e+308, "step": 0.01, "tooltip": "floating point number"}]}}, "input_order": {"required": ["float"]}, "output": ["FLOAT"], "output_is_list": [false], "output_name": ["FLOAT"], "name": "Float Literal (Image Saver)", "display_name": "Float Literal (Image Saver)", "description": "Provides a floating point number between 2.2250738585072014e-308 and 1.7976931348623157e+308 (step=0.01)", "python_module": "custom_nodes.ComfyUI-Image-Saver", "category": "ImageSaver/utils", "output_node": false, "output_tooltips": ["float (FLOAT)"]}, "Conditioning Concat Optional (Image Saver)": {"input": {"required": {"conditioning_to": ["CONDITIONING", {"tooltip": "base conditioning to concat to (or pass through, if second is empty)"}]}, "optional": {"conditioning_from": ["CONDITIONING", {"tooltip": "conditioning to concat to conditioning_to, if empty, then conditioning_to is passed through unchanged"}]}}, "input_order": {"required": ["conditioning_to"], "optional": ["conditioning_from"]}, "output": ["CONDITIONING"], "output_is_list": [false], "output_name": ["CONDITIONING"], "name": "Conditioning Concat Optional (Image Saver)", "display_name": "Conditioning Concat Optional (Image Saver)", "description": "", "python_module": "custom_nodes.ComfyUI-Image-Saver", "category": "conditioning", "output_node": false}, "SchedulerToString (Image Saver)": {"input": {"required": {"scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"], {"tooltip": "scheduler (KSampler)"}]}}, "input_order": {"required": ["scheduler"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["scheduler_name"], "name": "SchedulerToString (Image Saver)", "display_name": "SchedulerToString (Image Saver)", "description": "Provides a KSampler's scheduler name as string", "python_module": "custom_nodes.ComfyUI-Image-Saver", "category": "ImageSaver/utils", "output_node": false, "output_tooltips": ["scheduler name (STRING)"]}, "SchedulerInspireToString (Image Saver)": {"input": {"required": {"scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "AYS SDXL", "AYS SD1", "AYS SVD", "GITS[coeff=1.2]", "OSS FLUX", "OSS Wan"], {"tooltip": "scheduler (KSampler inspire)"}]}}, "input_order": {"required": ["scheduler"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["scheduler_name"], "name": "SchedulerInspireToString (Image Saver)", "display_name": "SchedulerInspireToString (Image Saver)", "description": "Provides a Inspire Pack's scheduler name as string", "python_module": "custom_nodes.ComfyUI-Image-Saver", "category": "ImageSaver/utils", "output_node": false, "output_tooltips": ["scheduler name (STRING)"]}, "SchedulerEfficiencyToString (Image Saver)": {"input": {"required": {"scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal", "AYS SD1", "AYS SDXL", "AYS SVD", "GITS"], {"tooltip": "scheduler (Efficiency nodes)"}]}}, "input_order": {"required": ["scheduler"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["scheduler_name"], "name": "SchedulerEfficiencyToString (Image Saver)", "display_name": "SchedulerEfficiencyToString (Image Saver)", "description": "Provides a Efficiency pack's scheduler name as string", "python_module": "custom_nodes.ComfyUI-Image-Saver", "category": "ImageSaver/utils", "output_node": false, "output_tooltips": ["scheduler name (STRING)"]}, "SamplerToString (Image Saver)": {"input": {"required": {"sampler": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"], {"tooltip": "sampler (Comfy's standard)"}]}}, "input_order": {"required": ["sampler"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["sampler_name"], "name": "SamplerToString (Image Saver)", "display_name": "SamplerToString (Image Saver)", "description": "Provides a given sandard ComfyUI samplers's name as string", "python_module": "custom_nodes.ComfyUI-Image-Saver", "category": "ImageSaver/utils", "output_node": false, "output_tooltips": ["sampler name (STRING)"]}, "Civitai Hash Fetcher (Image Saver)": {"input": {"required": {"username": ["STRING", {"default": "", "multiline": false}], "model_name": ["STRING", {"default": "", "multiline": false}]}, "optional": {"version": ["STRING", {"default": "", "multiline": false, "tooltip": "Specify version keyword to fetch a particular model version (optional)"}]}}, "input_order": {"required": ["username", "model_name"], "optional": ["version"]}, "output": ["STRING"], "output_is_list": [false], "output_name": ["STRING"], "name": "Civitai Hash Fetcher (Image Saver)", "display_name": "Civitai Hash Fetcher (Image Saver)", "description": "", "python_module": "custom_nodes.ComfyUI-Image-Saver", "category": "CivitaiAPI", "output_node": false}, "Context Big (rgthree)": {"input": {"required": {}, "optional": {"base_ctx": ["RGTHREE_CONTEXT"], "model": ["MODEL"], "clip": ["CLIP"], "vae": ["VAE"], "positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "latent": ["LATENT"], "images": ["IMAGE"], "seed": ["INT", {"forceInput": true}], "steps": ["INT", {"forceInput": true}], "step_refiner": ["INT", {"forceInput": true}], "cfg": ["FLOAT", {"forceInput": true}], "ckpt_name": [["3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"], {"forceInput": true}], "sampler": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"], {"forceInput": true}], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"], {"forceInput": true}], "clip_width": ["INT", {"forceInput": true}], "clip_height": ["INT", {"forceInput": true}], "text_pos_g": ["STRING", {"forceInput": true}], "text_pos_l": ["STRING", {"forceInput": true}], "text_neg_g": ["STRING", {"forceInput": true}], "text_neg_l": ["STRING", {"forceInput": true}], "mask": ["MASK"], "control_net": ["CONTROL_NET"]}, "hidden": {}}, "input_order": {"required": [], "optional": ["base_ctx", "model", "clip", "vae", "positive", "negative", "latent", "images", "seed", "steps", "step_refiner", "cfg", "ckpt_name", "sampler", "scheduler", "clip_width", "clip_height", "text_pos_g", "text_pos_l", "text_neg_g", "text_neg_l", "mask", "control_net"], "hidden": []}, "output": ["RGTHREE_CONTEXT", "MODEL", "CLIP", "VAE", "CONDITIONING", "CONDITIONING", "LATENT", "IMAGE", "INT", "INT", "INT", "FLOAT", ["3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"], ["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"], ["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"], "INT", "INT", "STRING", "STRING", "STRING", "STRING", "MASK", "CONTROL_NET"], "output_is_list": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false], "output_name": ["CONTEXT", "MODEL", "CLIP", "VAE", "POSITIVE", "NEGATIVE", "LATENT", "IMAGE", "SEED", "STEPS", "STEP_REFINER", "CFG", "CKPT_NAME", "SAMPLER", "SCHEDULER", "CLIP_WIDTH", "CLIP_HEIGHT", "TEXT_POS_G", "TEXT_POS_L", "TEXT_NEG_G", "TEXT_NEG_L", "MASK", "CONTROL_NET"], "name": "Context Big (rgthree)", "display_name": "Context Big (rgthree)", "description": "", "python_module": "custom_nodes.rgthree-comfy", "category": "rgthree", "output_node": false}, "Context (rgthree)": {"input": {"required": {}, "optional": {"base_ctx": ["RGTHREE_CONTEXT"], "model": ["MODEL"], "clip": ["CLIP"], "vae": ["VAE"], "positive": ["CONDITIONING"], "negative": ["CONDITIONING"], "latent": ["LATENT"], "images": ["IMAGE"], "seed": ["INT", {"forceInput": true}]}, "hidden": {"version": "FLOAT"}}, "input_order": {"required": [], "optional": ["base_ctx", "model", "clip", "vae", "positive", "negative", "latent", "images", "seed"], "hidden": ["version"]}, "output": ["RGTHREE_CONTEXT", "MODEL", "CLIP", "VAE", "CONDITIONING", "CONDITIONING", "LATENT", "IMAGE", "INT"], "output_is_list": [false, false, false, false, false, false, false, false, false], "output_name": ["CONTEXT", "MODEL", "CLIP", "VAE", "POSITIVE", "NEGATIVE", "LATENT", "IMAGE", "SEED"], "name": "Context (rgthree)", "display_name": "Context (rgthree)", "description": "", "python_module": "custom_nodes.rgthree-comfy", "category": "rgthree", "output_node": false}, "Context Switch (rgthree)": {"input": {"required": {}, "optional": {}}, "input_order": {"required": [], "optional": []}, "output": ["RGTHREE_CONTEXT", "MODEL", "CLIP", "VAE", "CONDITIONING", "CONDITIONING", "LATENT", "IMAGE", "INT"], "output_is_list": [false, false, false, false, false, false, false, false, false], "output_name": ["CONTEXT", "MODEL", "CLIP", "VAE", "POSITIVE", "NEGATIVE", "LATENT", "IMAGE", "SEED"], "name": "Context Switch (rgthree)", "display_name": "Context Switch (rgthree)", "description": "", "python_module": "custom_nodes.rgthree-comfy", "category": "rgthree", "output_node": false}, "Context Switch Big (rgthree)": {"input": {"required": {}, "optional": {}}, "input_order": {"required": [], "optional": []}, "output": ["RGTHREE_CONTEXT", "MODEL", "CLIP", "VAE", "CONDITIONING", "CONDITIONING", "LATENT", "IMAGE", "INT", "INT", "INT", "FLOAT", ["3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"], ["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"], ["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"], "INT", "INT", "STRING", "STRING", "STRING", "STRING", "MASK", "CONTROL_NET"], "output_is_list": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false], "output_name": ["CONTEXT", "MODEL", "CLIP", "VAE", "POSITIVE", "NEGATIVE", "LATENT", "IMAGE", "SEED", "STEPS", "STEP_REFINER", "CFG", "CKPT_NAME", "SAMPLER", "SCHEDULER", "CLIP_WIDTH", "CLIP_HEIGHT", "TEXT_POS_G", "TEXT_POS_L", "TEXT_NEG_G", "TEXT_NEG_L", "MASK", "CONTROL_NET"], "name": "Context Switch Big (rgthree)", "display_name": "Context Switch Big (rgthree)", "description": "", "python_module": "custom_nodes.rgthree-comfy", "category": "rgthree", "output_node": false}, "Context Merge (rgthree)": {"input": {"required": {}, "optional": {}}, "input_order": {"required": [], "optional": []}, "output": ["RGTHREE_CONTEXT", "MODEL", "CLIP", "VAE", "CONDITIONING", "CONDITIONING", "LATENT", "IMAGE", "INT"], "output_is_list": [false, false, false, false, false, false, false, false, false], "output_name": ["CONTEXT", "MODEL", "CLIP", "VAE", "POSITIVE", "NEGATIVE", "LATENT", "IMAGE", "SEED"], "name": "Context Merge (rgthree)", "display_name": "Context Merge (rgthree)", "description": "", "python_module": "custom_nodes.rgthree-comfy", "category": "rgthree", "output_node": false}, "Context Merge Big (rgthree)": {"input": {"required": {}, "optional": {}}, "input_order": {"required": [], "optional": []}, "output": ["RGTHREE_CONTEXT", "MODEL", "CLIP", "VAE", "CONDITIONING", "CONDITIONING", "LATENT", "IMAGE", "INT", "INT", "INT", "FLOAT", ["3Guofeng3_v32Light.safetensors", "CHEYENNE_v22VAEBaked.safetensors", "Jib_Mix_V18_F_00001_.safetensors", "Juggernaut-XL_v9_RunDiffusionPhoto_v2.safetensors", "JuggernautXL.safetensors", "ace_step_v1_3.5b.safetensors", "aniversePonyXL_v60.safetensors", "cyberrealisticXL_v56.safetensors", "dreamCreationVirtual3DECommerce_v10.safetensors", "dreamshaperXL_v21TurboDPMSDE.safetensors", "epiCRealismXL-LastFAME.safetensors", "hassakuXLIllustrious_v22.safetensors", "iniverseMixSFWNSFW_guofengXLV15.safetensors", "iniverseMixSFWNSFW_ponyRealGuofengV51.safetensors", "jibMixPonyRealistic_v4PixelPrecision.safetensors", "jibMixRealisticXL_v160Aphrodite.safetensors", "jibMixRealisticXL_v170SmokeSheen.safetensors", "novaillustrousNSFW_v20.safetensors", "realvisxlV50_v50LightningBakedvae.safetensors", "sd3.5_large.safetensors", "sd3.5_large_fp8_scaled.safetensors", "sd3.5_large_turbo.safetensors", "sd_xl_base_1.0.safetensors", "sd_xl_refiner_1.0.safetensors", "sd_xl_turbo_1.0_fp16.safetensors", "sdxl_lightning_4step.safetensors", "smoothMixOldVerNoobai_Illustrious2NoobaiV2.safetensors", "stable-audio-open.safetensors", "v1-5-pruned-emaonly-fp16.safetensors", "v2-1_768-ema-pruned.safetensors"], ["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"], ["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"], "INT", "INT", "STRING", "STRING", "STRING", "STRING", "MASK", "CONTROL_NET"], "output_is_list": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false], "output_name": ["CONTEXT", "MODEL", "CLIP", "VAE", "POSITIVE", "NEGATIVE", "LATENT", "IMAGE", "SEED", "STEPS", "STEP_REFINER", "CFG", "CKPT_NAME", "SAMPLER", "SCHEDULER", "CLIP_WIDTH", "CLIP_HEIGHT", "TEXT_POS_G", "TEXT_POS_L", "TEXT_NEG_G", "TEXT_NEG_L", "MASK", "CONTROL_NET"], "name": "Context Merge Big (rgthree)", "display_name": "Context Merge Big (rgthree)", "description": "", "python_module": "custom_nodes.rgthree-comfy", "category": "rgthree", "output_node": false}, "Display Int (rgthree)": {"input": {"required": {"input": ["INT", {"forceInput": true}]}}, "input_order": {"required": ["input"]}, "output": [], "output_is_list": [], "output_name": [], "name": "Display Int (rgthree)", "display_name": "Display Int (rgthree)", "description": "", "python_module": "custom_nodes.rgthree-comfy", "category": "rgthree", "output_node": true}, "Display Any (rgthree)": {"input": {"required": {"source": ["*", {}]}, "hidden": {"unique_id": "UNIQUE_ID", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": ["source"], "hidden": ["unique_id", "extra_pnginfo"]}, "output": [], "output_is_list": [], "output_name": [], "name": "Display Any (rgthree)", "display_name": "Display Any (rgthree)", "description": "", "python_module": "custom_nodes.rgthree-comfy", "category": "rgthree", "output_node": true}, "Lora Loader Stack (rgthree)": {"input": {"required": {"model": ["MODEL"], "clip": ["CLIP"], "lora_01": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "strength_01": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_02": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "strength_02": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_03": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "strength_03": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}], "lora_04": [["None", "Smooth_SteamPunk.safetensors", "aesthetic_anime_v1s.safetensors"]], "strength_04": ["FLOAT", {"default": 1.0, "min": -10.0, "max": 10.0, "step": 0.01}]}}, "input_order": {"required": ["model", "clip", "lora_01", "strength_01", "lora_02", "strength_02", "lora_03", "strength_03", "lora_04", "strength_04"]}, "output": ["MODEL", "CLIP"], "output_is_list": [false, false], "output_name": ["MODEL", "CLIP"], "name": "Lora Loader Stack (rgthree)", "display_name": "Lora Loader Stack (rgthree)", "description": "", "python_module": "custom_nodes.rgthree-comfy", "category": "rgthree", "output_node": false}, "Seed (rgthree)": {"input": {"required": {"seed": ["INT", {"default": 0, "min": -1125899906842624, "max": 1125899906842624}]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO", "unique_id": "UNIQUE_ID"}}, "input_order": {"required": ["seed"], "hidden": ["prompt", "extra_pnginfo", "unique_id"]}, "output": ["INT"], "output_is_list": [false], "output_name": ["SEED"], "name": "Seed (rgthree)", "display_name": "Seed (rgthree)", "description": "", "python_module": "custom_nodes.rgthree-comfy", "category": "rgthree", "output_node": false}, "Image Inset Crop (rgthree)": {"input": {"required": {"image": ["IMAGE"], "measurement": [["Pixels", "Percentage"]], "left": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 8}], "right": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 8}], "top": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 8}], "bottom": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 8}]}}, "input_order": {"required": ["image", "measurement", "left", "right", "top", "bottom"]}, "output": ["IMAGE"], "output_is_list": [false], "output_name": ["IMAGE"], "name": "Image Inset Crop (rgthree)", "display_name": "Image Inset Crop (rgthree)", "description": "", "python_module": "custom_nodes.rgthree-comfy", "category": "rgthree", "output_node": false}, "Power Prompt (rgthree)": {"input": {"required": {"prompt": ["STRING", {"multiline": true, "dynamicPrompts": true}]}, "optional": {"opt_model": ["MODEL"], "opt_clip": ["CLIP"], "insert_lora": [["CHOOSE", "DISABLE LORAS", "Smooth_SteamPunk", "aesthetic_anime_v1s"]], "insert_embedding": [["CHOOSE", "SDA768", "SDXL/SmoothNoob_Quality", "SDXL/Stable_Yogis_PDXL_Positives"]], "insert_saved": [["CHOOSE"]]}, "hidden": {"values_insert_saved": [["CHOOSE"]]}}, "input_order": {"required": ["prompt"], "optional": ["opt_model", "opt_clip", "insert_lora", "insert_embedding", "insert_saved"], "hidden": ["values_insert_saved"]}, "output": ["CONDITIONING", "MODEL", "CLIP", "STRING"], "output_is_list": [false, false, false, false], "output_name": ["CONDITIONING", "MODEL", "CLIP", "TEXT"], "name": "Power Prompt (rgthree)", "display_name": "Power Prompt (rgthree)", "description": "", "python_module": "custom_nodes.rgthree-comfy", "category": "rgthree", "output_node": false}, "Power Prompt - Simple (rgthree)": {"input": {"required": {"prompt": ["STRING", {"multiline": true, "dynamicPrompts": true}]}, "optional": {"opt_clip": ["CLIP"], "insert_embedding": [["CHOOSE", "SDA768", "SDXL/SmoothNoob_Quality", "SDXL/Stable_Yogis_PDXL_Positives"]], "insert_saved": [["CHOOSE"]]}, "hidden": {"values_insert_saved": [["CHOOSE"]]}}, "input_order": {"required": ["prompt"], "optional": ["opt_clip", "insert_embedding", "insert_saved"], "hidden": ["values_insert_saved"]}, "output": ["CONDITIONING", "STRING"], "output_is_list": [false, false], "output_name": ["CONDITIONING", "TEXT"], "name": "Power Prompt - Simple (rgthree)", "display_name": "Power Prompt - Simple (rgthree)", "description": "", "python_module": "custom_nodes.rgthree-comfy", "category": "rgthree", "output_node": false}, "KSampler Config (rgthree)": {"input": {"required": {"steps_total": ["INT", {"default": 30, "min": 1, "max": 16384, "step": 1}], "refiner_step": ["INT", {"default": 24, "min": 1, "max": 16384, "step": 1}], "cfg": ["FLOAT", {"default": 8.0, "min": 0.0, "max": 100.0, "step": 0.5}], "sampler_name": [["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"]], "scheduler": [["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]]}}, "input_order": {"required": ["steps_total", "refiner_step", "cfg", "sampler_name", "scheduler"]}, "output": ["INT", "INT", "FLOAT", ["euler", "euler_cfg_pp", "euler_ancestral", "euler_ancestral_cfg_pp", "heun", "heunpp2", "dpm_2", "dpm_2_ancestral", "lms", "dpm_fast", "dpm_adaptive", "dpmpp_2s_ancestral", "dpmpp_2s_ancestral_cfg_pp", "dpmpp_sde", "dpmpp_sde_gpu", "dpmpp_2m", "dpmpp_2m_cfg_pp", "dpmpp_2m_sde", "dpmpp_2m_sde_gpu", "dpmpp_2m_sde_heun", "dpmpp_2m_sde_heun_gpu", "dpmpp_3m_sde", "dpmpp_3m_sde_gpu", "ddpm", "lcm", "ipndm", "ipndm_v", "deis", "res_multistep", "res_multistep_cfg_pp", "res_multistep_ancestral", "res_multistep_ancestral_cfg_pp", "gradient_estimation", "gradient_estimation_cfg_pp", "er_sde", "seeds_2", "seeds_3", "sa_solver", "sa_solver_pece", "ddim", "uni_pc", "uni_pc_bh2"], ["simple", "sgm_uniform", "karras", "exponential", "ddim_uniform", "beta", "normal", "linear_quadratic", "kl_optimal"]], "output_is_list": [false, false, false, false, false], "output_name": ["STEPS", "REFINER_STEP", "CFG", "SAMPLER", "SCHEDULER"], "name": "KSampler Config (rgthree)", "display_name": "KSampler Config (rgthree)", "description": "", "python_module": "custom_nodes.rgthree-comfy", "category": "rgthree", "output_node": false}, "SDXL Empty Latent Image (rgthree)": {"input": {"required": {"dimensions": [["1536 x 640   (landscape)", "1344 x 768   (landscape)", "1216 x 832   (landscape)", "1152 x 896   (landscape)", "1024 x 1024  (square)", " 896 x 1152  (portrait)", " 832 x 1216  (portrait)", " 768 x 1344  (portrait)", " 640 x 1536  (portrait)"], {"default": "1024 x 1024  (square)"}], "clip_scale": ["FLOAT", {"default": 2.0, "min": 1.0, "max": 10.0, "step": 0.5}], "batch_size": ["INT", {"default": 1, "min": 1, "max": 64}]}}, "input_order": {"required": ["dimensions", "clip_scale", "batch_size"]}, "output": ["LATENT", "INT", "INT"], "output_is_list": [false, false, false], "output_name": ["LATENT", "CLIP_WIDTH", "CLIP_HEIGHT"], "name": "SDXL Empty Latent Image (rgthree)", "display_name": "SDXL Empty Latent Image (rgthree)", "description": "", "python_module": "custom_nodes.rgthree-comfy", "category": "rgthree", "output_node": false}, "SDXL Power Prompt - Positive (rgthree)": {"input": {"required": {"prompt_g": ["STRING", {"multiline": true, "dynamicPrompts": true}], "prompt_l": ["STRING", {"multiline": true, "dynamicPrompts": true}]}, "optional": {"opt_model": ["MODEL"], "opt_clip": ["CLIP"], "opt_clip_width": ["INT", {"forceInput": true, "default": 1024.0, "min": 0, "max": 16384}], "opt_clip_height": ["INT", {"forceInput": true, "default": 1024.0, "min": 0, "max": 16384}], "insert_lora": [["CHOOSE", "DISABLE LORAS", "Smooth_SteamPunk", "aesthetic_anime_v1s"]], "insert_embedding": [["CHOOSE", "SDA768", "SDXL/SmoothNoob_Quality", "SDXL/Stable_Yogis_PDXL_Positives"]], "insert_saved": [["CHOOSE"]], "target_width": ["INT", {"default": -1, "min": -1, "max": 16384}], "target_height": ["INT", {"default": -1, "min": -1, "max": 16384}], "crop_width": ["INT", {"default": -1, "min": -1, "max": 16384}], "crop_height": ["INT", {"default": -1, "min": -1, "max": 16384}]}, "hidden": {"values_insert_saved": [["CHOOSE"]]}}, "input_order": {"required": ["prompt_g", "prompt_l"], "optional": ["opt_model", "opt_clip", "opt_clip_width", "opt_clip_height", "insert_lora", "insert_embedding", "insert_saved", "target_width", "target_height", "crop_width", "crop_height"], "hidden": ["values_insert_saved"]}, "output": ["CONDITIONING", "MODEL", "CLIP", "STRING", "STRING"], "output_is_list": [false, false, false, false, false], "output_name": ["CONDITIONING", "MODEL", "CLIP", "TEXT_G", "TEXT_L"], "name": "SDXL Power Prompt - Positive (rgthree)", "display_name": "SDXL Power Prompt - Positive (rgthree)", "description": "", "python_module": "custom_nodes.rgthree-comfy", "category": "rgthree", "output_node": false}, "SDXL Power Prompt - Simple / Negative (rgthree)": {"input": {"required": {"prompt_g": ["STRING", {"multiline": true, "dynamicPrompts": true}], "prompt_l": ["STRING", {"multiline": true, "dynamicPrompts": true}]}, "optional": {"opt_clip": ["CLIP"], "opt_clip_width": ["INT", {"forceInput": true, "default": 1024.0, "min": 0, "max": 16384}], "opt_clip_height": ["INT", {"forceInput": true, "default": 1024.0, "min": 0, "max": 16384}], "insert_embedding": [["CHOOSE", "SDA768", "SDXL/SmoothNoob_Quality", "SDXL/Stable_Yogis_PDXL_Positives"]], "insert_saved": [["CHOOSE"]], "target_width": ["INT", {"default": -1, "min": -1, "max": 16384}], "target_height": ["INT", {"default": -1, "min": -1, "max": 16384}], "crop_width": ["INT", {"default": -1, "min": -1, "max": 16384}], "crop_height": ["INT", {"default": -1, "min": -1, "max": 16384}]}, "hidden": {"values_insert_saved": [["CHOOSE"]]}}, "input_order": {"required": ["prompt_g", "prompt_l"], "optional": ["opt_clip", "opt_clip_width", "opt_clip_height", "insert_embedding", "insert_saved", "target_width", "target_height", "crop_width", "crop_height"], "hidden": ["values_insert_saved"]}, "output": ["CONDITIONING", "STRING", "STRING"], "output_is_list": [false, false, false], "output_name": ["CONDITIONING", "TEXT_G", "TEXT_L"], "name": "SDXL Power Prompt - Simple / Negative (rgthree)", "display_name": "SDXL Power Prompt - Simple / Negative (rgthree)", "description": "", "python_module": "custom_nodes.rgthree-comfy", "category": "rgthree", "output_node": false}, "Any Switch (rgthree)": {"input": {"required": {}, "optional": {}}, "input_order": {"required": [], "optional": []}, "output": ["*"], "output_is_list": [false], "output_name": ["*"], "name": "Any Switch (rgthree)", "display_name": "Any Switch (rgthree)", "description": "", "python_module": "custom_nodes.rgthree-comfy", "category": "rgthree", "output_node": false}, "Image Comparer (rgthree)": {"input": {"required": {}, "optional": {"image_a": ["IMAGE"], "image_b": ["IMAGE"]}, "hidden": {"prompt": "PROMPT", "extra_pnginfo": "EXTRA_PNGINFO"}}, "input_order": {"required": [], "optional": ["image_a", "image_b"], "hidden": ["prompt", "extra_pnginfo"]}, "output": [], "output_is_list": [], "output_name": [], "name": "Image Comparer (rgthree)", "display_name": "Image Comparer (rgthree)", "description": "Saves the input images to your ComfyUI output directory.", "python_module": "custom_nodes.rgthree-comfy", "category": "rgthree", "output_node": true}, "Power Lora Loader (rgthree)": {"input": {"required": {}, "optional": {"model": ["MODEL"], "clip": ["CLIP"]}, "hidden": {}}, "input_order": {"required": [], "optional": ["model", "clip"], "hidden": []}, "output": ["MODEL", "CLIP"], "output_is_list": [false, false], "output_name": ["MODEL", "CLIP"], "name": "Power Lora Loader (rgthree)", "display_name": "Power Lora Loader (rgthree)", "description": "", "python_module": "custom_nodes.rgthree-comfy", "category": "rgthree", "output_node": false}, "Power Primitive (rgthree)": {"input": {"required": {}, "optional": {}}, "input_order": {"required": [], "optional": []}, "output": ["*"], "output_is_list": [false], "output_name": ["*"], "name": "Power Primitive (rgthree)", "display_name": "Power Primitive (rgthree)", "description": "", "python_module": "custom_nodes.rgthree-comfy", "category": "rgthree", "output_node": false}, "Image or Latent Size (rgthree)": {"input": {"required": {}, "optional": {}}, "input_order": {"required": [], "optional": []}, "output": ["INT", "INT"], "output_is_list": [false, false], "output_name": ["WIDTH", "HEIGHT"], "name": "Image or Latent Size (rgthree)", "display_name": "Image or Latent Size (rgthree)", "description": "", "python_module": "custom_nodes.rgthree-comfy", "category": "rgthree", "output_node": false}, "Image Resize (rgthree)": {"input": {"required": {"image": ["IMAGE"], "measurement": [["pixels", "percentage"]], "width": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 1, "tooltip": "The width of the desired resize. A pixel value if measurement is 'pixels' or a 100% scale percentage value if measurement is 'percentage'. Passing '0' will calculate the dimension based on the height."}], "height": ["INT", {"default": 0, "min": 0, "max": 16384, "step": 1}], "fit": [["crop", "pad", "contain"], {"tooltip": "'crop' resizes so the image covers the desired width and height, and center-crops the excess, returning exactly the desired width and height.\n'pad' resizes so the image fits inside the desired width and height, and fills the empty space returning exactly the desired width and height.\n'contain' resizes so the image fits inside the desired width and height, and returns the image with it's new size, with one side liekly smaller than the desired.\n\nNote, if either width or height is '0', the effective fit is 'contain'."}], "method": [["nearest-exact", "bilinear", "area", "bicubic", "lanczos"]]}}, "input_order": {"required": ["image", "measurement", "width", "height", "fit", "method"]}, "output": ["IMAGE", "INT", "INT"], "output_is_list": [false, false, false], "output_name": ["IMAGE", "WIDTH", "HEIGHT"], "name": "Image Resize (rgthree)", "display_name": "Image Resize (rgthree)", "description": "Resize the image.", "python_module": "custom_nodes.rgthree-comfy", "category": "rgthree", "output_node": false}, "Power Puter (rgthree)": {"input": {"required": {}, "optional": {}, "hidden": {"unique_id": "UNIQUE_ID", "extra_pnginfo": "EXTRA_PNGINFO", "prompt": "PROMPT"}}, "input_order": {"required": [], "optional": [], "hidden": ["unique_id", "extra_pnginfo", "prompt"]}, "output": ["*"], "output_is_list": [false], "output_name": ["*"], "name": "Power Puter (rgthree)", "display_name": "Power Puter (rgthree)", "description": "", "python_module": "custom_nodes.rgthree-comfy", "category": "rgthree", "output_node": false}}