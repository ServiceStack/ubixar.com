{
  "7bafc7eb-16fe-49c8-b5f7-a8475a576bbd": {
    "prompt": [
      35,
      "7bafc7eb-16fe-49c8-b5f7-a8475a576bbd",
      {
        "1": {
          "inputs": {
            "model_id": "openai/whisper-large-v3",
            "language": "en"
          },
          "class_type": "TT-LoadWhisperModel"
        },
        "2": {
          "inputs": {
            "video": "videos_litdb4.mp4"
          },
          "class_type": "TT-LoadVideoAudio"
        },
        "3": {
          "inputs": {
            "pipeline": [
              "1",
              0
            ],
            "wav_bytes": [
              "2",
              0
            ],
            "format_newlines_on_punctuation": true,
            "save_transcription": false,
            "save_chunks": false,
            "save_filename": "transcription",
            "overwrite_existing": true
          },
          "class_type": "TT-WhisperTranscription"
        },
        "7": {
          "inputs": {
            "text": [
              "3",
              0
            ]
          },
          "class_type": "ShowText|pysssss"
        }
      },
      {
        "extra_pnginfo": {
          "workflow": {
            "id": "417d8c71-b8d5-4b91-87fa-d01815b9b6eb",
            "revision": 0,
            "last_node_id": 7,
            "last_link_id": 5,
            "nodes": [
              {
                "id": 1,
                "type": "TT-LoadWhisperModel",
                "pos": [
                  100,
                  100
                ],
                "size": [
                  315,
                  82
                ],
                "flags": {},
                "order": 0,
                "mode": 0,
                "inputs": [],
                "outputs": [
                  {
                    "name": "pipeline",
                    "type": "TRANSCRIPTION_PIPELINE",
                    "slot_index": 0,
                    "links": [
                      1
                    ]
                  }
                ],
                "properties": {
                  "cnr_id": "ComfyUI-TranscriptionTools",
                  "ver": "24aa05c54943de783e2de62feb2f394242b51ba6",
                  "Node name for S&R": "TT-LoadWhisperModel"
                },
                "widgets_values": [
                  "openai/whisper-large-v3",
                  "en"
                ]
              },
              {
                "id": 2,
                "type": "TT-LoadVideoAudio",
                "pos": [
                  100,
                  325
                ],
                "size": [
                  315,
                  237.9375
                ],
                "flags": {},
                "order": 1,
                "mode": 0,
                "inputs": [],
                "outputs": [
                  {
                    "name": "wav_bytes",
                    "type": "WAV_BYTES",
                    "slot_index": 0,
                    "links": [
                      2
                    ]
                  }
                ],
                "properties": {
                  "cnr_id": "ComfyUI-TranscriptionTools",
                  "ver": "24aa05c54943de783e2de62feb2f394242b51ba6",
                  "Node name for S&R": "TT-LoadVideoAudio"
                },
                "widgets_values": [
                  "videos_litdb4.mp4",
                  {
                    "hidden": false,
                    "paused": false,
                    "params": {
                      "filename": "videos_litdb4.mp4",
                      "type": "input",
                      "format": "video/mp4"
                    }
                  }
                ]
              },
              {
                "id": 3,
                "type": "TT-WhisperTranscription",
                "pos": [
                  475,
                  100
                ],
                "size": [
                  371.20001220703125,
                  174
                ],
                "flags": {},
                "order": 2,
                "mode": 0,
                "inputs": [
                  {
                    "name": "pipeline",
                    "type": "TRANSCRIPTION_PIPELINE",
                    "link": 1
                  },
                  {
                    "name": "wav_bytes",
                    "type": "WAV_BYTES",
                    "link": 2
                  }
                ],
                "outputs": [
                  {
                    "name": "transcription",
                    "type": "STRING",
                    "slot_index": 0,
                    "links": [
                      5
                    ]
                  },
                  {
                    "name": "chunks",
                    "type": "STRING",
                    "links": null
                  }
                ],
                "properties": {
                  "cnr_id": "ComfyUI-TranscriptionTools",
                  "ver": "24aa05c54943de783e2de62feb2f394242b51ba6",
                  "Node name for S&R": "TT-WhisperTranscription"
                },
                "widgets_values": [
                  true,
                  false,
                  false,
                  "transcription",
                  true
                ]
              },
              {
                "id": 7,
                "type": "ShowText|pysssss",
                "pos": [
                  935.9437866210938,
                  135.27362060546875
                ],
                "size": [
                  416.7431335449219,
                  334.63787841796875
                ],
                "flags": {},
                "order": 3,
                "mode": 0,
                "inputs": [
                  {
                    "name": "text",
                    "type": "STRING",
                    "link": 5
                  }
                ],
                "outputs": [
                  {
                    "name": "STRING",
                    "shape": 6,
                    "type": "STRING",
                    "links": null
                  }
                ],
                "properties": {
                  "cnr_id": "comfyui-custom-scripts",
                  "ver": "b0f21a3c13bac21068d1dcceb7c2d466167054b3",
                  "Node name for S&R": "ShowText|pysssss"
                },
                "widgets_values": []
              }
            ],
            "links": [
              [
                1,
                1,
                0,
                3,
                0,
                "TRANSCRIPTION_PIPELINE"
              ],
              [
                2,
                2,
                0,
                3,
                1,
                "WAV_BYTES"
              ],
              [
                5,
                3,
                0,
                7,
                0,
                "STRING"
              ]
            ],
            "groups": [],
            "config": {},
            "extra": {
              "ds": {
                "scale": 1.0834705943388394,
                "offset": [
                  -28.85865313507718,
                  28.45949389894207
                ]
              },
              "frontendVersion": "1.17.11",
              "VHS_latentpreview": false,
              "VHS_latentpreviewrate": 0,
              "VHS_MetadataImage": true,
              "VHS_KeepIntermediate": true
            },
            "version": 0.4
          }
        },
        "client_id": "615dd53dcda745a4a46d414da62474e8"
      },
      [
        "3",
        "7"
      ]
    ],
    "outputs": {
      "7": {
        "text": [
          " In today's video we're introducing LitDB, a type safe and expressive ORM for JavaScript and TypeScript.\nLitDB works with SQLite, Postgres and MySQL with the same syntax, and it gives you a productive workflow within Telesense using your typed data models, along with design type checking and compile time static analysis.\nthis.\nJumping right in, we have created a basic bun project here using along with design type checking and compile time static analysis.\nJumping right in, we have created a basic bun project here using SQLite, and we're setting up a watch function to output the converted SQL statements that LitDB generates to show you how you can use LitDB and the development experience it has to offer.\nWith our watch output set up for immediate feedback, let's create our data models.\nLet there be light in the darkness.\nDB and the development experience it has to offer.\nWith our watch output set up for immediate feedback, let's create our data models.\nLitDB leans heavily on the sophisticated type system of TypeScript to ensure your statements are correct and safe from SQL injection.\nWe declare a class to represent a product table with a SKU, name and price properties that we then pass to a table method specifying additional information based on what we want the SQL schema to be.\nHere we are using the type option to specify the column we want to use and adding properties to our watch method so we can get immediate feedback and see the drop and create statements on the right hand side as we save our changes.\nAdding required to the name flows down to the SQL as a not null constraint.\nChanging real to money changes our column to an integer since SQLite doesn't have a money column type.\nExpanding on the output SQL, we can add insert, and we can see the generated SQL, but doing the same for update statement breaks the output and correctly informs us that our product type is missing a primary key.\nAnd we can add one by specifying primary key property as true on our column definition, and it fixes our generation.\nAnd then we can add delete as well.\nMoving on to a query example, and the minimal from statement will always specify each column in your model type in the generated SQL statement, rather than relying on the star syntax to return all the data just to be thrown away when hydrating the instance of product.\nWe can also specify the columns in a type safe way using template literals, so if you make a typo anywhere here you will get a type error ensuring that you get the feedback early and often if there are any issues.\nInstead of using the table method we can also use decorators to declare additional information about our schema directly onto our model type of product.\nThis can be a lot more concise since you are never repeating the same names of the columns and we have a very efficient way of enabling type safe refactors which work well with the use of type safe template literals and class and property decorators.\nRegardless of if you're using the table method or using the decorators, we have the same option syntax here for controlling different aspects of the column configuration, e.g.\nprimary key is set to true, required is true, and we have our column types on the left hand side.\nTo show that we can use SQLite, Postgres or MySQL, we can import those dialects from libdb, and all we have to do is change our alias of the dollar sign assignment from our original SQLite to mysql or postgres and on the right hand side we can see the technology specific syntax for our SQL statements changing to match.\nIf you have a different preference for dialects or naming strategies we can also change this naming strategy to have more control over the conventions used to name our tables, columns, etc.\nSticking with SQLite now, let's expand our schema to handle contacts and orders.\nWe'll start by adding the contact class and similar to our product model, we'll use the at table decorator and define our columns using the at columns decorator.\nNotice that if we don't add these decorators and we try to use it to create the contact table, we get an error indicating that we're missing the at table decorator.\nLitDB's type system immediately catches this and helps us prevent runtime issues.\nAfter adding the proper decorator, our contact model includes an auto-incrementing integer ID See you current time.\nThe SQL output on the right hand side shows how LitDB translates these TypeScript definitions into proper SQL constraints and types.\nWe then add a column decorator to provide additional information about our schema.\nWe can provide a minimal amount and let LitDB provide defaults based on type information and only the parts we need to correctly define our schema.\nAnd thanks to the Bun runtime, we have a great development experience with auto update and we can instantly see our schema changes on save.\nMoving on to orders, we'll create an order class to track purchases.\nThis is where LitDB's relationship capabilities really shine.\nOur order model introduces a foreign key relationship with the contact table through the contact ID field.\nIn the decorator, we specify this relationship using the references option, which takes both the target table and desired behavior when records are deleted or updated.\nHere we've chosen cascade for our delete behavior, meaning that if a contact is deleted, their orders will automatically be removed as well.\nAnd finally, let's add order item to create a many-to-many relationship between orders and products.\nEach order item represents a line in an order, tracking quantity and total.\nThe order item table references both the order and product tables, creating a proper junction table in our database schema.\nThroughout this process, LitDB's type system has been working behind the scenes to ensure our relationships are properly defined.\nIf we try to reference a non-existent table or column, we'll get immediate feedback through TypeScript's type checking.\nThis makes refactoring and maintaining complex database schemas much more reliable compared to writing raw SQL or using a less type-safe ORM.\nAll of these relationships are reflected in the generated SQL on the right-hand side, where you can see the proper foreign key constraints and cascading rules being applied.\nAll of these relationships are reflected in the generated SQL on the right hand side, where you can see the proper foreign key constraints and cascading rules being applied.\nSo far, we've covered building your schema using the create table method.\nAnd now let's look at a more detailed example of using select to query your database using your data model and LitDB.\nOne of the advantages of using template literals the way that LitDB does with TypeScript's type checker means that all the options passed to your query either by internally through your application or from user input from another system means that your options are parameterized meaning they can't escape the clause that they're added to, so it avoids SQL injection attacks as we can see in this example.\nYou can use LitDB's type system and fluent syntax to align with SQL's execution order to help us write more predictable and maintainable queries.\nSQL has a specific order in which it processes different clauses, and LitDB's Fluent API is designed to make this order clear and type-safe.\nLet's start with a query that demonstrates the order of operations.\nNotice how LitDB's type system knows what tables are in scope after each join.\nThe O, C and I alias become strongly typed variables in our Lambda functions.\nIf we try to reference a column that doesn't exist or use the wrong type, TypeScript will catch it immediately.\nNext in SQL's execution order is the WHERE clause.\nLitDB ensures that all column references are type safe.\nYou can't accidentally reference price on the order table or contact ID on the product table.\nThe template literal syntax also ensures proper parameter binding for our values.\nFor group operations, LitDB's template literal syntax provides flexibility while maintaining clean SQL generation.\nWhen we need to use SQL aggregation functions or Windows functions, the template literal syntax makes it straightforward to include them in our queries.\nThis approach means that we can easily mix typed column references with any SQL functions we need, while still getting the benefits of type checking for our table and column references.\nFinally, SQL handles sorting and limiting.\nLooking at the generated SQL on the right-hand side, we can see how each of these operations translates into standard SQL in the correct order.\nThis is crucial because understanding SQL's execution order helps us write more efficient queries.\nFor example, knowing that the where filter happens before select means we can filter out rows early in the process.\nLitDB's type system is particularly powerful because it understands table relationships tips and column availability.\nTrying to reference a column before it's joined or use an incorrect column type, and TypeScript will tell you immediately.\nAnd this aligns with how SQL actually executes queries, helping us prevent common mistakes like referencing columns from unjoined tables, mixing up table aliases across join conditions, using incorrect column types in comparisons, referring to tables that haven't been joined yet, et cetera.\nBy making SQL's execution order explicit through its API design and enforcing through types, LitDB helps us write correct queries the first time while maintaining the flexibility to build complex queries when needed.\nLastly, let's take a look at how we will combine two separate queries that we've constructed.\nCurrently we were outputting just a single query down the bottom.\nNow we're defining a new query that is filtering for hot products from the order item table.\nIt does this using a string of skews that we can use with an in clause in our q hot variable.\nThis variable is the query itself and we can reuse this variable and combine it with the query below.\nOnce we've grouped our order items by SKU and sorted them using the sum of the quantity in the order item, we can then select just the ID.\nSince we know that the QHOT will return a list of IDs for our order items, we can then use it in the query below, additionally filtering with an in clause on i.id, where i is a type safe order item, so we know for sure we're comparing two of the same type.\nSaving our changes, and on the right hand side, it updates to show the use of that sub query in our select at the bottom.\nLitDB is for TypeScript and JavaScript applications that's the SQL you know but type safe parameterized expressive and portable.\nIt works out of the box with SQLite, Postgres and MySQL.\nFind out more at litdb.dev, which has all the documentation.\nAnd thanks for watching."
        ]
      }
    },
    "status": {
      "status_str": "success",
      "completed": true,
      "messages": [
        [
          "execution_start",
          {
            "prompt_id": "7bafc7eb-16fe-49c8-b5f7-a8475a576bbd",
            "timestamp": 1746463897499
          }
        ],
        [
          "execution_cached",
          {
            "nodes": [
              "1"
            ],
            "prompt_id": "7bafc7eb-16fe-49c8-b5f7-a8475a576bbd",
            "timestamp": 1746463897500
          }
        ],
        [
          "execution_success",
          {
            "prompt_id": "7bafc7eb-16fe-49c8-b5f7-a8475a576bbd",
            "timestamp": 1746463907088
          }
        ]
      ]
    },
    "meta": {
      "7": {
        "node_id": "7",
        "display_node": "7",
        "parent_node": null,
        "real_node_id": "7"
      }
    }
  }
}